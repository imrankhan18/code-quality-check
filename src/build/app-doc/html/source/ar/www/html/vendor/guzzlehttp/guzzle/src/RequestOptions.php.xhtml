<?xml version="1.0"?>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>phpDox - Source of RequestOptions.php</title><link rel="stylesheet" type="text/css" href="../../../../../../../../css/style.css" media="screen"/><link rel="stylesheet" href="../../../../../../../../css/source.css"/><meta http-equiv="content-type" content="text/html; charset=utf-8"/></head><body><nav class="topnav"><ul><li><div class="logo"><span>/**</span>phpDox</div></li><li class="separator"><a href="../../../../../../../../index.xhtml">Overview</a></li><li class="separator"><a href="../../../../../../../../namespaces.xhtml">Namespaces</a></li><li><a href="../../../../../../../../interfaces.xhtml">Interfaces</a></li><li><a href="../../../../../../../../classes.xhtml">Classes</a></li><li><a href="../../../../../../../../traits.xhtml">Traits</a></li><li class="separator"><a href="../../../../../../../../source/index.xhtml">Source</a></li></ul></nav><div id="mainstage"><div class="box"><ul class="breadcrumb"><li><a href="../../../../../../../../index.xhtml">Overview</a></li><li class="separator"><a href="../../../../../../../../source/index.xhtml">Source</a></li></ul></div><h1>Source of file RequestOptions.php</h1><p>
                        Size: 10,568 Bytes - Last Modified: 2022-03-20T14:16:28+00:00</p><section><h2><small>//var/www/html/vendor/guzzlehttp/guzzle/src/</small>RequestOptions.php</h2><table class="source"><tr><td class="no"><a class="anker" href="#line1">1</a><a class="anker" href="#line2">2</a><a class="anker" href="#line3">3</a><a class="anker" href="#line4">4</a><a class="anker" href="#line5">5</a><a class="anker" href="#line6">6</a><a class="anker" href="#line7">7</a><a class="anker" href="#line8">8</a><a class="anker" href="#line9">9</a><a class="anker" href="#line10">10</a><a class="anker" href="#line11">11</a><a class="anker" href="#line12">12</a><a class="anker" href="#line13">13</a><a class="anker" href="#line14">14</a><a class="anker" href="#line15">15</a><a class="anker" href="#line16">16</a><a class="anker" href="#line17">17</a><a class="anker" href="#line18">18</a><a class="anker" href="#line19">19</a><a class="anker" href="#line20">20</a><a class="anker" href="#line21">21</a><a class="anker" href="#line22">22</a><a class="anker" href="#line23">23</a><a class="anker" href="#line24">24</a><a class="anker" href="#line25">25</a><a class="anker" href="#line26">26</a><a class="anker" href="#line27">27</a><a class="anker" href="#line28">28</a><a class="anker" href="#line29">29</a><a class="anker" href="#line30">30</a><a class="anker" href="#line31">31</a><a class="anker" href="#line32">32</a><a class="anker" href="#line33">33</a><a class="anker" href="#line34">34</a><a class="anker" href="#line35">35</a><a class="anker" href="#line36">36</a><a class="anker" href="#line37">37</a><a class="anker" href="#line38">38</a><a class="anker" href="#line39">39</a><a class="anker" href="#line40">40</a><a class="anker" href="#line41">41</a><a class="anker" href="#line42">42</a><a class="anker" href="#line43">43</a><a class="anker" href="#line44">44</a><a class="anker" href="#line45">45</a><a class="anker" href="#line46">46</a><a class="anker" href="#line47">47</a><a class="anker" href="#line48">48</a><a class="anker" href="#line49">49</a><a class="anker" href="#line50">50</a><a class="anker" href="#line51">51</a><a class="anker" href="#line52">52</a><a class="anker" href="#line53">53</a><a class="anker" href="#line54">54</a><a class="anker" href="#line55">55</a><a class="anker" href="#line56">56</a><a class="anker" href="#line57">57</a><a class="anker" href="#line58">58</a><a class="anker" href="#line59">59</a><a class="anker" href="#line60">60</a><a class="anker" href="#line61">61</a><a class="anker" href="#line62">62</a><a class="anker" href="#line63">63</a><a class="anker" href="#line64">64</a><a class="anker" href="#line65">65</a><a class="anker" href="#line66">66</a><a class="anker" href="#line67">67</a><a class="anker" href="#line68">68</a><a class="anker" href="#line69">69</a><a class="anker" href="#line70">70</a><a class="anker" href="#line71">71</a><a class="anker" href="#line72">72</a><a class="anker" href="#line73">73</a><a class="anker" href="#line74">74</a><a class="anker" href="#line75">75</a><a class="anker" href="#line76">76</a><a class="anker" href="#line77">77</a><a class="anker" href="#line78">78</a><a class="anker" href="#line79">79</a><a class="anker" href="#line80">80</a><a class="anker" href="#line81">81</a><a class="anker" href="#line82">82</a><a class="anker" href="#line83">83</a><a class="anker" href="#line84">84</a><a class="anker" href="#line85">85</a><a class="anker" href="#line86">86</a><a class="anker" href="#line87">87</a><a class="anker" href="#line88">88</a><a class="anker" href="#line89">89</a><a class="anker" href="#line90">90</a><a class="anker" href="#line91">91</a><a class="anker" href="#line92">92</a><a class="anker" href="#line93">93</a><a class="anker" href="#line94">94</a><a class="anker" href="#line95">95</a><a class="anker" href="#line96">96</a><a class="anker" href="#line97">97</a><a class="anker" href="#line98">98</a><a class="anker" href="#line99">99</a><a class="anker" href="#line100">100</a><a class="anker" href="#line101">101</a><a class="anker" href="#line102">102</a><a class="anker" href="#line103">103</a><a class="anker" href="#line104">104</a><a class="anker" href="#line105">105</a><a class="anker" href="#line106">106</a><a class="anker" href="#line107">107</a><a class="anker" href="#line108">108</a><a class="anker" href="#line109">109</a><a class="anker" href="#line110">110</a><a class="anker" href="#line111">111</a><a class="anker" href="#line112">112</a><a class="anker" href="#line113">113</a><a class="anker" href="#line114">114</a><a class="anker" href="#line115">115</a><a class="anker" href="#line116">116</a><a class="anker" href="#line117">117</a><a class="anker" href="#line118">118</a><a class="anker" href="#line119">119</a><a class="anker" href="#line120">120</a><a class="anker" href="#line121">121</a><a class="anker" href="#line122">122</a><a class="anker" href="#line123">123</a><a class="anker" href="#line124">124</a><a class="anker" href="#line125">125</a><a class="anker" href="#line126">126</a><a class="anker" href="#line127">127</a><a class="anker" href="#line128">128</a><a class="anker" href="#line129">129</a><a class="anker" href="#line130">130</a><a class="anker" href="#line131">131</a><a class="anker" href="#line132">132</a><a class="anker" href="#line133">133</a><a class="anker" href="#line134">134</a><a class="anker" href="#line135">135</a><a class="anker" href="#line136">136</a><a class="anker" href="#line137">137</a><a class="anker" href="#line138">138</a><a class="anker" href="#line139">139</a><a class="anker" href="#line140">140</a><a class="anker" href="#line141">141</a><a class="anker" href="#line142">142</a><a class="anker" href="#line143">143</a><a class="anker" href="#line144">144</a><a class="anker" href="#line145">145</a><a class="anker" href="#line146">146</a><a class="anker" href="#line147">147</a><a class="anker" href="#line148">148</a><a class="anker" href="#line149">149</a><a class="anker" href="#line150">150</a><a class="anker" href="#line151">151</a><a class="anker" href="#line152">152</a><a class="anker" href="#line153">153</a><a class="anker" href="#line154">154</a><a class="anker" href="#line155">155</a><a class="anker" href="#line156">156</a><a class="anker" href="#line157">157</a><a class="anker" href="#line158">158</a><a class="anker" href="#line159">159</a><a class="anker" href="#line160">160</a><a class="anker" href="#line161">161</a><a class="anker" href="#line162">162</a><a class="anker" href="#line163">163</a><a class="anker" href="#line164">164</a><a class="anker" href="#line165">165</a><a class="anker" href="#line166">166</a><a class="anker" href="#line167">167</a><a class="anker" href="#line168">168</a><a class="anker" href="#line169">169</a><a class="anker" href="#line170">170</a><a class="anker" href="#line171">171</a><a class="anker" href="#line172">172</a><a class="anker" href="#line173">173</a><a class="anker" href="#line174">174</a><a class="anker" href="#line175">175</a><a class="anker" href="#line176">176</a><a class="anker" href="#line177">177</a><a class="anker" href="#line178">178</a><a class="anker" href="#line179">179</a><a class="anker" href="#line180">180</a><a class="anker" href="#line181">181</a><a class="anker" href="#line182">182</a><a class="anker" href="#line183">183</a><a class="anker" href="#line184">184</a><a class="anker" href="#line185">185</a><a class="anker" href="#line186">186</a><a class="anker" href="#line187">187</a><a class="anker" href="#line188">188</a><a class="anker" href="#line189">189</a><a class="anker" href="#line190">190</a><a class="anker" href="#line191">191</a><a class="anker" href="#line192">192</a><a class="anker" href="#line193">193</a><a class="anker" href="#line194">194</a><a class="anker" href="#line195">195</a><a class="anker" href="#line196">196</a><a class="anker" href="#line197">197</a><a class="anker" href="#line198">198</a><a class="anker" href="#line199">199</a><a class="anker" href="#line200">200</a><a class="anker" href="#line201">201</a><a class="anker" href="#line202">202</a><a class="anker" href="#line203">203</a><a class="anker" href="#line204">204</a><a class="anker" href="#line205">205</a><a class="anker" href="#line206">206</a><a class="anker" href="#line207">207</a><a class="anker" href="#line208">208</a><a class="anker" href="#line209">209</a><a class="anker" href="#line210">210</a><a class="anker" href="#line211">211</a><a class="anker" href="#line212">212</a><a class="anker" href="#line213">213</a><a class="anker" href="#line214">214</a><a class="anker" href="#line215">215</a><a class="anker" href="#line216">216</a><a class="anker" href="#line217">217</a><a class="anker" href="#line218">218</a><a class="anker" href="#line219">219</a><a class="anker" href="#line220">220</a><a class="anker" href="#line221">221</a><a class="anker" href="#line222">222</a><a class="anker" href="#line223">223</a><a class="anker" href="#line224">224</a><a class="anker" href="#line225">225</a><a class="anker" href="#line226">226</a><a class="anker" href="#line227">227</a><a class="anker" href="#line228">228</a><a class="anker" href="#line229">229</a><a class="anker" href="#line230">230</a><a class="anker" href="#line231">231</a><a class="anker" href="#line232">232</a><a class="anker" href="#line233">233</a><a class="anker" href="#line234">234</a><a class="anker" href="#line235">235</a><a class="anker" href="#line236">236</a><a class="anker" href="#line237">237</a><a class="anker" href="#line238">238</a><a class="anker" href="#line239">239</a><a class="anker" href="#line240">240</a><a class="anker" href="#line241">241</a><a class="anker" href="#line242">242</a><a class="anker" href="#line243">243</a><a class="anker" href="#line244">244</a><a class="anker" href="#line245">245</a><a class="anker" href="#line246">246</a><a class="anker" href="#line247">247</a><a class="anker" href="#line248">248</a><a class="anker" href="#line249">249</a><a class="anker" href="#line250">250</a><a class="anker" href="#line251">251</a><a class="anker" href="#line252">252</a><a class="anker" href="#line253">253</a><a class="anker" href="#line254">254</a><a class="anker" href="#line255">255</a><a class="anker" href="#line256">256</a><a class="anker" href="#line257">257</a><a class="anker" href="#line258">258</a><a class="anker" href="#line259">259</a><a class="anker" href="#line260">260</a><a class="anker" href="#line261">261</a><a class="anker" href="#line262">262</a><a class="anker" href="#line263">263</a><a class="anker" href="#line264">264</a><a class="anker" href="#line265">265</a></td><td class="line"><div id="line1"><pre><span class="token T_OPEN_TAG">&lt;?php</span></pre></div><div id="line2"><br/></div><div id="line3"><pre><span class="token T_NAMESPACE">namespace</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">GuzzleHttp</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line4"><br/></div><div id="line5"><pre><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line6"><pre><span class="token T_DOC_COMMENT"> * This class contains a list of built-in Guzzle request options.</span></pre></div><div id="line7"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line8"><pre><span class="token T_DOC_COMMENT"> * More documentation for each option can be found at http://guzzlephp.org/.</span></pre></div><div id="line9"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line10"><pre><span class="token T_DOC_COMMENT"> * @link http://docs.guzzlephp.org/en/v6/request-options.html</span></pre></div><div id="line11"><pre><span class="token T_DOC_COMMENT"> */</span></pre></div><div id="line12"><pre><span class="token T_FINAL">final</span><span class="token T_WHITESPACE"> </span><span class="token T_CLASS">class</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">RequestOptions</span></pre></div><div id="line13"><pre><span class="token T_PHPDOX_OPEN_CURLY">{</span></pre></div><div id="line14"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line15"><pre><span class="token T_DOC_COMMENT">     * allow_redirects: (bool|array) Controls redirect behavior. Pass false</span></pre></div><div id="line16"><pre><span class="token T_DOC_COMMENT">     * to disable redirects, pass true to enable redirects, pass an</span></pre></div><div id="line17"><pre><span class="token T_DOC_COMMENT">     * associative to provide custom redirect settings. Defaults to "false".</span></pre></div><div id="line18"><pre><span class="token T_DOC_COMMENT">     * This option only works if your handler has the RedirectMiddleware. When</span></pre></div><div id="line19"><pre><span class="token T_DOC_COMMENT">     * passing an associative array, you can provide the following key value</span></pre></div><div id="line20"><pre><span class="token T_DOC_COMMENT">     * pairs:</span></pre></div><div id="line21"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line22"><pre><span class="token T_DOC_COMMENT">     * - max: (int, default=5) maximum number of allowed redirects.</span></pre></div><div id="line23"><pre><span class="token T_DOC_COMMENT">     * - strict: (bool, default=false) Set to true to use strict redirects</span></pre></div><div id="line24"><pre><span class="token T_DOC_COMMENT">     *   meaning redirect POST requests with POST requests vs. doing what most</span></pre></div><div id="line25"><pre><span class="token T_DOC_COMMENT">     *   browsers do which is redirect POST requests with GET requests</span></pre></div><div id="line26"><pre><span class="token T_DOC_COMMENT">     * - referer: (bool, default=false) Set to true to enable the Referer</span></pre></div><div id="line27"><pre><span class="token T_DOC_COMMENT">     *   header.</span></pre></div><div id="line28"><pre><span class="token T_DOC_COMMENT">     * - protocols: (array, default=['http', 'https']) Allowed redirect</span></pre></div><div id="line29"><pre><span class="token T_DOC_COMMENT">     *   protocols.</span></pre></div><div id="line30"><pre><span class="token T_DOC_COMMENT">     * - on_redirect: (callable) PHP callable that is invoked when a redirect</span></pre></div><div id="line31"><pre><span class="token T_DOC_COMMENT">     *   is encountered. The callable is invoked with the request, the redirect</span></pre></div><div id="line32"><pre><span class="token T_DOC_COMMENT">     *   response that was received, and the effective URI. Any return value</span></pre></div><div id="line33"><pre><span class="token T_DOC_COMMENT">     *   from the on_redirect function is ignored.</span></pre></div><div id="line34"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line35"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">ALLOW_REDIRECTS</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'allow_redirects'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line36"><br/></div><div id="line37"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line38"><pre><span class="token T_DOC_COMMENT">     * auth: (array) Pass an array of HTTP authentication parameters to use</span></pre></div><div id="line39"><pre><span class="token T_DOC_COMMENT">     * with the request. The array must contain the username in index [0],</span></pre></div><div id="line40"><pre><span class="token T_DOC_COMMENT">     * the password in index [1], and you can optionally provide a built-in</span></pre></div><div id="line41"><pre><span class="token T_DOC_COMMENT">     * authentication type in index [2]. Pass null to disable authentication</span></pre></div><div id="line42"><pre><span class="token T_DOC_COMMENT">     * for a request.</span></pre></div><div id="line43"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line44"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">AUTH</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'auth'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line45"><br/></div><div id="line46"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line47"><pre><span class="token T_DOC_COMMENT">     * body: (resource|string|null|int|float|StreamInterface|callable|\Iterator)</span></pre></div><div id="line48"><pre><span class="token T_DOC_COMMENT">     * Body to send in the request.</span></pre></div><div id="line49"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line50"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">BODY</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'body'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line51"><br/></div><div id="line52"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line53"><pre><span class="token T_DOC_COMMENT">     * cert: (string|array) Set to a string to specify the path to a file</span></pre></div><div id="line54"><pre><span class="token T_DOC_COMMENT">     * containing a PEM formatted SSL client side certificate. If a password</span></pre></div><div id="line55"><pre><span class="token T_DOC_COMMENT">     * is required, then set cert to an array containing the path to the PEM</span></pre></div><div id="line56"><pre><span class="token T_DOC_COMMENT">     * file in the first array element followed by the certificate password</span></pre></div><div id="line57"><pre><span class="token T_DOC_COMMENT">     * in the second array element.</span></pre></div><div id="line58"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line59"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">CERT</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'cert'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line60"><br/></div><div id="line61"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line62"><pre><span class="token T_DOC_COMMENT">     * cookies: (bool|GuzzleHttp\Cookie\CookieJarInterface, default=false)</span></pre></div><div id="line63"><pre><span class="token T_DOC_COMMENT">     * Specifies whether or not cookies are used in a request or what cookie</span></pre></div><div id="line64"><pre><span class="token T_DOC_COMMENT">     * jar to use or what cookies to send. This option only works if your</span></pre></div><div id="line65"><pre><span class="token T_DOC_COMMENT">     * handler has the `cookie` middleware. Valid values are `false` and</span></pre></div><div id="line66"><pre><span class="token T_DOC_COMMENT">     * an instance of {@see \GuzzleHttp\Cookie\CookieJarInterface}.</span></pre></div><div id="line67"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line68"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">COOKIES</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'cookies'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line69"><br/></div><div id="line70"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line71"><pre><span class="token T_DOC_COMMENT">     * connect_timeout: (float, default=0) Float describing the number of</span></pre></div><div id="line72"><pre><span class="token T_DOC_COMMENT">     * seconds to wait while trying to connect to a server. Use 0 to wait</span></pre></div><div id="line73"><pre><span class="token T_DOC_COMMENT">     * indefinitely (the default behavior).</span></pre></div><div id="line74"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line75"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">CONNECT_TIMEOUT</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'connect_timeout'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line76"><br/></div><div id="line77"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line78"><pre><span class="token T_DOC_COMMENT">     * debug: (bool|resource) Set to true or set to a PHP stream returned by</span></pre></div><div id="line79"><pre><span class="token T_DOC_COMMENT">     * fopen()  enable debug output with the HTTP handler used to send a</span></pre></div><div id="line80"><pre><span class="token T_DOC_COMMENT">     * request.</span></pre></div><div id="line81"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line82"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">DEBUG</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'debug'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line83"><br/></div><div id="line84"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line85"><pre><span class="token T_DOC_COMMENT">     * decode_content: (bool, default=true) Specify whether or not</span></pre></div><div id="line86"><pre><span class="token T_DOC_COMMENT">     * Content-Encoding responses (gzip, deflate, etc.) are automatically</span></pre></div><div id="line87"><pre><span class="token T_DOC_COMMENT">     * decoded.</span></pre></div><div id="line88"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line89"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">DECODE_CONTENT</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'decode_content'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line90"><br/></div><div id="line91"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line92"><pre><span class="token T_DOC_COMMENT">     * delay: (int) The amount of time to delay before sending in milliseconds.</span></pre></div><div id="line93"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line94"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">DELAY</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'delay'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line95"><br/></div><div id="line96"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line97"><pre><span class="token T_DOC_COMMENT">     * expect: (bool|integer) Controls the behavior of the</span></pre></div><div id="line98"><pre><span class="token T_DOC_COMMENT">     * "Expect: 100-Continue" header.</span></pre></div><div id="line99"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line100"><pre><span class="token T_DOC_COMMENT">     * Set to `true` to enable the "Expect: 100-Continue" header for all</span></pre></div><div id="line101"><pre><span class="token T_DOC_COMMENT">     * requests that sends a body. Set to `false` to disable the</span></pre></div><div id="line102"><pre><span class="token T_DOC_COMMENT">     * "Expect: 100-Continue" header for all requests. Set to a number so that</span></pre></div><div id="line103"><pre><span class="token T_DOC_COMMENT">     * the size of the payload must be greater than the number in order to send</span></pre></div><div id="line104"><pre><span class="token T_DOC_COMMENT">     * the Expect header. Setting to a number will send the Expect header for</span></pre></div><div id="line105"><pre><span class="token T_DOC_COMMENT">     * all requests in which the size of the payload cannot be determined or</span></pre></div><div id="line106"><pre><span class="token T_DOC_COMMENT">     * where the body is not rewindable.</span></pre></div><div id="line107"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line108"><pre><span class="token T_DOC_COMMENT">     * By default, Guzzle will add the "Expect: 100-Continue" header when the</span></pre></div><div id="line109"><pre><span class="token T_DOC_COMMENT">     * size of the body of a request is greater than 1 MB and a request is</span></pre></div><div id="line110"><pre><span class="token T_DOC_COMMENT">     * using HTTP/1.1.</span></pre></div><div id="line111"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line112"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">EXPECT</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'expect'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line113"><br/></div><div id="line114"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line115"><pre><span class="token T_DOC_COMMENT">     * form_params: (array) Associative array of form field names to values</span></pre></div><div id="line116"><pre><span class="token T_DOC_COMMENT">     * where each value is a string or array of strings. Sets the Content-Type</span></pre></div><div id="line117"><pre><span class="token T_DOC_COMMENT">     * header to application/x-www-form-urlencoded when no Content-Type header</span></pre></div><div id="line118"><pre><span class="token T_DOC_COMMENT">     * is already present.</span></pre></div><div id="line119"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line120"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">FORM_PARAMS</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'form_params'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line121"><br/></div><div id="line122"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line123"><pre><span class="token T_DOC_COMMENT">     * headers: (array) Associative array of HTTP headers. Each value MUST be</span></pre></div><div id="line124"><pre><span class="token T_DOC_COMMENT">     * a string or array of strings.</span></pre></div><div id="line125"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line126"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">HEADERS</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'headers'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line127"><br/></div><div id="line128"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line129"><pre><span class="token T_DOC_COMMENT">     * http_errors: (bool, default=true) Set to false to disable exceptions</span></pre></div><div id="line130"><pre><span class="token T_DOC_COMMENT">     * when a non- successful HTTP response is received. By default,</span></pre></div><div id="line131"><pre><span class="token T_DOC_COMMENT">     * exceptions will be thrown for 4xx and 5xx responses. This option only</span></pre></div><div id="line132"><pre><span class="token T_DOC_COMMENT">     * works if your handler has the `httpErrors` middleware.</span></pre></div><div id="line133"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line134"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">HTTP_ERRORS</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'http_errors'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line135"><br/></div><div id="line136"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line137"><pre><span class="token T_DOC_COMMENT">     * idn: (bool|int, default=true) A combination of IDNA_* constants for</span></pre></div><div id="line138"><pre><span class="token T_DOC_COMMENT">     * idn_to_ascii() PHP's function (see "options" parameter). Set to false to</span></pre></div><div id="line139"><pre><span class="token T_DOC_COMMENT">     * disable IDN support completely, or to true to use the default</span></pre></div><div id="line140"><pre><span class="token T_DOC_COMMENT">     * configuration (IDNA_DEFAULT constant).</span></pre></div><div id="line141"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line142"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">IDN_CONVERSION</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'idn_conversion'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line143"><br/></div><div id="line144"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line145"><pre><span class="token T_DOC_COMMENT">     * json: (mixed) Adds JSON data to a request. The provided value is JSON</span></pre></div><div id="line146"><pre><span class="token T_DOC_COMMENT">     * encoded and a Content-Type header of application/json will be added to</span></pre></div><div id="line147"><pre><span class="token T_DOC_COMMENT">     * the request if no Content-Type header is already present.</span></pre></div><div id="line148"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line149"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">JSON</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'json'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line150"><br/></div><div id="line151"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line152"><pre><span class="token T_DOC_COMMENT">     * multipart: (array) Array of associative arrays, each containing a</span></pre></div><div id="line153"><pre><span class="token T_DOC_COMMENT">     * required "name" key mapping to the form field, name, a required</span></pre></div><div id="line154"><pre><span class="token T_DOC_COMMENT">     * "contents" key mapping to a StreamInterface|resource|string, an</span></pre></div><div id="line155"><pre><span class="token T_DOC_COMMENT">     * optional "headers" associative array of custom headers, and an</span></pre></div><div id="line156"><pre><span class="token T_DOC_COMMENT">     * optional "filename" key mapping to a string to send as the filename in</span></pre></div><div id="line157"><pre><span class="token T_DOC_COMMENT">     * the part. If no "filename" key is present, then no "filename" attribute</span></pre></div><div id="line158"><pre><span class="token T_DOC_COMMENT">     * will be added to the part.</span></pre></div><div id="line159"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line160"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">MULTIPART</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'multipart'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line161"><br/></div><div id="line162"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line163"><pre><span class="token T_DOC_COMMENT">     * on_headers: (callable) A callable that is invoked when the HTTP headers</span></pre></div><div id="line164"><pre><span class="token T_DOC_COMMENT">     * of the response have been received but the body has not yet begun to</span></pre></div><div id="line165"><pre><span class="token T_DOC_COMMENT">     * download.</span></pre></div><div id="line166"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line167"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">ON_HEADERS</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'on_headers'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line168"><br/></div><div id="line169"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line170"><pre><span class="token T_DOC_COMMENT">     * on_stats: (callable) allows you to get access to transfer statistics of</span></pre></div><div id="line171"><pre><span class="token T_DOC_COMMENT">     * a request and access the lower level transfer details of the handler</span></pre></div><div id="line172"><pre><span class="token T_DOC_COMMENT">     * associated with your client. ``on_stats`` is a callable that is invoked</span></pre></div><div id="line173"><pre><span class="token T_DOC_COMMENT">     * when a handler has finished sending a request. The callback is invoked</span></pre></div><div id="line174"><pre><span class="token T_DOC_COMMENT">     * with transfer statistics about the request, the response received, or</span></pre></div><div id="line175"><pre><span class="token T_DOC_COMMENT">     * the error encountered. Included in the data is the total amount of time</span></pre></div><div id="line176"><pre><span class="token T_DOC_COMMENT">     * taken to send the request.</span></pre></div><div id="line177"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line178"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">ON_STATS</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'on_stats'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line179"><br/></div><div id="line180"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line181"><pre><span class="token T_DOC_COMMENT">     * progress: (callable) Defines a function to invoke when transfer</span></pre></div><div id="line182"><pre><span class="token T_DOC_COMMENT">     * progress is made. The function accepts the following positional</span></pre></div><div id="line183"><pre><span class="token T_DOC_COMMENT">     * arguments: the total number of bytes expected to be downloaded, the</span></pre></div><div id="line184"><pre><span class="token T_DOC_COMMENT">     * number of bytes downloaded so far, the number of bytes expected to be</span></pre></div><div id="line185"><pre><span class="token T_DOC_COMMENT">     * uploaded, the number of bytes uploaded so far.</span></pre></div><div id="line186"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line187"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">PROGRESS</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'progress'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line188"><br/></div><div id="line189"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line190"><pre><span class="token T_DOC_COMMENT">     * proxy: (string|array) Pass a string to specify an HTTP proxy, or an</span></pre></div><div id="line191"><pre><span class="token T_DOC_COMMENT">     * array to specify different proxies for different protocols (where the</span></pre></div><div id="line192"><pre><span class="token T_DOC_COMMENT">     * key is the protocol and the value is a proxy string).</span></pre></div><div id="line193"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line194"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">PROXY</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'proxy'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line195"><br/></div><div id="line196"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line197"><pre><span class="token T_DOC_COMMENT">     * query: (array|string) Associative array of query string values to add</span></pre></div><div id="line198"><pre><span class="token T_DOC_COMMENT">     * to the request. This option uses PHP's http_build_query() to create</span></pre></div><div id="line199"><pre><span class="token T_DOC_COMMENT">     * the string representation. Pass a string value if you need more</span></pre></div><div id="line200"><pre><span class="token T_DOC_COMMENT">     * control than what this method provides</span></pre></div><div id="line201"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line202"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">QUERY</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'query'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line203"><br/></div><div id="line204"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line205"><pre><span class="token T_DOC_COMMENT">     * sink: (resource|string|StreamInterface) Where the data of the</span></pre></div><div id="line206"><pre><span class="token T_DOC_COMMENT">     * response is written to. Defaults to a PHP temp stream. Providing a</span></pre></div><div id="line207"><pre><span class="token T_DOC_COMMENT">     * string will write data to a file by the given name.</span></pre></div><div id="line208"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line209"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">SINK</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'sink'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line210"><br/></div><div id="line211"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line212"><pre><span class="token T_DOC_COMMENT">     * synchronous: (bool) Set to true to inform HTTP handlers that you intend</span></pre></div><div id="line213"><pre><span class="token T_DOC_COMMENT">     * on waiting on the response. This can be useful for optimizations. Note</span></pre></div><div id="line214"><pre><span class="token T_DOC_COMMENT">     * that a promise is still returned if you are using one of the async</span></pre></div><div id="line215"><pre><span class="token T_DOC_COMMENT">     * client methods.</span></pre></div><div id="line216"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line217"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">SYNCHRONOUS</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'synchronous'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line218"><br/></div><div id="line219"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line220"><pre><span class="token T_DOC_COMMENT">     * ssl_key: (array|string) Specify the path to a file containing a private</span></pre></div><div id="line221"><pre><span class="token T_DOC_COMMENT">     * SSL key in PEM format. If a password is required, then set to an array</span></pre></div><div id="line222"><pre><span class="token T_DOC_COMMENT">     * containing the path to the SSL key in the first array element followed</span></pre></div><div id="line223"><pre><span class="token T_DOC_COMMENT">     * by the password required for the certificate in the second element.</span></pre></div><div id="line224"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line225"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">SSL_KEY</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'ssl_key'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line226"><br/></div><div id="line227"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line228"><pre><span class="token T_DOC_COMMENT">     * stream: Set to true to attempt to stream a response rather than</span></pre></div><div id="line229"><pre><span class="token T_DOC_COMMENT">     * download it all up-front.</span></pre></div><div id="line230"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line231"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">STREAM</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'stream'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line232"><br/></div><div id="line233"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line234"><pre><span class="token T_DOC_COMMENT">     * verify: (bool|string, default=true) Describes the SSL certificate</span></pre></div><div id="line235"><pre><span class="token T_DOC_COMMENT">     * verification behavior of a request. Set to true to enable SSL</span></pre></div><div id="line236"><pre><span class="token T_DOC_COMMENT">     * certificate verification using the system CA bundle when available</span></pre></div><div id="line237"><pre><span class="token T_DOC_COMMENT">     * (the default). Set to false to disable certificate verification (this</span></pre></div><div id="line238"><pre><span class="token T_DOC_COMMENT">     * is insecure!). Set to a string to provide the path to a CA bundle on</span></pre></div><div id="line239"><pre><span class="token T_DOC_COMMENT">     * disk to enable verification using a custom certificate.</span></pre></div><div id="line240"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line241"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">VERIFY</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'verify'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line242"><br/></div><div id="line243"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line244"><pre><span class="token T_DOC_COMMENT">     * timeout: (float, default=0) Float describing the timeout of the</span></pre></div><div id="line245"><pre><span class="token T_DOC_COMMENT">     * request in seconds. Use 0 to wait indefinitely (the default behavior).</span></pre></div><div id="line246"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line247"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">TIMEOUT</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'timeout'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line248"><br/></div><div id="line249"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line250"><pre><span class="token T_DOC_COMMENT">     * read_timeout: (float, default=default_socket_timeout ini setting) Float describing</span></pre></div><div id="line251"><pre><span class="token T_DOC_COMMENT">     * the body read timeout, for stream requests.</span></pre></div><div id="line252"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line253"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">READ_TIMEOUT</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'read_timeout'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line254"><br/></div><div id="line255"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line256"><pre><span class="token T_DOC_COMMENT">     * version: (float) Specifies the HTTP protocol version to attempt to use.</span></pre></div><div id="line257"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line258"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">VERSION</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'version'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line259"><br/></div><div id="line260"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line261"><pre><span class="token T_DOC_COMMENT">     * force_ip_resolve: (bool) Force client to use only ipv4 or ipv6 protocol</span></pre></div><div id="line262"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line263"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">FORCE_IP_RESOLVE</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'force_ip_resolve'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line264"><pre><span class="token T_PHPDOX_CLOSE_CURLY">}</span></pre></div><div id="line265"><br/></div></td></tr></table></section></div><footer><span>Generated using phpDox 0.12.0 - Copyright (C) 2010 - 2022 by Arne Blankerts and Contributors</span></footer></body></html>
