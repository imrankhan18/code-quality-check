<?xml version="1.0"?>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>phpDox - Source of functions.php</title><link rel="stylesheet" type="text/css" href="../../../../../../../../css/style.css" media="screen"/><link rel="stylesheet" href="../../../../../../../../css/source.css"/><meta http-equiv="content-type" content="text/html; charset=utf-8"/></head><body><nav class="topnav"><ul><li><div class="logo"><span>/**</span>phpDox</div></li><li class="separator"><a href="../../../../../../../../index.xhtml">Overview</a></li><li class="separator"><a href="../../../../../../../../namespaces.xhtml">Namespaces</a></li><li><a href="../../../../../../../../interfaces.xhtml">Interfaces</a></li><li><a href="../../../../../../../../classes.xhtml">Classes</a></li><li><a href="../../../../../../../../traits.xhtml">Traits</a></li><li class="separator"><a href="../../../../../../../../source/index.xhtml">Source</a></li></ul></nav><div id="mainstage"><div class="box"><ul class="breadcrumb"><li><a href="../../../../../../../../index.xhtml">Overview</a></li><li class="separator"><a href="../../../../../../../../source/index.xhtml">Source</a></li></ul></div><h1>Source of file functions.php</h1><p>
                        Size: 5,690 Bytes - Last Modified: 2022-03-20T14:16:28+00:00</p><section><h2><small>//var/www/html/vendor/guzzlehttp/guzzle/src/</small>functions.php</h2><table class="source"><tr><td class="no"><a class="anker" href="#line1">1</a><a class="anker" href="#line2">2</a><a class="anker" href="#line3">3</a><a class="anker" href="#line4">4</a><a class="anker" href="#line5">5</a><a class="anker" href="#line6">6</a><a class="anker" href="#line7">7</a><a class="anker" href="#line8">8</a><a class="anker" href="#line9">9</a><a class="anker" href="#line10">10</a><a class="anker" href="#line11">11</a><a class="anker" href="#line12">12</a><a class="anker" href="#line13">13</a><a class="anker" href="#line14">14</a><a class="anker" href="#line15">15</a><a class="anker" href="#line16">16</a><a class="anker" href="#line17">17</a><a class="anker" href="#line18">18</a><a class="anker" href="#line19">19</a><a class="anker" href="#line20">20</a><a class="anker" href="#line21">21</a><a class="anker" href="#line22">22</a><a class="anker" href="#line23">23</a><a class="anker" href="#line24">24</a><a class="anker" href="#line25">25</a><a class="anker" href="#line26">26</a><a class="anker" href="#line27">27</a><a class="anker" href="#line28">28</a><a class="anker" href="#line29">29</a><a class="anker" href="#line30">30</a><a class="anker" href="#line31">31</a><a class="anker" href="#line32">32</a><a class="anker" href="#line33">33</a><a class="anker" href="#line34">34</a><a class="anker" href="#line35">35</a><a class="anker" href="#line36">36</a><a class="anker" href="#line37">37</a><a class="anker" href="#line38">38</a><a class="anker" href="#line39">39</a><a class="anker" href="#line40">40</a><a class="anker" href="#line41">41</a><a class="anker" href="#line42">42</a><a class="anker" href="#line43">43</a><a class="anker" href="#line44">44</a><a class="anker" href="#line45">45</a><a class="anker" href="#line46">46</a><a class="anker" href="#line47">47</a><a class="anker" href="#line48">48</a><a class="anker" href="#line49">49</a><a class="anker" href="#line50">50</a><a class="anker" href="#line51">51</a><a class="anker" href="#line52">52</a><a class="anker" href="#line53">53</a><a class="anker" href="#line54">54</a><a class="anker" href="#line55">55</a><a class="anker" href="#line56">56</a><a class="anker" href="#line57">57</a><a class="anker" href="#line58">58</a><a class="anker" href="#line59">59</a><a class="anker" href="#line60">60</a><a class="anker" href="#line61">61</a><a class="anker" href="#line62">62</a><a class="anker" href="#line63">63</a><a class="anker" href="#line64">64</a><a class="anker" href="#line65">65</a><a class="anker" href="#line66">66</a><a class="anker" href="#line67">67</a><a class="anker" href="#line68">68</a><a class="anker" href="#line69">69</a><a class="anker" href="#line70">70</a><a class="anker" href="#line71">71</a><a class="anker" href="#line72">72</a><a class="anker" href="#line73">73</a><a class="anker" href="#line74">74</a><a class="anker" href="#line75">75</a><a class="anker" href="#line76">76</a><a class="anker" href="#line77">77</a><a class="anker" href="#line78">78</a><a class="anker" href="#line79">79</a><a class="anker" href="#line80">80</a><a class="anker" href="#line81">81</a><a class="anker" href="#line82">82</a><a class="anker" href="#line83">83</a><a class="anker" href="#line84">84</a><a class="anker" href="#line85">85</a><a class="anker" href="#line86">86</a><a class="anker" href="#line87">87</a><a class="anker" href="#line88">88</a><a class="anker" href="#line89">89</a><a class="anker" href="#line90">90</a><a class="anker" href="#line91">91</a><a class="anker" href="#line92">92</a><a class="anker" href="#line93">93</a><a class="anker" href="#line94">94</a><a class="anker" href="#line95">95</a><a class="anker" href="#line96">96</a><a class="anker" href="#line97">97</a><a class="anker" href="#line98">98</a><a class="anker" href="#line99">99</a><a class="anker" href="#line100">100</a><a class="anker" href="#line101">101</a><a class="anker" href="#line102">102</a><a class="anker" href="#line103">103</a><a class="anker" href="#line104">104</a><a class="anker" href="#line105">105</a><a class="anker" href="#line106">106</a><a class="anker" href="#line107">107</a><a class="anker" href="#line108">108</a><a class="anker" href="#line109">109</a><a class="anker" href="#line110">110</a><a class="anker" href="#line111">111</a><a class="anker" href="#line112">112</a><a class="anker" href="#line113">113</a><a class="anker" href="#line114">114</a><a class="anker" href="#line115">115</a><a class="anker" href="#line116">116</a><a class="anker" href="#line117">117</a><a class="anker" href="#line118">118</a><a class="anker" href="#line119">119</a><a class="anker" href="#line120">120</a><a class="anker" href="#line121">121</a><a class="anker" href="#line122">122</a><a class="anker" href="#line123">123</a><a class="anker" href="#line124">124</a><a class="anker" href="#line125">125</a><a class="anker" href="#line126">126</a><a class="anker" href="#line127">127</a><a class="anker" href="#line128">128</a><a class="anker" href="#line129">129</a><a class="anker" href="#line130">130</a><a class="anker" href="#line131">131</a><a class="anker" href="#line132">132</a><a class="anker" href="#line133">133</a><a class="anker" href="#line134">134</a><a class="anker" href="#line135">135</a><a class="anker" href="#line136">136</a><a class="anker" href="#line137">137</a><a class="anker" href="#line138">138</a><a class="anker" href="#line139">139</a><a class="anker" href="#line140">140</a><a class="anker" href="#line141">141</a><a class="anker" href="#line142">142</a><a class="anker" href="#line143">143</a><a class="anker" href="#line144">144</a><a class="anker" href="#line145">145</a><a class="anker" href="#line146">146</a><a class="anker" href="#line147">147</a><a class="anker" href="#line148">148</a><a class="anker" href="#line149">149</a><a class="anker" href="#line150">150</a><a class="anker" href="#line151">151</a><a class="anker" href="#line152">152</a><a class="anker" href="#line153">153</a><a class="anker" href="#line154">154</a><a class="anker" href="#line155">155</a><a class="anker" href="#line156">156</a><a class="anker" href="#line157">157</a><a class="anker" href="#line158">158</a><a class="anker" href="#line159">159</a><a class="anker" href="#line160">160</a><a class="anker" href="#line161">161</a><a class="anker" href="#line162">162</a><a class="anker" href="#line163">163</a><a class="anker" href="#line164">164</a><a class="anker" href="#line165">165</a><a class="anker" href="#line166">166</a><a class="anker" href="#line167">167</a><a class="anker" href="#line168">168</a></td><td class="line"><div id="line1"><pre><span class="token T_OPEN_TAG">&lt;?php</span></pre></div><div id="line2"><br/></div><div id="line3"><pre><span class="token T_NAMESPACE">namespace</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">GuzzleHttp</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line4"><br/></div><div id="line5"><pre><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line6"><pre><span class="token T_DOC_COMMENT"> * Debug function used to describe the provided value type and class.</span></pre></div><div id="line7"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line8"><pre><span class="token T_DOC_COMMENT"> * @param mixed $input Any type of variable to describe the type of. This</span></pre></div><div id="line9"><pre><span class="token T_DOC_COMMENT"> *                     parameter misses a typehint because of that.</span></pre></div><div id="line10"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line11"><pre><span class="token T_DOC_COMMENT"> * @return string Returns a string containing the type of the variable and</span></pre></div><div id="line12"><pre><span class="token T_DOC_COMMENT"> *                if a class is provided, the class name.</span></pre></div><div id="line13"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line14"><pre><span class="token T_DOC_COMMENT"> * @deprecated describe_type will be removed in guzzlehttp/guzzle:8.0. Use Utils::describeType instead.</span></pre></div><div id="line15"><pre><span class="token T_DOC_COMMENT"> */</span></pre></div><div id="line16"><pre><span class="token T_FUNCTION">function</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">describe_type</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_VARIABLE">$input</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_COLON">:</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">string</span></pre></div><div id="line17"><pre><span class="token T_PHPDOX_OPEN_CURLY">{</span></pre></div><div id="line18"><pre><span class="token T_WHITESPACE">    </span><span class="token T_RETURN">return</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">Utils</span><span class="token T_DOUBLE_COLON">::</span><span class="token T_STRING">describeType</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_VARIABLE">$input</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line19"><pre><span class="token T_PHPDOX_CLOSE_CURLY">}</span></pre></div><div id="line20"><br/></div><div id="line21"><pre><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line22"><pre><span class="token T_DOC_COMMENT"> * Parses an array of header lines into an associative array of headers.</span></pre></div><div id="line23"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line24"><pre><span class="token T_DOC_COMMENT"> * @param iterable $lines Header lines array of strings in the following</span></pre></div><div id="line25"><pre><span class="token T_DOC_COMMENT"> *                        format: "Name: Value"</span></pre></div><div id="line26"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line27"><pre><span class="token T_DOC_COMMENT"> * @deprecated headers_from_lines will be removed in guzzlehttp/guzzle:8.0. Use Utils::headersFromLines instead.</span></pre></div><div id="line28"><pre><span class="token T_DOC_COMMENT"> */</span></pre></div><div id="line29"><pre><span class="token T_FUNCTION">function</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">headers_from_lines</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_STRING">iterable</span><span class="token T_WHITESPACE"> </span><span class="token T_VARIABLE">$lines</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_COLON">:</span><span class="token T_WHITESPACE"> </span><span class="token T_ARRAY">array</span></pre></div><div id="line30"><pre><span class="token T_PHPDOX_OPEN_CURLY">{</span></pre></div><div id="line31"><pre><span class="token T_WHITESPACE">    </span><span class="token T_RETURN">return</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">Utils</span><span class="token T_DOUBLE_COLON">::</span><span class="token T_STRING">headersFromLines</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_VARIABLE">$lines</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line32"><pre><span class="token T_PHPDOX_CLOSE_CURLY">}</span></pre></div><div id="line33"><br/></div><div id="line34"><pre><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line35"><pre><span class="token T_DOC_COMMENT"> * Returns a debug stream based on the provided variable.</span></pre></div><div id="line36"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line37"><pre><span class="token T_DOC_COMMENT"> * @param mixed $value Optional value</span></pre></div><div id="line38"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line39"><pre><span class="token T_DOC_COMMENT"> * @return resource</span></pre></div><div id="line40"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line41"><pre><span class="token T_DOC_COMMENT"> * @deprecated debug_resource will be removed in guzzlehttp/guzzle:8.0. Use Utils::debugResource instead.</span></pre></div><div id="line42"><pre><span class="token T_DOC_COMMENT"> */</span></pre></div><div id="line43"><pre><span class="token T_FUNCTION">function</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">debug_resource</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_VARIABLE">$value</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">null</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span></pre></div><div id="line44"><pre><span class="token T_PHPDOX_OPEN_CURLY">{</span></pre></div><div id="line45"><pre><span class="token T_WHITESPACE">    </span><span class="token T_RETURN">return</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">Utils</span><span class="token T_DOUBLE_COLON">::</span><span class="token T_STRING">debugResource</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_VARIABLE">$value</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line46"><pre><span class="token T_PHPDOX_CLOSE_CURLY">}</span></pre></div><div id="line47"><br/></div><div id="line48"><pre><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line49"><pre><span class="token T_DOC_COMMENT"> * Chooses and creates a default handler to use based on the environment.</span></pre></div><div id="line50"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line51"><pre><span class="token T_DOC_COMMENT"> * The returned handler is not wrapped by any default middlewares.</span></pre></div><div id="line52"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line53"><pre><span class="token T_DOC_COMMENT"> * @throws \RuntimeException if no viable Handler is available.</span></pre></div><div id="line54"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line55"><pre><span class="token T_DOC_COMMENT"> * @return callable(\Psr\Http\Message\RequestInterface, array): \GuzzleHttp\Promise\PromiseInterface Returns the best handler for the given system.</span></pre></div><div id="line56"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line57"><pre><span class="token T_DOC_COMMENT"> * @deprecated choose_handler will be removed in guzzlehttp/guzzle:8.0. Use Utils::chooseHandler instead.</span></pre></div><div id="line58"><pre><span class="token T_DOC_COMMENT"> */</span></pre></div><div id="line59"><pre><span class="token T_FUNCTION">function</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">choose_handler</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_COLON">:</span><span class="token T_WHITESPACE"> </span><span class="token T_CALLABLE">callable</span></pre></div><div id="line60"><pre><span class="token T_PHPDOX_OPEN_CURLY">{</span></pre></div><div id="line61"><pre><span class="token T_WHITESPACE">    </span><span class="token T_RETURN">return</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">Utils</span><span class="token T_DOUBLE_COLON">::</span><span class="token T_STRING">chooseHandler</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line62"><pre><span class="token T_PHPDOX_CLOSE_CURLY">}</span></pre></div><div id="line63"><br/></div><div id="line64"><pre><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line65"><pre><span class="token T_DOC_COMMENT"> * Get the default User-Agent string to use with Guzzle.</span></pre></div><div id="line66"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line67"><pre><span class="token T_DOC_COMMENT"> * @deprecated default_user_agent will be removed in guzzlehttp/guzzle:8.0. Use Utils::defaultUserAgent instead.</span></pre></div><div id="line68"><pre><span class="token T_DOC_COMMENT"> */</span></pre></div><div id="line69"><pre><span class="token T_FUNCTION">function</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">default_user_agent</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_COLON">:</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">string</span></pre></div><div id="line70"><pre><span class="token T_PHPDOX_OPEN_CURLY">{</span></pre></div><div id="line71"><pre><span class="token T_WHITESPACE">    </span><span class="token T_RETURN">return</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">Utils</span><span class="token T_DOUBLE_COLON">::</span><span class="token T_STRING">defaultUserAgent</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line72"><pre><span class="token T_PHPDOX_CLOSE_CURLY">}</span></pre></div><div id="line73"><br/></div><div id="line74"><pre><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line75"><pre><span class="token T_DOC_COMMENT"> * Returns the default cacert bundle for the current system.</span></pre></div><div id="line76"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line77"><pre><span class="token T_DOC_COMMENT"> * First, the openssl.cafile and curl.cainfo php.ini settings are checked.</span></pre></div><div id="line78"><pre><span class="token T_DOC_COMMENT"> * If those settings are not configured, then the common locations for</span></pre></div><div id="line79"><pre><span class="token T_DOC_COMMENT"> * bundles found on Red Hat, CentOS, Fedora, Ubuntu, Debian, FreeBSD, OS X</span></pre></div><div id="line80"><pre><span class="token T_DOC_COMMENT"> * and Windows are checked. If any of these file locations are found on</span></pre></div><div id="line81"><pre><span class="token T_DOC_COMMENT"> * disk, they will be utilized.</span></pre></div><div id="line82"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line83"><pre><span class="token T_DOC_COMMENT"> * Note: the result of this function is cached for subsequent calls.</span></pre></div><div id="line84"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line85"><pre><span class="token T_DOC_COMMENT"> * @throws \RuntimeException if no bundle can be found.</span></pre></div><div id="line86"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line87"><pre><span class="token T_DOC_COMMENT"> * @deprecated default_ca_bundle will be removed in guzzlehttp/guzzle:8.0. This function is not needed in PHP 5.6+.</span></pre></div><div id="line88"><pre><span class="token T_DOC_COMMENT"> */</span></pre></div><div id="line89"><pre><span class="token T_FUNCTION">function</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">default_ca_bundle</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_COLON">:</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">string</span></pre></div><div id="line90"><pre><span class="token T_PHPDOX_OPEN_CURLY">{</span></pre></div><div id="line91"><pre><span class="token T_WHITESPACE">    </span><span class="token T_RETURN">return</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">Utils</span><span class="token T_DOUBLE_COLON">::</span><span class="token T_STRING">defaultCaBundle</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line92"><pre><span class="token T_PHPDOX_CLOSE_CURLY">}</span></pre></div><div id="line93"><br/></div><div id="line94"><pre><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line95"><pre><span class="token T_DOC_COMMENT"> * Creates an associative array of lowercase header names to the actual</span></pre></div><div id="line96"><pre><span class="token T_DOC_COMMENT"> * header casing.</span></pre></div><div id="line97"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line98"><pre><span class="token T_DOC_COMMENT"> * @deprecated normalize_header_keys will be removed in guzzlehttp/guzzle:8.0. Use Utils::normalizeHeaderKeys instead.</span></pre></div><div id="line99"><pre><span class="token T_DOC_COMMENT"> */</span></pre></div><div id="line100"><pre><span class="token T_FUNCTION">function</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">normalize_header_keys</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_ARRAY">array</span><span class="token T_WHITESPACE"> </span><span class="token T_VARIABLE">$headers</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_COLON">:</span><span class="token T_WHITESPACE"> </span><span class="token T_ARRAY">array</span></pre></div><div id="line101"><pre><span class="token T_PHPDOX_OPEN_CURLY">{</span></pre></div><div id="line102"><pre><span class="token T_WHITESPACE">    </span><span class="token T_RETURN">return</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">Utils</span><span class="token T_DOUBLE_COLON">::</span><span class="token T_STRING">normalizeHeaderKeys</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_VARIABLE">$headers</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line103"><pre><span class="token T_PHPDOX_CLOSE_CURLY">}</span></pre></div><div id="line104"><br/></div><div id="line105"><pre><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line106"><pre><span class="token T_DOC_COMMENT"> * Returns true if the provided host matches any of the no proxy areas.</span></pre></div><div id="line107"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line108"><pre><span class="token T_DOC_COMMENT"> * This method will strip a port from the host if it is present. Each pattern</span></pre></div><div id="line109"><pre><span class="token T_DOC_COMMENT"> * can be matched with an exact match (e.g., "foo.com" == "foo.com") or a</span></pre></div><div id="line110"><pre><span class="token T_DOC_COMMENT"> * partial match: (e.g., "foo.com" == "baz.foo.com" and ".foo.com" ==</span></pre></div><div id="line111"><pre><span class="token T_DOC_COMMENT"> * "baz.foo.com", but ".foo.com" != "foo.com").</span></pre></div><div id="line112"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line113"><pre><span class="token T_DOC_COMMENT"> * Areas are matched in the following cases:</span></pre></div><div id="line114"><pre><span class="token T_DOC_COMMENT"> * 1. "*" (without quotes) always matches any hosts.</span></pre></div><div id="line115"><pre><span class="token T_DOC_COMMENT"> * 2. An exact match.</span></pre></div><div id="line116"><pre><span class="token T_DOC_COMMENT"> * 3. The area starts with "." and the area is the last part of the host. e.g.</span></pre></div><div id="line117"><pre><span class="token T_DOC_COMMENT"> *    '.mit.edu' will match any host that ends with '.mit.edu'.</span></pre></div><div id="line118"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line119"><pre><span class="token T_DOC_COMMENT"> * @param string   $host         Host to check against the patterns.</span></pre></div><div id="line120"><pre><span class="token T_DOC_COMMENT"> * @param string[] $noProxyArray An array of host patterns.</span></pre></div><div id="line121"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line122"><pre><span class="token T_DOC_COMMENT"> * @throws Exception\InvalidArgumentException</span></pre></div><div id="line123"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line124"><pre><span class="token T_DOC_COMMENT"> * @deprecated is_host_in_noproxy will be removed in guzzlehttp/guzzle:8.0. Use Utils::isHostInNoProxy instead.</span></pre></div><div id="line125"><pre><span class="token T_DOC_COMMENT"> */</span></pre></div><div id="line126"><pre><span class="token T_FUNCTION">function</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">is_host_in_noproxy</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_STRING">string</span><span class="token T_WHITESPACE"> </span><span class="token T_VARIABLE">$host</span><span class="token T_PHPDOX_COMMA">,</span><span class="token T_WHITESPACE"> </span><span class="token T_ARRAY">array</span><span class="token T_WHITESPACE"> </span><span class="token T_VARIABLE">$noProxyArray</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_COLON">:</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">bool</span></pre></div><div id="line127"><pre><span class="token T_PHPDOX_OPEN_CURLY">{</span></pre></div><div id="line128"><pre><span class="token T_WHITESPACE">    </span><span class="token T_RETURN">return</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">Utils</span><span class="token T_DOUBLE_COLON">::</span><span class="token T_STRING">isHostInNoProxy</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_VARIABLE">$host</span><span class="token T_PHPDOX_COMMA">,</span><span class="token T_WHITESPACE"> </span><span class="token T_VARIABLE">$noProxyArray</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line129"><pre><span class="token T_PHPDOX_CLOSE_CURLY">}</span></pre></div><div id="line130"><br/></div><div id="line131"><pre><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line132"><pre><span class="token T_DOC_COMMENT"> * Wrapper for json_decode that throws when an error occurs.</span></pre></div><div id="line133"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line134"><pre><span class="token T_DOC_COMMENT"> * @param string $json    JSON data to parse</span></pre></div><div id="line135"><pre><span class="token T_DOC_COMMENT"> * @param bool   $assoc   When true, returned objects will be converted</span></pre></div><div id="line136"><pre><span class="token T_DOC_COMMENT"> *                        into associative arrays.</span></pre></div><div id="line137"><pre><span class="token T_DOC_COMMENT"> * @param int    $depth   User specified recursion depth.</span></pre></div><div id="line138"><pre><span class="token T_DOC_COMMENT"> * @param int    $options Bitmask of JSON decode options.</span></pre></div><div id="line139"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line140"><pre><span class="token T_DOC_COMMENT"> * @return object|array|string|int|float|bool|null</span></pre></div><div id="line141"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line142"><pre><span class="token T_DOC_COMMENT"> * @throws Exception\InvalidArgumentException if the JSON cannot be decoded.</span></pre></div><div id="line143"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line144"><pre><span class="token T_DOC_COMMENT"> * @link https://www.php.net/manual/en/function.json-decode.php</span></pre></div><div id="line145"><pre><span class="token T_DOC_COMMENT"> * @deprecated json_decode will be removed in guzzlehttp/guzzle:8.0. Use Utils::jsonDecode instead.</span></pre></div><div id="line146"><pre><span class="token T_DOC_COMMENT"> */</span></pre></div><div id="line147"><pre><span class="token T_FUNCTION">function</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">json_decode</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_STRING">string</span><span class="token T_WHITESPACE"> </span><span class="token T_VARIABLE">$json</span><span class="token T_PHPDOX_COMMA">,</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">bool</span><span class="token T_WHITESPACE"> </span><span class="token T_VARIABLE">$assoc</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">false</span><span class="token T_PHPDOX_COMMA">,</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">int</span><span class="token T_WHITESPACE"> </span><span class="token T_VARIABLE">$depth</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_LNUMBER">512</span><span class="token T_PHPDOX_COMMA">,</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">int</span><span class="token T_WHITESPACE"> </span><span class="token T_VARIABLE">$options</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_LNUMBER">0</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span></pre></div><div id="line148"><pre><span class="token T_PHPDOX_OPEN_CURLY">{</span></pre></div><div id="line149"><pre><span class="token T_WHITESPACE">    </span><span class="token T_RETURN">return</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">Utils</span><span class="token T_DOUBLE_COLON">::</span><span class="token T_STRING">jsonDecode</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_VARIABLE">$json</span><span class="token T_PHPDOX_COMMA">,</span><span class="token T_WHITESPACE"> </span><span class="token T_VARIABLE">$assoc</span><span class="token T_PHPDOX_COMMA">,</span><span class="token T_WHITESPACE"> </span><span class="token T_VARIABLE">$depth</span><span class="token T_PHPDOX_COMMA">,</span><span class="token T_WHITESPACE"> </span><span class="token T_VARIABLE">$options</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line150"><pre><span class="token T_PHPDOX_CLOSE_CURLY">}</span></pre></div><div id="line151"><br/></div><div id="line152"><pre><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line153"><pre><span class="token T_DOC_COMMENT"> * Wrapper for JSON encoding that throws when an error occurs.</span></pre></div><div id="line154"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line155"><pre><span class="token T_DOC_COMMENT"> * @param mixed $value   The value being encoded</span></pre></div><div id="line156"><pre><span class="token T_DOC_COMMENT"> * @param int   $options JSON encode option bitmask</span></pre></div><div id="line157"><pre><span class="token T_DOC_COMMENT"> * @param int   $depth   Set the maximum depth. Must be greater than zero.</span></pre></div><div id="line158"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line159"><pre><span class="token T_DOC_COMMENT"> * @throws Exception\InvalidArgumentException if the JSON cannot be encoded.</span></pre></div><div id="line160"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line161"><pre><span class="token T_DOC_COMMENT"> * @link https://www.php.net/manual/en/function.json-encode.php</span></pre></div><div id="line162"><pre><span class="token T_DOC_COMMENT"> * @deprecated json_encode will be removed in guzzlehttp/guzzle:8.0. Use Utils::jsonEncode instead.</span></pre></div><div id="line163"><pre><span class="token T_DOC_COMMENT"> */</span></pre></div><div id="line164"><pre><span class="token T_FUNCTION">function</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">json_encode</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_VARIABLE">$value</span><span class="token T_PHPDOX_COMMA">,</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">int</span><span class="token T_WHITESPACE"> </span><span class="token T_VARIABLE">$options</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_LNUMBER">0</span><span class="token T_PHPDOX_COMMA">,</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">int</span><span class="token T_WHITESPACE"> </span><span class="token T_VARIABLE">$depth</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_LNUMBER">512</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_COLON">:</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">string</span></pre></div><div id="line165"><pre><span class="token T_PHPDOX_OPEN_CURLY">{</span></pre></div><div id="line166"><pre><span class="token T_WHITESPACE">    </span><span class="token T_RETURN">return</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">Utils</span><span class="token T_DOUBLE_COLON">::</span><span class="token T_STRING">jsonEncode</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_VARIABLE">$value</span><span class="token T_PHPDOX_COMMA">,</span><span class="token T_WHITESPACE"> </span><span class="token T_VARIABLE">$options</span><span class="token T_PHPDOX_COMMA">,</span><span class="token T_WHITESPACE"> </span><span class="token T_VARIABLE">$depth</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line167"><pre><span class="token T_PHPDOX_CLOSE_CURLY">}</span></pre></div><div id="line168"><br/></div></td></tr></table></section></div><footer><span>Generated using phpDox 0.12.0 - Copyright (C) 2010 - 2022 by Arne Blankerts and Contributors</span></footer></body></html>
