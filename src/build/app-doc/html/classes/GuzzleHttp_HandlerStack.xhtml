<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
  <head>
    <title>phpDox - GuzzleHttp\HandlerStack</title>
    <link rel="stylesheet" type="text/css" href="../css/style.css" media="screen"/>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
  </head>
  <body>
    <nav class="topnav">
      <ul>
        <li>
          <div class="logo"><span>/**</span>phpDox</div>
        </li>
        <li class="separator">
          <a href="../index.xhtml">Overview</a>
        </li>
        <li class="separator">
          <a href="../namespaces.xhtml">Namespaces</a>
        </li>
        <li>
          <a href="../interfaces.xhtml">Interfaces</a>
        </li>
        <li>
          <a href="../classes.xhtml">Classes</a>
        </li>
        <li>
          <a href="../traits.xhtml">Traits</a>
        </li>
        <li class="separator">
          <a href="../source/index.xhtml">Source</a>
        </li>
      </ul>
    </nav>
    <div id="mainstage">
      <div class="box">
        <ul class="breadcrumb">
          <li>
            <a href="../index.xhtml">Overview</a>
          </li>
          <li class="separator">
            <a href="../classes.xhtml">Classes</a>
          </li>
          <li class="separator">
            <a href="../classes.xhtml#GuzzleHttp">GuzzleHttp</a>
          </li>
          <li class="separator">HandlerStack</li>
        </ul>
      </div>
      <nav class="box">
        <ul>
          <li>
            <a href="#introduction">Introduction</a>
          </li>
          <li>
            <a href="#synopsis">Synopsis</a>
          </li>
          <li>
            <a href="#members">Members</a>
          </li>
          <li>
            <a href="#methods">Methods</a>
          </li>
          <li>
            <a href="../source/ar/www/html/vendor/guzzlehttp/guzzle/src/HandlerStack.php.xhtml#line15">Source</a>
          </li>
        </ul>
      </nav>
      <section>
        <h1 id="introduction"><small>GuzzleHttp\</small>HandlerStack</h1>
        <h4>Creates a composed Guzzle handler function by stacking middlewares on top of an HTTP handler function.</h4>
        <p/>
        <ul/>
        <h2 id="synopsis">Synopsis</h2>
        <div class="synopsis">class HandlerStack
            {<br/><ul class="none"><li>// members</li><li>private <span title="GuzzleHttp\(callable(RequestInterface">(callable(RequestInterface</span> <a href="#members">$handler</a>;
                    </li><li>private <span title="GuzzleHttp\array{(callable(callable(RequestInterface">array{(callable(callable(RequestInterface</span> <a href="#members">$stack</a> =
                        ;
                    </li><li>private <span title="GuzzleHttp\(callable(RequestInterface">(callable(RequestInterface</span> <a href="#members">$cached</a>;
                    </li></ul><ul class="none"><li>// methods</li><li>public static <span title="HandlerStack">HandlerStack</span> <a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/create.xhtml">create</a>()
                    </li><li>public void <a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/__construct.xhtml">__construct</a>()
                    </li><li>public ResponseInterface|PromiseInterface <a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/__invoke.xhtml">__invoke</a>()
                    </li><li>public string <a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/__toString.xhtml">__toString</a>()
                    </li><li>public void <a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/setHandler.xhtml">setHandler</a>()
                    </li><li>public bool <a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/hasHandler.xhtml">hasHandler</a>()
                    </li><li>public void <a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/unshift.xhtml">unshift</a>()
                    </li><li>public void <a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/push.xhtml">push</a>()
                    </li><li>public void <a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/before.xhtml">before</a>()
                    </li><li>public void <a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/after.xhtml">after</a>()
                    </li><li>public void <a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/remove.xhtml">remove</a>()
                    </li><li>public callable <a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/resolve.xhtml">resolve</a>()
                    </li><li>private int <a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/findByName.xhtml">findByName</a>()
                    </li><li>private void <a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/splice.xhtml">splice</a>()
                    </li><li>private string <a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/debugCallable.xhtml">debugCallable</a>()
                    </li></ul>

            }<br/></div>
        <h2 id="members">Members</h2>
        <div class="styled members">
          <h4>private</h4>
          <ul class="members">
            <li id="cached"><strong>$cached</strong>
                —
                <a title="GuzzleHttp\(callable(RequestInterface" href="../classes/GuzzleHttp_(callable(RequestInterface.xhtml">GuzzleHttp\(callable(RequestInterface</a></li>
            <li id="handler"><strong>$handler</strong>
                —
                <a title="GuzzleHttp\(callable(RequestInterface" href="../classes/GuzzleHttp_(callable(RequestInterface.xhtml">GuzzleHttp\(callable(RequestInterface</a></li>
            <li id="stack"><strong>$stack</strong>
                —
                <a title="GuzzleHttp\array{(callable(callable(RequestInterface" href="../classes/GuzzleHttp_array{(callable(callable(RequestInterface.xhtml">GuzzleHttp\array{(callable(callable(RequestInterface</a></li>
          </ul>
        </div>
        <h2 id="methods">Methods</h2>
        <div class="styled">
          <h4>private</h4>
          <ul>
            <li id="debugCallable"><a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/debugCallable.xhtml">debugCallable()</a>
                — Provides a debug string for a given callable.</li>
            <li id="findByName">
              <a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/findByName.xhtml">findByName()</a>
            </li>
            <li id="splice"><a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/splice.xhtml">splice()</a>
                — Splices a function into the middleware list at a specific position.</li>
          </ul>
          <h4>public</h4>
          <ul>
            <li id="__construct">
              <a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/__construct.xhtml">__construct()</a>
            </li>
            <li id="__invoke"><a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/__invoke.xhtml">__invoke()</a>
                — Invokes the handler stack as a composed handler</li>
            <li id="__toString"><a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/__toString.xhtml">__toString()</a>
                — Dumps a string representation of the stack.</li>
            <li id="after"><a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/after.xhtml">after()</a>
                — Add a middleware after another middleware by name.</li>
            <li id="before"><a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/before.xhtml">before()</a>
                — Add a middleware before another middleware by name.</li>
            <li id="create"><a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/create.xhtml">create()</a>
                — Creates a default handler stack that can be used by clients.</li>
            <li id="hasHandler"><a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/hasHandler.xhtml">hasHandler()</a>
                — Returns true if the builder has a handler.</li>
            <li id="push"><a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/push.xhtml">push()</a>
                — Push a middleware to the top of the stack.</li>
            <li id="remove"><a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/remove.xhtml">remove()</a>
                — Remove a middleware by instance or name from the stack.</li>
            <li id="resolve"><a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/resolve.xhtml">resolve()</a>
                — Compose the middleware and handler into a single callable function.</li>
            <li id="setHandler"><a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/setHandler.xhtml">setHandler()</a>
                — Set the HTTP handler that actually returns a promise.</li>
            <li id="unshift"><a title="GuzzleHttp\HandlerStack" href="../classes/GuzzleHttp_HandlerStack/unshift.xhtml">unshift()</a>
                — Unshift a middleware to the bottom of the stack.</li>
          </ul>
        </div>
      </section>
    </div>
    <footer>
      <span>Generated using phpDox 0.12.0 - Copyright (C) 2010 - 2022 by Arne Blankerts and Contributors</span>
    </footer>
  </body>
</html>
