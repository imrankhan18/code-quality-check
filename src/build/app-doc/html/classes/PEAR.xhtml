<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
  <head>
    <title>phpDox - PEAR</title>
    <link rel="stylesheet" type="text/css" href="../css/style.css" media="screen"/>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
  </head>
  <body>
    <nav class="topnav">
      <ul>
        <li>
          <div class="logo"><span>/**</span>phpDox</div>
        </li>
        <li class="separator">
          <a href="../index.xhtml">Overview</a>
        </li>
        <li class="separator">
          <a href="../namespaces.xhtml">Namespaces</a>
        </li>
        <li>
          <a href="../interfaces.xhtml">Interfaces</a>
        </li>
        <li>
          <a href="../classes.xhtml">Classes</a>
        </li>
        <li>
          <a href="../traits.xhtml">Traits</a>
        </li>
        <li class="separator">
          <a href="../source/index.xhtml">Source</a>
        </li>
      </ul>
    </nav>
    <div id="mainstage">
      <div class="box">
        <ul class="breadcrumb">
          <li>
            <a href="../index.xhtml">Overview</a>
          </li>
          <li class="separator">
            <a href="../classes.xhtml">Classes</a>
          </li>
          <li class="separator">PEAR</li>
        </ul>
      </div>
      <nav class="box">
        <ul>
          <li>
            <a href="#introduction">Introduction</a>
          </li>
          <li>
            <a href="#synopsis">Synopsis</a>
          </li>
          <li>
            <a href="#members">Members</a>
          </li>
          <li>
            <a href="#methods">Methods</a>
          </li>
          <li>
            <a href="../source/sr/local/lib/php/PEAR.php.xhtml#line84">Source</a>
          </li>
        </ul>
      </nav>
      <section>
        <h1 id="introduction"><small>\</small>PEAR</h1>
        <h4>Base class for other PEAR classes.  Provides rudimentary emulation of destructors.</h4>
        <p>If you want a destructor in your class, inherit PEAR and make a<br/>destructor method called _yourclassname (same name as the<br/>constructor, but with a "_" prefix). Also, in your constructor you<br/>have to call the PEAR constructor: $this-&gt;PEAR();.<br/>The destructor method will be called without parameters. Note that<br/>at in some SAPI implementations (such as Apache), any output during<br/>the request shutdown (in which destructors are called) seems to be<br/>discarded. If you need to get any debug information from your<br/>destructor, use error_log(), syslog() or something similar.<br/><br/>IMPORTANT! To use the emulated destructors you need to create the<br/>objects by reference: $obj =&amp; new PEAR_child;</p>
        <ul>
          <li>Author: Stig Bakken &lt;ssb@php.net&gt;</li>
          <li>Copyright: 1997-2006 The PHP Group</li>
          <li>License: http://opensource.org/licenses/bsd-license.php New BSD License</li>
        </ul>
        <h2 id="synopsis">Synopsis</h2>
        <div class="synopsis">class PEAR
            {<br/><ul class="none"><li>// members</li><li>public <span title="bool">bool</span> <a href="#members">$_debug</a> =
                        false;
                    </li><li>public  <a href="#members">$_default_error_mode</a> =
                        NULL;
                    </li><li>public  <a href="#members">$_default_error_options</a> =
                        NULL;
                    </li><li>public string <a href="#members">$_default_error_handler</a> =
                        '';
                    </li><li>public string <a href="#members">$_error_class</a> =
                        'PEAR_Error';
                    </li><li>public array <a href="#members">$_expected_errors</a> =
                        ;
                    </li><li>protected static array <a href="#members">$bivalentMethods</a> =
                        ;
                    </li></ul><ul class="none"><li>// methods</li><li>public void <a title="PEAR" href="../classes/PEAR/__construct.xhtml">__construct</a>()
                    </li><li>public void <a title="PEAR" href="../classes/PEAR/PEAR.xhtml">PEAR</a>()
                    </li><li>public void <a title="PEAR" href="../classes/PEAR/_PEAR.xhtml">_PEAR</a>()
                    </li><li>public void <a title="PEAR" href="../classes/PEAR/__call.xhtml">__call</a>()
                    </li><li>public static void <a title="PEAR" href="../classes/PEAR/__callStatic.xhtml">__callStatic</a>()
                    </li><li>public static mixed <a title="PEAR" href="../classes/PEAR/getStaticProperty.xhtml">getStaticProperty</a>()
                    </li><li>public static void <a title="PEAR" href="../classes/PEAR/registerShutdownFunc.xhtml">registerShutdownFunc</a>()
                    </li><li>public static bool <a title="PEAR" href="../classes/PEAR/isError.xhtml">isError</a>()
                    </li><li>protected static void <a title="PEAR" href="../classes/PEAR/_setErrorHandling.xhtml">_setErrorHandling</a>()
                    </li><li>public int <a title="PEAR" href="../classes/PEAR/expectError.xhtml">expectError</a>()
                    </li><li>public array <a title="PEAR" href="../classes/PEAR/popExpect.xhtml">popExpect</a>()
                    </li><li>public bool <a title="PEAR" href="../classes/PEAR/_checkDelExpect.xhtml">_checkDelExpect</a>()
                    </li><li>public mixed <a title="PEAR" href="../classes/PEAR/delExpect.xhtml">delExpect</a>()
                    </li><li>protected static  <a title="PEAR" href="../classes/PEAR/_raiseError.xhtml">_raiseError</a>()
                    </li><li>protected static  <a title="PEAR" href="../classes/PEAR/_throwError.xhtml">_throwError</a>()
                    </li><li>public static void <a title="PEAR" href="../classes/PEAR/staticPushErrorHandling.xhtml">staticPushErrorHandling</a>()
                    </li><li>public static void <a title="PEAR" href="../classes/PEAR/staticPopErrorHandling.xhtml">staticPopErrorHandling</a>()
                    </li><li>protected static bool <a title="PEAR" href="../classes/PEAR/_pushErrorHandling.xhtml">_pushErrorHandling</a>()
                    </li><li>protected static bool <a title="PEAR" href="../classes/PEAR/_popErrorHandling.xhtml">_popErrorHandling</a>()
                    </li><li>public static bool <a title="PEAR" href="../classes/PEAR/loadExtension.xhtml">loadExtension</a>()
                    </li><li>public static int <a title="PEAR" href="../classes/PEAR/getSourceDateEpoch.xhtml">getSourceDateEpoch</a>()
                    </li></ul>

            }<br/></div>
        <h2 id="members">Members</h2>
        <div class="styled members">
          <h4>protected</h4>
          <ul class="members">
            <li id="bivalentMethods"><strong>$bivalentMethods</strong>
                —
                array<br/><span class="indent">List of methods that can be called both statically and non-statically.</span></li>
          </ul>
          <h4>public</h4>
          <ul class="members">
            <li id="_debug"><strong>$_debug</strong>
                —
                <a title="bool" href="../classes/bool.xhtml">bool</a><br/><span class="indent">Whether to enable internal debug messages.</span></li>
            <li id="_default_error_handler"><strong>$_default_error_handler</strong>
                —
                string<br/><span class="indent">Default error handler (callback) for this object, if error mode is PEAR_ERROR_CALLBACK.</span></li>
            <li id="_default_error_mode"><strong>$_default_error_mode</strong>
                —
                int<br/><span class="indent">Default error mode for this object.</span></li>
            <li id="_default_error_options"><strong>$_default_error_options</strong>
                —
                int<br/><span class="indent">Default error options used for this object when error mode is PEAR_ERROR_TRIGGER.</span></li>
            <li id="_error_class"><strong>$_error_class</strong>
                —
                string<br/><span class="indent">Which class to use for error objects.</span></li>
            <li id="_expected_errors"><strong>$_expected_errors</strong>
                —
                array<br/><span class="indent">An array of expected errors.</span></li>
          </ul>
        </div>
        <h2 id="methods">Methods</h2>
        <div class="styled">
          <h4>protected</h4>
          <ul>
            <li id="_popErrorHandling"><a title="PEAR" href="../classes/PEAR/_popErrorHandling.xhtml">_popErrorHandling()</a>
                — Pop the last error handler used</li>
            <li id="_pushErrorHandling"><a title="PEAR" href="../classes/PEAR/_pushErrorHandling.xhtml">_pushErrorHandling()</a>
                — Push a new error handler on top of the error handler options stack. With this you can easily override the actual error handler for some code and restore it later with popErrorHandling.</li>
            <li id="_raiseError"><a title="PEAR" href="../classes/PEAR/_raiseError.xhtml">_raiseError()</a>
                — This method is a wrapper that returns an instance of the configured error class with this object's default error handling applied.  If the $mode and $options parameters are not specified, the object's defaults are used.</li>
            <li id="_setErrorHandling"><a title="PEAR" href="../classes/PEAR/_setErrorHandling.xhtml">_setErrorHandling()</a>
                — Sets how errors generated by this object should be handled.</li>
            <li id="_throwError"><a title="PEAR" href="../classes/PEAR/_throwError.xhtml">_throwError()</a>
                — Simpler form of raiseError with fewer options.  In most cases message, code and userinfo are enough.</li>
          </ul>
          <h4>public</h4>
          <ul>
            <li id="__construct"><a title="PEAR" href="../classes/PEAR/__construct.xhtml">__construct()</a>
                — Constructor.  Registers this object in $_PEAR_destructor_object_list for destructor emulation if a destructor object exists.</li>
            <li id="PEAR"><a title="PEAR" href="../classes/PEAR/PEAR.xhtml">PEAR()</a>
                — Only here for backwards compatibility.</li>
            <li id="_PEAR"><a title="PEAR" href="../classes/PEAR/_PEAR.xhtml">_PEAR()</a>
                — Destructor (the emulated type of...).  Does nothing right now, but is included for forward compatibility, so subclass destructors should always call it.</li>
            <li id="__call">
              <a title="PEAR" href="../classes/PEAR/__call.xhtml">__call()</a>
            </li>
            <li id="__callStatic">
              <a title="PEAR" href="../classes/PEAR/__callStatic.xhtml">__callStatic()</a>
            </li>
            <li id="_checkDelExpect"><a title="PEAR" href="../classes/PEAR/_checkDelExpect.xhtml">_checkDelExpect()</a>
                — This method checks unsets an error code if available</li>
            <li id="delExpect"><a title="PEAR" href="../classes/PEAR/delExpect.xhtml">delExpect()</a>
                — This method deletes all occurrences of the specified element from the expected error codes stack.</li>
            <li id="expectError"><a title="PEAR" href="../classes/PEAR/expectError.xhtml">expectError()</a>
                — This method is used to tell which errors you expect to get.</li>
            <li id="getSourceDateEpoch"><a title="PEAR" href="../classes/PEAR/getSourceDateEpoch.xhtml">getSourceDateEpoch()</a>
                — Get SOURCE_DATE_EPOCH environment variable See https://reproducible-builds.org/specs/source-date-epoch/</li>
            <li id="getStaticProperty"><a title="PEAR" href="../classes/PEAR/getStaticProperty.xhtml">getStaticProperty()</a>
                — If you have a class that's mostly/entirely static, and you need static properties, you can use this method to simulate them. Eg. in your method(s) do this: $myVar = &amp;PEAR::getStaticProperty('myclass', 'myVar'); You MUST use a reference, or they will not persist!</li>
            <li id="isError"><a title="PEAR" href="../classes/PEAR/isError.xhtml">isError()</a>
                — Tell whether a value is a PEAR error.</li>
            <li id="loadExtension"><a title="PEAR" href="../classes/PEAR/loadExtension.xhtml">loadExtension()</a>
                — OS independent PHP extension load. Remember to take care on the correct extension name for case sensitive OSes.</li>
            <li id="popExpect"><a title="PEAR" href="../classes/PEAR/popExpect.xhtml">popExpect()</a>
                — This method pops one element off the expected error codes stack.</li>
            <li id="registerShutdownFunc"><a title="PEAR" href="../classes/PEAR/registerShutdownFunc.xhtml">registerShutdownFunc()</a>
                — Use this function to register a shutdown method for static classes.</li>
            <li id="staticPopErrorHandling">
              <a title="PEAR" href="../classes/PEAR/staticPopErrorHandling.xhtml">staticPopErrorHandling()</a>
            </li>
            <li id="staticPushErrorHandling">
              <a title="PEAR" href="../classes/PEAR/staticPushErrorHandling.xhtml">staticPushErrorHandling()</a>
            </li>
          </ul>
        </div>
      </section>
    </div>
    <footer>
      <span>Generated using phpDox 0.12.0 - Copyright (C) 2010 - 2022 by Arne Blankerts and Contributors</span>
    </footer>
  </body>
</html>
