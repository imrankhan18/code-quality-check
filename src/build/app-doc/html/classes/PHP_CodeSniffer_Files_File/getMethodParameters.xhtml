<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
  <head>
    <title>phpDox - PHP_CodeSniffer\Files\File::getMethodParameters</title>
    <link rel="stylesheet" type="text/css" href="../../css/style.css" media="screen"/>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
  </head>
  <body>
    <nav class="topnav">
      <ul>
        <li>
          <div class="logo"><span>/**</span>phpDox</div>
        </li>
        <li class="separator">
          <a href="../../index.xhtml">Overview</a>
        </li>
        <li class="separator">
          <a href="../../namespaces.xhtml">Namespaces</a>
        </li>
        <li>
          <a href="../../interfaces.xhtml">Interfaces</a>
        </li>
        <li>
          <a href="../../classes.xhtml">Classes</a>
        </li>
        <li>
          <a href="../../traits.xhtml">Traits</a>
        </li>
        <li class="separator">
          <a href="../../source/index.xhtml">Source</a>
        </li>
      </ul>
    </nav>
    <div id="mainstage">
      <div class="box">
        <ul class="breadcrumb">
          <li>
            <a href="../../index.xhtml">Overview</a>
          </li>
          <li class="separator">
            <a href="../../classes.xhtml">Classes</a>
          </li>
          <li class="separator">
            <a href="../../classes.xhtml#PHP_CodeSniffer_Files">PHP_CodeSniffer\Files</a>
          </li>
          <li class="separator">
            <a title="PHP_CodeSniffer\Files\File" href="../../classes/PHP_CodeSniffer_Files_File.xhtml">File</a>
          </li>
          <li class="separator">getMethodParameters</li>
        </ul>
      </div>
      <nav class="box">
        <ul>
          <li>
            <a href="#introduction">Introduction</a>
          </li>
          <li>
            <a href="#synopsis">Synopsis</a>
          </li>
          <li>
            <a href="#parameter">Parameter</a>
          </li>
          <li>
            <a href="#return">Return</a>
          </li>
          <li>
            <a href="#throws">Throws</a>
          </li>
          <li>
            <a href="../../source/ar/www/html/vendor/squizlabs/php_codesniffer/src/Files/File.php.xhtml#line1322">Source</a>
          </li>
        </ul>
      </nav>
      <section>
        <h1><small>PHP_CodeSniffer\Files\File::</small>getMethodParameters</h1>
        <h4>Returns the method parameters for the specified function token.</h4>
        <p>Also supports passing in a USE token for a closure use group.

Each parameter is in the following format:

&lt;code&gt;
  0 =&gt; array(
        'name'                =&gt; '$var',  // The variable name.
        'token'               =&gt; integer, // The stack pointer to the variable name.
        'content'             =&gt; string,  // The full content of the variable definition.
        'has_attributes'      =&gt; boolean, // Does the parameter have one or more attributes attached ?
        'pass_by_reference'   =&gt; boolean, // Is the variable passed by reference?
        'reference_token'     =&gt; integer, // The stack pointer to the reference operator
                                          // or FALSE if the param is not passed by reference.
        'variable_length'     =&gt; boolean, // Is the param of variable length through use of `...` ?
        'variadic_token'      =&gt; integer, // The stack pointer to the ... operator
                                          // or FALSE if the param is not variable length.
        'type_hint'           =&gt; string,  // The type hint for the variable.
        'type_hint_token'     =&gt; integer, // The stack pointer to the start of the type hint
                                          // or FALSE if there is no type hint.
        'type_hint_end_token' =&gt; integer, // The stack pointer to the end of the type hint
                                          // or FALSE if there is no type hint.
        'nullable_type'       =&gt; boolean, // TRUE if the type is preceded by the nullability
                                          // operator.
        'comma_token'         =&gt; integer, // The stack pointer to the comma after the param
                                          // or FALSE if this is the last param.
       )
&lt;/code&gt;

Parameters with default values have additional array indexes of:
        'default'             =&gt; string,  // The full content of the default value.
        'default_token'       =&gt; integer, // The stack pointer to the start of the default value.
        'default_equal_token' =&gt; integer, // The stack pointer to the equals sign.

Parameters declared using PHP 8 constructor property promotion, have these additional array indexes:
        'property_visibility' =&gt; string,  // The property visibility as declared.
        'visibility_token'    =&gt; integer, // The stack pointer to the visibility modifier token.</p>
        <ul/>
        <h2 id="signature">Signature</h2>
        <div class="styled synopsis">
          <code>public function getMethodParameters(int
        $stackPtr )
            </code>
        </div>
        <h2 id="parameterlist">Parameters</h2>
        <dl class="styled">
          <dt><code>$stackPtr</code>
                —
                int</dt>
          <dd>The position in the stack of the function token<br/>to acquire the parameters for.</dd>
        </dl>
        <h2 id="return">Returns</h2>
        <dl class="styled">
          <dt>array</dt>
          <dd/>
        </dl>
        <h2 id="throws">Errors/Exceptions</h2>
        <dl class="styled">
          <dt>
            <code>
              <a title="\PHP_CodeSniffer\Exceptions\RuntimeException" href="../../classes/_PHP_CodeSniffer_Exceptions_RuntimeException.xhtml">RuntimeException</a>
            </code>
          </dt>
          <dd>If the specified $stackPtr is not of</dd>
        </dl>
      </section>
    </div>
    <footer>
      <span>Generated using phpDox 0.12.0 - Copyright (C) 2010 - 2022 by Arne Blankerts and Contributors</span>
    </footer>
  </body>
</html>
