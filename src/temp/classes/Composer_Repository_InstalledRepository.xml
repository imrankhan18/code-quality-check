<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Composer\Repository\InstalledRepository" namespace="Composer\Repository" name="InstalledRepository" abstract="false" final="false" start="33" end="277">
  <file path="//var/www/html/vendor/composer/composer/src/Composer/Repository" file="InstalledRepository.php" realpath="/var/www/html/vendor/composer/composer/src/Composer/Repository/InstalledRepository.php" size="13123" time="2022-04-13T14:43:00+00:00" unixtime="1649860980" sha1="1cd6665f6241715e385224127f790fff4636e4de" relative="ar/www/html/vendor/composer/composer/src/Composer/Repository/InstalledRepository.php"/>
  <docblock>
    <description compact="Installed repository is a composite of all installed repo types.">The main use case is tagging a repo as an "installed" repository, and offering a way to get providers/replacers easily.

Installed repos are LockArrayRepository, InstalledRepositoryInterface, RootPackageRepository and PlatformRepository</description>
    <author value="Jordi Boggiano &lt;j.boggiano@seld.be&gt;"/>
  </docblock>
  <extends full="Composer\Repository\CompositeRepository" namespace="Composer\Repository" name="CompositeRepository"/>
  <method name="findPackagesWithReplacersAndProviders" start="41" end="73" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="string" variable="$name"/>
      <param type="object" variable="$constraint">
        <type full="Composer\Repository\ConstraintInterface|string|null" namespace="Composer\Repository" name="ConstraintInterface|string|null"/>
      </param>
      <return type="array" of="object">
        <type full="Composer\Repository\BasePackage" namespace="Composer\Repository" name="BasePackage"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
    <parameter name="name" byreference="false" type="string"/>
    <parameter name="constraint" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="getDependents" start="90" end="250" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a list of links causing the requested needle packages to be installed, as an associative array with the dependent's name as key, and an array containing in order the PackageInterface and Link describing the relationship as values. If recursive lookup was requested a third value is returned containing an identically formed array up to the root package. That third value will be false in case a circular recursion was detected."/>
      <param description="The package name(s) to inspect." type="array" variable="$needle" of="object">
        <type full="Composer\Repository\string|string" namespace="Composer\Repository" name="string|string"/>
      </param>
      <param description="Optional constraint to filter by." type="object" variable="$constraint">
        <type full="Composer\Repository\ConstraintInterface|null" namespace="Composer\Repository" name="ConstraintInterface|null"/>
      </param>
      <param description="Whether to invert matches to discover reasons for the package *NOT* to be installed." type="object" variable="$invert">
        <type full="Composer\Repository\bool" namespace="Composer\Repository" name="bool"/>
      </param>
      <param description="Whether to recursively expand the requirement tree up to the root package." type="object" variable="$recurse">
        <type full="Composer\Repository\bool" namespace="Composer\Repository" name="bool"/>
      </param>
      <param description="Used internally when recurring" type="array" variable="$packagesFound" of="object">
        <type full="Composer\Repository\string" namespace="Composer\Repository" name="string"/>
      </param>
      <return description="An associative array of arrays as described above." type="array" of="object">
        <type full="Composer\Repository\array" namespace="Composer\Repository" name="array"/>
      </return>
      <phpstan value="-return array&lt;array{0: PackageInterface, 1: Link, 2: mixed[]|bool}&gt;"/>
    </docblock>
    <return type="array" nullable="false"/>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="constraint" byreference="false" nullable="true" type="object" default="NULL">
      <type full="Composer\Semver\Constraint\ConstraintInterface" namespace="Composer\Semver\Constraint" name="ConstraintInterface"/>
    </parameter>
    <parameter name="invert" byreference="false" type="boolean" default="false"/>
    <parameter name="recurse" byreference="false" type="boolean" default="true"/>
    <parameter name="packagesFound" byreference="false" type="array" default="NULL"/>
    <inline>
      <comment value="initialize the array with the needles before any recursion occurs" line="95"/>
      <comment value="locate root package for use below" line="100"/>
      <comment value="Loop over all currently installed packages." line="109"/>
    </inline>
  </method>
  <method name="getRepoName" start="252" end="257" abstract="false" final="false" static="false" visibility="public">
    <return type="string" nullable="false"/>
  </method>
  <method name="addRepository" start="262" end="276" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <inheritdoc/>
    </docblock>
    <return type="void" nullable="false"/>
    <parameter name="repository" byreference="false" type="object">
      <type full="Composer\Repository\RepositoryInterface" namespace="Composer\Repository" name="RepositoryInterface"/>
    </parameter>
  </method>
  <parent full="Composer\Repository\CompositeRepository" namespace="Composer\Repository" name="CompositeRepository">
    <implements full="Composer\Repository\RepositoryInterface" namespace="Composer\Repository" name="RepositoryInterface"/>
    <constructor name="__construct" start="35" end="41" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Constructor"/>
        <param type="array" variable="$repositories" of="object">
          <type full="Composer\Repository\RepositoryInterface" namespace="Composer\Repository" name="RepositoryInterface"/>
        </param>
      </docblock>
      <parameter name="repositories" byreference="false" type="array"/>
    </constructor>
    <method name="getRepoName" start="43" end="48" abstract="false" final="false" static="false" visibility="public">
      <return type="string" nullable="false"/>
    </method>
    <method name="getRepositories" start="55" end="58" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns all the wrapped repositories"/>
        <return type="array" of="object">
          <type full="Composer\Repository\RepositoryInterface" namespace="Composer\Repository" name="RepositoryInterface"/>
        </return>
      </docblock>
      <return type="array" nullable="false"/>
    </method>
    <method name="hasPackage" start="63" end="73" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <inheritdoc/>
      </docblock>
      <return type="bool" nullable="false"/>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
    </method>
    <method name="findPackage" start="78" end="89" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <inheritdoc/>
      </docblock>
      <return type="object" nullable="true">
        <type full="Composer\Package\BasePackage" namespace="Composer\Package" name="BasePackage"/>
      </return>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="constraint" byreference="false" type="{unknown}"/>
    </method>
    <method name="findPackages" start="94" end="103" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <inheritdoc/>
      </docblock>
      <return type="array" nullable="false"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="constraint" byreference="false" type="{unknown}" default="NULL"/>
    </method>
    <method name="loadPackages" start="108" end="123" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <inheritdoc/>
      </docblock>
      <return type="array" nullable="false"/>
      <parameter name="packageNameMap" byreference="false" type="array"/>
      <parameter name="acceptableStabilities" byreference="false" type="array"/>
      <parameter name="stabilityFlags" byreference="false" type="array"/>
      <parameter name="alreadyLoaded" byreference="false" type="array" default=""/>
    </method>
    <method name="search" start="128" end="137" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <inheritdoc/>
      </docblock>
      <return type="array" nullable="false"/>
      <parameter name="query" byreference="false" type="string"/>
      <parameter name="mode" byreference="false" type="integer" default="0"/>
      <parameter name="type" byreference="false" nullable="true" type="string" default="NULL"/>
    </method>
    <method name="getPackages" start="142" end="151" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <inheritdoc/>
      </docblock>
      <return type="array" nullable="false"/>
    </method>
    <method name="getProviders" start="156" end="165" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <inheritdoc/>
      </docblock>
      <return type="array" nullable="false"/>
      <parameter name="packageName" byreference="false" type="{unknown}"/>
    </method>
    <method name="removePackage" start="170" end="177" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return type="object">
          <type full="Composer\Repository\void" namespace="Composer\Repository" name="void"/>
        </return>
      </docblock>
      <return type="void" nullable="false"/>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
    </method>
    <method name="count" start="182" end="191" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <inheritdoc/>
      </docblock>
      <return type="int" nullable="false"/>
    </method>
    <method name="addRepository" start="199" end="208" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Add a repository."/>
        <param type="object" variable="$repository">
          <type full="Composer\Repository\RepositoryInterface" namespace="Composer\Repository" name="RepositoryInterface"/>
        </param>
        <return type="object">
          <type full="Composer\Repository\void" namespace="Composer\Repository" name="void"/>
        </return>
      </docblock>
      <return type="void" nullable="false"/>
      <parameter name="repository" byreference="false" type="object">
        <type full="Composer\Repository\RepositoryInterface" namespace="Composer\Repository" name="RepositoryInterface"/>
      </parameter>
    </method>
  </parent>
  <interface full="Composer\Repository\RepositoryInterface" namespace="Composer\Repository" name="RepositoryInterface">
    <extends full="Countable" namespace="" name="Countable"/>
    <constant type="{unknown}" name="SEARCH_FULLTEXT" value="0"/>
    <constant type="{unknown}" name="SEARCH_NAME" value="1"/>
    <constant type="{unknown}" name="SEARCH_VENDOR" value="2"/>
    <method name="hasPackage" start="39" end="39" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Checks if specified package registered (installed)."/>
        <param description="package instance" type="object" variable="$package">
          <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
        </param>
        <return type="object">
          <type full="Composer\Repository\bool" namespace="Composer\Repository" name="bool"/>
        </return>
      </docblock>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
    </method>
    <method name="findPackage" start="49" end="49" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Searches for the first match of a package by name and version."/>
        <param description="package name" type="string" variable="$name"/>
        <param description="package version or version constraint to match against" type="object" variable="$constraint">
          <type full="Composer\Repository\string|ConstraintInterface" namespace="Composer\Repository" name="string|ConstraintInterface"/>
        </param>
        <return type="object">
          <type full="Composer\Repository\BasePackage|null" namespace="Composer\Repository" name="BasePackage|null"/>
        </return>
      </docblock>
      <parameter name="name" byreference="false" type="string"/>
      <parameter name="constraint" byreference="false" type="{unknown}"/>
    </method>
    <method name="findPackages" start="59" end="59" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Searches for all packages matching a name and optionally a version."/>
        <param description="package name" type="string" variable="$name"/>
        <param description="package version or version constraint to match against" type="object" variable="$constraint">
          <type full="Composer\Repository\string|ConstraintInterface" namespace="Composer\Repository" name="string|ConstraintInterface"/>
        </param>
        <return type="array" of="object">
          <type full="Composer\Repository\BasePackage" namespace="Composer\Repository" name="BasePackage"/>
        </return>
      </docblock>
      <parameter name="name" byreference="false" type="string"/>
      <parameter name="constraint" byreference="false" type="{unknown}" default="NULL"/>
    </method>
    <method name="getPackages" start="66" end="66" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns list of registered packages."/>
        <return type="array" of="object">
          <type full="Composer\Repository\BasePackage" namespace="Composer\Repository" name="BasePackage"/>
        </return>
      </docblock>
    </method>
    <method name="loadPackages" start="84" end="84" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns list of registered packages with the supplied name">- The packages returned are the packages found which match the constraints, acceptable stability and stability flags provided
- The namesFound returned are names which should be considered as canonically found in this repository, that should not be looked up in any further lower priority repositories</description>
        <param description="package names pointing to constraints" type="array" variable="$packageNameMap" of="object">
          <type full="Composer\Repository\ConstraintInterface" namespace="Composer\Repository" name="ConstraintInterface"/>
        </param>
        <param description="BasePackage::STABILITY_*&gt; $acceptableStabilities array of stability =&gt; BasePackage::STABILITY_* value" type="object">
          <type full="Composer\Repository\array&lt;string" namespace="Composer\Repository" name="array&lt;string"/>
        </param>
        <param description="BasePackage::STABILITY_*&gt; $stabilityFlags        an array of package name =&gt; BasePackage::STABILITY_* value" type="object">
          <type full="Composer\Repository\array&lt;string" namespace="Composer\Repository" name="array&lt;string"/>
        </param>
        <param description="array&lt;string PackageInterface&gt;&gt; $alreadyLoaded         an array of package name =&gt; package version =&gt; package" type="object">
          <type full="Composer\Repository\array&lt;string" namespace="Composer\Repository" name="array&lt;string"/>
        </param>
        <return type="array"/>
        <phpstan value="-param  array&lt;string, ConstraintInterface|null&gt; $packageNameMap"/>
        <phpstan value="-return array{namesFound: array&lt;string&gt;, packages: array&lt;BasePackage&gt;}"/>
      </docblock>
      <parameter name="packageNameMap" byreference="false" type="array"/>
      <parameter name="acceptableStabilities" byreference="false" type="array"/>
      <parameter name="stabilityFlags" byreference="false" type="array"/>
      <parameter name="alreadyLoaded" byreference="false" type="array" default=""/>
    </method>
    <method name="search" start="96" end="96" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Searches the repository for packages containing the query"/>
        <param description="search query, for SEARCH_NAME and SEARCH_VENDOR regular expressions metacharacters are supported by implementations, and user input should be escaped through preg_quote by callers" type="string" variable="$query"/>
        <param description="a set of SEARCH_* constants to search on, implementations should do a best effort only, default is SEARCH_FULLTEXT" type="int" variable="$mode"/>
        <param description="The type of package to search for. Defaults to all types of packages" type="object" variable="$type">
          <type full="Composer\Repository\?string" namespace="Composer\Repository" name="?string"/>
        </param>
        <return description="an array of array('name' =&gt; '...', 'description' =&gt; '...'|null, 'abandoned' =&gt; 'string'|true|unset) For SEARCH_VENDOR the name will be in &quot;vendor&quot; form" type="array" of="object">
          <type full="Composer\Repository\array" namespace="Composer\Repository" name="array"/>
        </return>
        <phpstan value="-return list&lt;array{name: string, description: ?string, abandoned?: string|true, url?: string}&gt;"/>
      </docblock>
      <parameter name="query" byreference="false" type="string"/>
      <parameter name="mode" byreference="false" type="integer" default="0"/>
      <parameter name="type" byreference="false" nullable="true" type="string" default="NULL"/>
    </method>
    <method name="getProviders" start="108" end="108" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns a list of packages providing a given package name">Packages which have the same name as $packageName should not be returned, only those that have a "provide" on it.</description>
        <param description="package name which must be provided" type="string" variable="$packageName"/>
        <return description="an array with the provider name as key and value of array('name' =&gt; '...', 'description' =&gt; '...', 'type' =&gt; '...')" type="array" of="object">
          <type full="Composer\Repository\array" namespace="Composer\Repository" name="array"/>
        </return>
        <phpstan value="-return array&lt;string, array{name: string, description: string, type: string}&gt;"/>
      </docblock>
      <parameter name="packageName" byreference="false" type="string"/>
    </method>
    <method name="getRepoName" start="117" end="117" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns a name representing this repository to the user">This is best effort and definitely can not always be very precise</description>
        <return type="string"/>
      </docblock>
    </method>
  </interface>
</class>
