<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PHP_CodeSniffer\Standards\Squiz\Sniffs\PHP\CommentedOutCodeSniff" namespace="PHP_CodeSniffer\Standards\Squiz\Sniffs\PHP" name="CommentedOutCodeSniff" abstract="false" final="false" start="17" end="288">
  <file path="//var/www/html/vendor/squizlabs/php_codesniffer/src/Standards/Squiz/Sniffs/PHP" file="CommentedOutCodeSniff.php" realpath="/var/www/html/vendor/squizlabs/php_codesniffer/src/Standards/Squiz/Sniffs/PHP/CommentedOutCodeSniff.php" size="9618" time="2021-12-12T21:44:58+00:00" unixtime="1639345498" sha1="820bd8826d8a6f4b53b3c28b17a7d080abdcda4c" relative="ar/www/html/vendor/squizlabs/php_codesniffer/src/Standards/Squiz/Sniffs/PHP/CommentedOutCodeSniff.php"/>
  <implements full="PHP_CodeSniffer\Sniffs\Sniff" namespace="PHP_CodeSniffer\Sniffs" name="Sniff"/>
  <member name="supportedTokenizers" default="" type="array" visibility="public" static="false" line="25">
    <docblock>
      <description compact="A list of tokenizers this sniff supports."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="maxPercentage" default="35" type="integer" visibility="public" static="false" line="35">
    <docblock>
      <description compact="If a comment is more than $maxPercentage% code, a warning will be shown."/>
      <var type="integer"/>
    </docblock>
  </member>
  <method name="register" start="43" end="47" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns an array of tokens this test wants to listen for."/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="process" start="60" end="285" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Processes this test, when one of its tokens is encountered."/>
      <param description="The file being scanned." type="object" variable="$phpcsFile">
        <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
      </param>
      <param description="The position of the current token" type="int" variable="$stackPtr">in the stack passed in $tokens.</param>
      <return description="Integer stack pointer to skip forward or void to continue" type="object">normal file processing.<type full="PHP_CodeSniffer\Standards\Squiz\Sniffs\PHP\int|void" namespace="PHP_CodeSniffer\Standards\Squiz\Sniffs\PHP" name="int|void"/></return>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Ignore comments at the end of code blocks." line="64"/>
      <comment value="end for" line="150"/>
      <comment value="Ignore typical warning suppression annotations from other tools." line="152"/>
      <comment value="Quite a few comments use multiple dashes, equals signs etc" line="157"/>
      <comment value="to frame comments and licence headers." line="158"/>
      <comment value="Random numbers sitting inside the content can throw parse errors" line="161"/>
      <comment value="for invalid literals in PHP7+, so strip those." line="162"/>
      <comment value="Because we are not really parsing code, the tokenizer can throw all sorts" line="175"/>
      <comment value="of errors that don't mean anything, so ignore them." line="176"/>
      <comment value="We know what the first two and last two tokens should be" line="193"/>
      <comment xmlns="http://xml.phpdox.net/src" value="(because we put them there) so ignore this comment if those" line="194"/>
      <comment xmlns="http://xml.phpdox.net/src" value="tokens were not parsed correctly. It obviously means this is not" line="195"/>
      <comment xmlns="http://xml.phpdox.net/src" value="valid code." line="196"/>
      <comment value="First token is always the opening tag." line="200"/>
      <comment value="Last token is always the closing tag, unless something went wrong." line="208"/>
      <comment value="Second last token is always whitespace or a comment, depending" line="218"/>
      <comment value="on the code inside the comment." line="219"/>
      <comment value="Ignore comments with only two or less non-whitespace tokens." line="267"/>
      <comment value="Sample size too small for a reliably determination." line="268"/>
    </inline>
  </method>
  <interface full="PHP_CodeSniffer\Sniffs\Sniff" namespace="PHP_CodeSniffer\Sniffs" name="Sniff">
    <method name="register" start="40" end="40" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Registers the tokens that this sniff wants to listen for.">An example return value for a sniff that wants to listen for whitespace
and any comments would be:

&lt;code&gt;
   return array(
           T_WHITESPACE,
           T_DOC_COMMENT,
           T_COMMENT,
          );
&lt;/code&gt;</description>
        <return type="array" of="object">
          <type full="PHP_CodeSniffer\Sniffs\mixed" namespace="PHP_CodeSniffer\Sniffs" name="mixed"/>
        </return>
        <see value="Tokens.php"/>
      </docblock>
    </method>
    <method name="process" start="77" end="77" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Called when one of the token types that this sniff is listening for is found.">The stackPtr variable indicates where in the stack the token was found.
A sniff can acquire information this token, along with all the other
tokens within the stack by first acquiring the token stack:

&lt;code&gt;
   $tokens = $phpcsFile-&gt;getTokens();
   echo 'Encountered a '.$tokens[$stackPtr]['type'].' token';
   echo 'token information: ';
   print_r($tokens[$stackPtr]);
&lt;/code&gt;

If the sniff discovers an anomaly in the code, they can raise an error
by calling addError() on the \PHP_CodeSniffer\Files\File object, specifying an error
message and the position of the offending token:

&lt;code&gt;
   $phpcsFile-&gt;addError('Encountered an error', $stackPtr);
&lt;/code&gt;</description>
        <param description="The PHP_CodeSniffer file where the" type="object" variable="$phpcsFile">token was found.<type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/></param>
        <param description="The position in the PHP_CodeSniffer" type="int" variable="$stackPtr">file's token stack where the token
                                              was found.</param>
        <return description="Optionally returns a stack pointer. The sniff will not be" type="object">called again on the current file until the returned stack
                 pointer is reached. Return (count($tokens) + 1) to skip
                 the rest of the file.<type full="PHP_CodeSniffer\Sniffs\void|int" namespace="PHP_CodeSniffer\Sniffs" name="void|int"/></return>
      </docblock>
      <parameter name="phpcsFile" byreference="false" type="object">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </parameter>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    </method>
  </interface>
</class>
