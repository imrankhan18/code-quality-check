<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Symfony\Component\Cache\Psr16Cache" namespace="Symfony\Component\Cache" name="Psr16Cache" abstract="false" final="false" start="31" end="289">
  <file path="//var/www/html/vendor/symfony/cache" file="Psr16Cache.php" realpath="/var/www/html/vendor/symfony/cache/Psr16Cache.php" size="8699" time="2022-04-26T13:19:20+00:00" unixtime="1650979160" sha1="59be3cc7131614378327d1e1e73634b25d5ccf68" relative="ar/www/html/vendor/symfony/cache/Psr16Cache.php"/>
  <docblock>
    <description compact="Turns a PSR-6 cache into a PSR-16 one."/>
    <author value="Nicolas Grekas &lt;p@tchwork.com&gt;"/>
  </docblock>
  <implements full="Psr\SimpleCache\CacheInterface" namespace="Psr\SimpleCache" name="CacheInterface"/>
  <implements full="Symfony\Component\Cache\PruneableInterface" namespace="Symfony\Component\Cache" name="PruneableInterface"/>
  <implements full="Symfony\Component\Cache\ResettableInterface" namespace="Symfony\Component\Cache" name="ResettableInterface"/>
  <uses full="Symfony\Component\Cache\Traits\ProxyTrait" namespace="Symfony\Component\Cache\Traits" name="ProxyTrait" start="33" end="33"/>
  <constant type="integer" name="METADATA_EXPIRY_OFFSET" value="1527506807"/>
  <member name="createCacheItem" visibility="private" static="false" line="37"/>
  <member name="cacheItemPrototype" visibility="private" static="false" line="38"/>
  <constructor name="__construct" start="40" end="74" abstract="false" final="false" static="false" visibility="public">
    <parameter name="pool" byreference="false" type="object">
      <type full="Psr\Cache\CacheItemPoolInterface" namespace="Psr\Cache" name="CacheItemPoolInterface"/>
    </parameter>
  </constructor>
  <method name="get" start="81" end="96" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritdoc}"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="default" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="set" start="103" end="121" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritdoc}"/>
      <return type="object">
        <type full="Symfony\Component\Cache\bool" namespace="Symfony\Component\Cache" name="bool"/>
      </return>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="ttl" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="delete" start="128" end="137" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritdoc}"/>
      <return type="object">
        <type full="Symfony\Component\Cache\bool" namespace="Symfony\Component\Cache" name="bool"/>
      </return>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="clear" start="144" end="147" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritdoc}"/>
      <return type="object">
        <type full="Symfony\Component\Cache\bool" namespace="Symfony\Component\Cache" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="getMultiple" start="154" end="197" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritdoc}"/>
      <return type="object">
        <type full="Symfony\Component\Cache\iterable" namespace="Symfony\Component\Cache" name="iterable"/>
      </return>
    </docblock>
    <parameter name="keys" byreference="false" type="{unknown}"/>
    <parameter name="default" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="setMultiple" start="204" end="250" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritdoc}"/>
      <return type="object">
        <type full="Symfony\Component\Cache\bool" namespace="Symfony\Component\Cache" name="bool"/>
      </return>
    </docblock>
    <parameter name="values" byreference="false" type="{unknown}"/>
    <parameter name="ttl" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="deleteMultiple" start="257" end="272" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritdoc}"/>
      <return type="object">
        <type full="Symfony\Component\Cache\bool" namespace="Symfony\Component\Cache" name="bool"/>
      </return>
    </docblock>
    <parameter name="keys" byreference="false" type="{unknown}"/>
  </method>
  <method name="has" start="279" end="288" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritdoc}"/>
      <return type="object">
        <type full="Symfony\Component\Cache\bool" namespace="Symfony\Component\Cache" name="bool"/>
      </return>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <interface full="Psr\SimpleCache\CacheInterface" namespace="Psr\SimpleCache" name="CacheInterface">
    <method name="get" start="18" end="18" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Fetches a value from the cache."/>
        <param description="The unique key of this item in the cache." type="string" variable="$key"/>
        <param description="Default value to return if the key does not exist." type="mixed" variable="$default"/>
        <return description="The value of the item from the cache, or $default in case of cache miss." type="mixed"/>
        <throws type="object">MUST be thrown if the $key string is not a legal value.<type full="\Psr\SimpleCache\InvalidArgumentException" namespace="\Psr\SimpleCache" name="InvalidArgumentException"/></throws>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
      <parameter name="default" byreference="false" type="{unknown}" default="NULL"/>
    </method>
    <method name="set" start="34" end="34" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Persists data in the cache, uniquely referenced by a key with an optional expiration TTL time."/>
        <param description="The key of the item to store." type="string" variable="$key"/>
        <param description="The value of the item to store, must be serializable." type="mixed" variable="$value"/>
        <param description="Optional. The TTL value of this item. If no value is sent and" type="object" variable="$ttl">the driver supports TTL then the library may set a default value
                                     for it or let the driver take care of that.<type full="Psr\SimpleCache\null|int|\DateInterval" namespace="Psr\SimpleCache\null|int|" name="DateInterval"/></param>
        <return description="True on success and false on failure." type="object">
          <type full="Psr\SimpleCache\bool" namespace="Psr\SimpleCache" name="bool"/>
        </return>
        <throws type="object">MUST be thrown if the $key string is not a legal value.<type full="\Psr\SimpleCache\InvalidArgumentException" namespace="\Psr\SimpleCache" name="InvalidArgumentException"/></throws>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
      <parameter name="ttl" byreference="false" type="{unknown}" default="NULL"/>
    </method>
    <method name="delete" start="46" end="46" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Delete an item from the cache by its unique key."/>
        <param description="The unique cache key of the item to delete." type="string" variable="$key"/>
        <return description="True if the item was successfully removed. False if there was an error." type="object">
          <type full="Psr\SimpleCache\bool" namespace="Psr\SimpleCache" name="bool"/>
        </return>
        <throws type="object">MUST be thrown if the $key string is not a legal value.<type full="\Psr\SimpleCache\InvalidArgumentException" namespace="\Psr\SimpleCache" name="InvalidArgumentException"/></throws>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
    </method>
    <method name="clear" start="53" end="53" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Wipes clean the entire cache's keys."/>
        <return description="True on success and false on failure." type="object">
          <type full="Psr\SimpleCache\bool" namespace="Psr\SimpleCache" name="bool"/>
        </return>
      </docblock>
    </method>
    <method name="getMultiple" start="67" end="67" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Obtains multiple cache items by their unique keys."/>
        <param description="A list of keys that can obtained in a single operation." type="object" variable="$keys">
          <type full="Psr\SimpleCache\iterable" namespace="Psr\SimpleCache" name="iterable"/>
        </param>
        <param description="Default value to return for keys that do not exist." type="mixed" variable="$default"/>
        <return description="A list of key =&gt; value pairs. Cache keys that do not exist or are stale will have $default as value." type="object">
          <type full="Psr\SimpleCache\iterable" namespace="Psr\SimpleCache" name="iterable"/>
        </return>
        <throws type="object">MUST be thrown if $keys is neither an array nor a Traversable,
  or if any of the $keys are not a legal value.<type full="\Psr\SimpleCache\InvalidArgumentException" namespace="\Psr\SimpleCache" name="InvalidArgumentException"/></throws>
      </docblock>
      <parameter name="keys" byreference="false" type="{unknown}"/>
      <parameter name="default" byreference="false" type="{unknown}" default="NULL"/>
    </method>
    <method name="setMultiple" start="83" end="83" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Persists a set of key =&gt; value pairs in the cache, with an optional TTL."/>
        <param description="A list of key =&gt; value pairs for a multiple-set operation." type="object" variable="$values">
          <type full="Psr\SimpleCache\iterable" namespace="Psr\SimpleCache" name="iterable"/>
        </param>
        <param description="Optional. The TTL value of this item. If no value is sent and" type="object" variable="$ttl">the driver supports TTL then the library may set a default value
                                      for it or let the driver take care of that.<type full="Psr\SimpleCache\null|int|\DateInterval" namespace="Psr\SimpleCache\null|int|" name="DateInterval"/></param>
        <return description="True on success and false on failure." type="object">
          <type full="Psr\SimpleCache\bool" namespace="Psr\SimpleCache" name="bool"/>
        </return>
        <throws type="object">MUST be thrown if $values is neither an array nor a Traversable,
  or if any of the $values are not a legal value.<type full="\Psr\SimpleCache\InvalidArgumentException" namespace="\Psr\SimpleCache" name="InvalidArgumentException"/></throws>
      </docblock>
      <parameter name="values" byreference="false" type="{unknown}"/>
      <parameter name="ttl" byreference="false" type="{unknown}" default="NULL"/>
    </method>
    <method name="deleteMultiple" start="96" end="96" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Deletes multiple cache items in a single operation."/>
        <param description="A list of string-based keys to be deleted." type="object" variable="$keys">
          <type full="Psr\SimpleCache\iterable" namespace="Psr\SimpleCache" name="iterable"/>
        </param>
        <return description="True if the items were successfully removed. False if there was an error." type="object">
          <type full="Psr\SimpleCache\bool" namespace="Psr\SimpleCache" name="bool"/>
        </return>
        <throws type="object">MUST be thrown if $keys is neither an array nor a Traversable,
  or if any of the $keys are not a legal value.<type full="\Psr\SimpleCache\InvalidArgumentException" namespace="\Psr\SimpleCache" name="InvalidArgumentException"/></throws>
      </docblock>
      <parameter name="keys" byreference="false" type="{unknown}"/>
    </method>
    <method name="has" start="113" end="113" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Determines whether an item is present in the cache.">NOTE: It is recommended that has() is only to be used for cache warming type purposes
and not to be used within your live applications operations for get/set, as this method
is subject to a race condition where your has() will return true and immediately after,
another script can remove it making the state of your app out of date.</description>
        <param description="The cache item key." type="string" variable="$key"/>
        <return type="object">
          <type full="Psr\SimpleCache\bool" namespace="Psr\SimpleCache" name="bool"/>
        </return>
        <throws type="object">MUST be thrown if the $key string is not a legal value.<type full="\Psr\SimpleCache\InvalidArgumentException" namespace="\Psr\SimpleCache" name="InvalidArgumentException"/></throws>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
    </method>
  </interface>
  <interface full="Symfony\Component\Cache\PruneableInterface" namespace="Symfony\Component\Cache" name="PruneableInterface">
    <method name="prune" start="22" end="22" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return type="object">
          <type full="Symfony\Component\Cache\bool" namespace="Symfony\Component\Cache" name="bool"/>
        </return>
      </docblock>
    </method>
  </interface>
  <interface full="Symfony\Component\Cache\ResettableInterface" namespace="Symfony\Component\Cache" name="ResettableInterface">
    <extends full="Symfony\Contracts\Service\ResetInterface" namespace="Symfony\Contracts\Service" name="ResetInterface"/>
  </interface>
  <trait full="Symfony\Component\Cache\Traits\ProxyTrait" namespace="Symfony\Component\Cache\Traits" name="ProxyTrait">
    <method name="prune" start="29" end="32" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="{@inheritdoc}"/>
      </docblock>
    </method>
    <method name="reset" start="37" end="42" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="{@inheritdoc}"/>
      </docblock>
    </method>
  </trait>
</class>
