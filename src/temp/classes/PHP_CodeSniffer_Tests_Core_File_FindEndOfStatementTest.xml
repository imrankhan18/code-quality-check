<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PHP_CodeSniffer\Tests\Core\File\FindEndOfStatementTest" namespace="PHP_CodeSniffer\Tests\Core\File" name="FindEndOfStatementTest" abstract="false" final="false" start="14" end="415">
  <file path="//var/www/html/vendor/squizlabs/php_codesniffer/tests/Core/File" file="FindEndOfStatementTest.php" realpath="/var/www/html/vendor/squizlabs/php_codesniffer/tests/Core/File/FindEndOfStatementTest.php" size="10971" time="2021-12-12T21:44:58+00:00" unixtime="1639345498" sha1="e6f42744ae0b1190eb0915af5a2b8f1f14e0e479" relative="ar/www/html/vendor/squizlabs/php_codesniffer/tests/Core/File/FindEndOfStatementTest.php"/>
  <extends full="PHP_CodeSniffer\Tests\Core\AbstractMethodUnitTest" namespace="PHP_CodeSniffer\Tests\Core" name="AbstractMethodUnitTest"/>
  <method name="testSimpleAssignment" start="23" end="30" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test a simple assignment."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testControlStructure" start="38" end="45" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test a direct call to a control structure."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testClosureAssignment" start="53" end="60" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test the assignment of a closure."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testHeredocFunctionArg" start="68" end="88" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test using a heredoc in a function argument."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
    <inline>
      <comment value="Find the end of the function." line="70"/>
      <comment value="Find the end of the heredoc." line="76"/>
      <comment value="Find the end of the last arg." line="82"/>
    </inline>
  </method>
  <method name="testSwitch" start="96" end="116" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test parts of a switch statement."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
    <inline>
      <comment value="Find the end of the switch." line="98"/>
      <comment value="Find the end of the case." line="104"/>
      <comment value="Find the end of default case." line="110"/>
    </inline>
  </method>
  <method name="testStatementAsArrayValue" start="124" end="144" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test statements that are array values."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
    <inline>
      <comment value="Test short array syntax." line="126"/>
      <comment value="Test long array syntax." line="132"/>
      <comment value="Test same statement outside of array." line="138"/>
    </inline>
  </method>
  <method name="testUseGroup" start="152" end="159" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test a use group."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testArrowFunctionArrayValue" start="167" end="174" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow function as array value."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testStaticArrowFunction" start="182" end="192" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test static arrow function."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testArrowFunctionReturnValue" start="200" end="207" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow function with return value."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testArrowFunctionAsArgument" start="215" end="222" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow function used as a function argument."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testArrowFunctionWithArrayAsArgument" start="230" end="237" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow function with arrays used as a function argument."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testMatchCase" start="245" end="257" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test simple match expression case."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testMatchDefault" start="265" end="277" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test simple match expression default case."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testMatchMultipleCase" start="285" end="295" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test multiple comma-separated match expression case values."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testMatchDefaultComma" start="303" end="310" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test match expression default case with trailing comma."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testMatchFunctionCall" start="318" end="330" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test match expression with function call."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testMatchFunctionCallArm" start="338" end="352" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test match expression with function call in the arm."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
    <inline>
      <comment value="Check the first case." line="340"/>
      <comment value="Check the second case." line="346"/>
    </inline>
  </method>
  <method name="testMatchClosure" start="360" end="372" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test match expression with closure."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testMatchArray" start="380" end="392" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test match expression with array declaration."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testNestedMatch" start="400" end="412" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test nested match expressions."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <parent full="PHP_CodeSniffer\Tests\Core\AbstractMethodUnitTest" namespace="PHP_CodeSniffer\Tests\Core" name="AbstractMethodUnitTest">
    <extends full="PHPUnit\Framework\TestCase" namespace="PHPUnit\Framework" name="TestCase" unresolved="true"/>
    <member name="fileExtension" default="'inc'" type="string" visibility="protected" static="true" line="28">
      <docblock>
        <description compact="The file extension of the test case file (without leading dot).">This allows child classes to overrule the default `inc` with, for instance,
`js` or `css` when applicable.</description>
        <var type="string"/>
      </docblock>
    </member>
    <member name="phpcsFile" visibility="protected" static="true" line="35">
      <docblock>
        <description compact="The \PHP_CodeSniffer\Files\File object containing the parsed contents of the test case file."/>
        <var type="object">
          <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
        </var>
      </docblock>
    </member>
    <method name="setUpBeforeClass" start="46" end="65" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Initialize &amp; tokenize \PHP_CodeSniffer\Files\File with code from the test case file.">The test case file for a unit test class has to be in the same directory
directory and use the same file name as the test class, using the .inc extension.</description>
        <return type="object">
          <type full="PHP_CodeSniffer\Tests\Core\void" namespace="PHP_CodeSniffer\Tests\Core" name="void"/>
        </return>
      </docblock>
      <inline>
        <comment value="Default to a file with the same name as the test class. Extension is property based." line="53"/>
        <comment value="Make sure the file gets parsed correctly based on the file type." line="58"/>
      </inline>
    </method>
    <method name="tearDownAfterClass" start="73" end="77" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Clean up after finished test."/>
        <return type="object">
          <type full="PHP_CodeSniffer\Tests\Core\void" namespace="PHP_CodeSniffer\Tests\Core" name="void"/>
        </return>
      </docblock>
    </method>
    <method name="getTargetToken" start="92" end="137" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the token pointer for a target token based on a specific comment found on the line before.">Note: the test delimiter comment MUST start with "/* test" to allow this function to
distinguish between comments used *in* a test and test delimiters.</description>
        <param description="The delimiter comment to look for." type="string" variable="$commentString"/>
        <param description="The type of token(s) to look for." type="object" variable="$tokenType">
          <type full="PHP_CodeSniffer\Tests\Core\int|string|array" namespace="PHP_CodeSniffer\Tests\Core" name="int|string|array"/>
        </param>
        <param description="Optional. The token content for the target token." type="string" variable="$tokenContent"/>
        <return type="int"/>
      </docblock>
      <parameter name="commentString" byreference="false" type="{unknown}"/>
      <parameter name="tokenType" byreference="false" type="{unknown}"/>
      <parameter name="tokenContent" byreference="false" type="{unknown}" default="NULL"/>
      <inline>
        <comment value="Limit the token finding to between this and the next delimiter comment." line="106"/>
      </inline>
    </method>
  </parent>
</class>
