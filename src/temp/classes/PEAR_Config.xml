<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PEAR_Config" namespace="" name="PEAR_Config" abstract="false" final="false" start="271" end="2131">
  <file path="//usr/local/lib/php/PEAR" file="Config.php" realpath="/usr/local/lib/php/PEAR/Config.php" size="69481" time="2020-02-26T12:11:53+00:00" unixtime="1582719113" sha1="9ba70113cafc87093f93506f75fc0f97baf2cb26" relative="sr/local/lib/php/PEAR/Config.php"/>
  <docblock>
    <description compact="This is a class for storing configuration data, keeping track of which are system-defined, user-defined or defaulted."/>
    <category value="pear"/>
    <package value="PEAR"/>
    <author value="Stig Bakken &lt;ssb@php.net&gt;"/>
    <author value="Greg Beaver &lt;cellog@php.net&gt;"/>
    <copyright value="1997-2009 The Authors"/>
    <license name="http://opensource.org/licenses/bsd-license.php New BSD License"/>
    <version value="Release: 1.10.10"/>
    <link value="http://pear.php.net/package/PEAR"/>
    <since value="Class available since Release 0.1"/>
  </docblock>
  <extends full="PEAR" namespace="" name="PEAR"/>
  <member name="files" default="" type="array" visibility="public" static="false" line="278">
    <docblock>
      <description compact="Array of config files used."/>
      <var description="layer =&gt; config file" type="array"/>
    </docblock>
  </member>
  <member name="layers" default="" type="array" visibility="public" static="false" line="283"/>
  <member name="configuration" default="" type="array" visibility="public" static="false" line="297">
    <docblock>
      <description compact="Configuration data, two-dimensional array where the first dimension is the config layer ('user', 'system' and 'default'), and the second dimension is keyname =&gt; value.">The order in the first dimension is important!  Earlier
layers will shadow later ones when a config value is
requested (if a 'user' value exists, it will be returned first,
then 'system' and finally 'default').</description>
      <var description="layer =&gt; array(keyname =&gt; value, ...)" type="array"/>
    </docblock>
  </member>
  <member name="_channelConfigInfo" default="" type="array" visibility="public" static="false" line="310">
    <docblock>
      <description compact="Configuration values that can be set for a channel">All other configuration values can only have a global value</description>
      <var type="array"/>
      <access value="private"/>
    </docblock>
  </member>
  <member name="_channels" default="" type="array" visibility="public" static="false" line="322">
    <docblock>
      <description compact="Channels that can be accessed"/>
      <see value="setChannels()"/>
      <var type="array"/>
      <access value="private"/>
    </docblock>
  </member>
  <member name="_installRoot" default="false" type="boolean" visibility="public" static="false" line="330">
    <docblock>
      <description compact="This variable is used to control the directory values returned"/>
      <see value="setInstallRoot();"/>
      <var type="object">
        <type full="string|false" namespace="" name="string|false"/>
      </var>
      <access value="private"/>
    </docblock>
  </member>
  <member name="_registry" default="" type="array" visibility="public" static="false" line="337">
    <docblock>
      <description compact="If requested, this will always refer to the registry contained in php_dir"/>
      <var type="object">
        <type full="PEAR_Registry" namespace="" name="PEAR_Registry"/>
      </var>
    </docblock>
  </member>
  <member name="_regInitialized" default="" type="array" visibility="public" static="false" line="343">
    <docblock>
      <description/>
      <var type="array"/>
      <access value="private"/>
    </docblock>
  </member>
  <member name="_noRegistry" default="false" type="boolean" visibility="public" static="false" line="349">
    <docblock>
      <description/>
      <var type="object">
        <type full="bool" namespace="" name="bool"/>
      </var>
      <access value="private"/>
    </docblock>
  </member>
  <member name="_errorsFound" default="0" type="integer" visibility="public" static="false" line="356">
    <docblock>
      <description compact="amount of errors found while parsing config"/>
      <var type="integer"/>
      <access value="private"/>
    </docblock>
  </member>
  <member name="_lastError" default="NULL" visibility="public" static="false" line="357"/>
  <member name="configuration_info" default="" type="array" visibility="public" static="false" line="366">
    <docblock>
      <description compact="Information about the configuration data.  Stores the type, default value and a documentation string for each configuration value."/>
      <var description="layer =&gt; array(infotype =&gt; value, ...)" type="array"/>
    </docblock>
  </member>
  <constructor name="__construct" start="627" end="688" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Constructor."/>
      <param description="file to read user-defined options from" type="string"/>
      <param description="file to read system-wide defaults from" type="string"/>
      <param description="determines whether a registry object &quot;follows&quot;" type="object">the value of php_dir (is automatically created
              and moved when php_dir is changed)<type full="bool" namespace="" name="bool"/></param>
      <param description="if true, fails if configuration files cannot be loaded" type="object">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <access value="public"/>
      <see value="PEAR_Config::singleton"/>
    </docblock>
    <parameter name="user_file" byreference="false" type="string" default="''"/>
    <parameter name="system_file" byreference="false" type="string" default="''"/>
    <parameter name="ftp_file" byreference="false" type="boolean" default="false"/>
    <parameter name="strict" byreference="false" type="boolean" default="true"/>
    <inline>
      <comment value="$GLOBALS['_PEAR_Config_instance'] = &amp;$this;" line="687"/>
    </inline>
  </constructor>
  <method name="getDefaultConfigFiles" start="693" end="707" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Return the default locations of user and system configuration files"/>
    </docblock>
  </method>
  <method name="singleton" start="722" end="735" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Static singleton method.  If you want to keep only one instance of this class in use, this method will give you a reference to the last created PEAR_Config object if one exists, or create a new object."/>
      <param description="(optional) file to read user-defined options from" type="string"/>
      <param description="(optional) file to read system-wide defaults from" type="string"/>
      <return description="an existing or new PEAR_Config instance" type="object"/>
      <see value="PEAR_Config::PEAR_Config"/>
    </docblock>
    <parameter name="user_file" byreference="false" type="string" default="''"/>
    <parameter name="system_file" byreference="false" type="string" default="''"/>
    <parameter name="strict" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="validConfiguration" start="743" end="750" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Determine whether any configuration files have been detected, and whether a registry object can be retrieved from this configuration."/>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
      <since value="PEAR 1.4.0a1"/>
    </docblock>
  </method>
  <method name="readConfigFile" start="761" end="797" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Reads configuration data from a file.  All existing values in the config layer are discarded and replaced with data from the file."/>
      <param description="file to read from, if NULL or not specified, the" type="string">last-used file for the same layer (second param) is used</param>
      <param description="config layer to insert data into ('user' or 'system')" type="string"/>
      <return description="TRUE on success or a PEAR error on failure" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="file" byreference="false" type="{unknown}" default="NULL"/>
    <parameter name="layer" byreference="false" type="string" default="'user'"/>
    <parameter name="strict" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="readFTPConfigFile" start="803" end="870" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param description="url to the remote config file, like ftp://www.example.com/pear/config.ini" type="string"/>
      <return type="object">
        <type full="true|PEAR_Error" namespace="" name="true|PEAR_Error"/>
      </return>
    </docblock>
    <parameter name="path" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="poor man's catch" line="867"/>
    </inline>
  </method>
  <method name="_setupChannels" start="875" end="888" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Reads the existing configurations and creates the _channels array from it"/>
    </docblock>
  </method>
  <method name="deleteChannel" start="890" end="902" abstract="false" final="false" static="false" visibility="public">
    <parameter name="channel" byreference="false" type="{unknown}"/>
  </method>
  <method name="mergeConfigFile" start="914" end="956" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Merges data into a config layer from a file.  Does the same thing as readConfigFile, except it does not replace all existing values in the config layer."/>
      <param description="file to read from" type="string"/>
      <param description="whether to overwrite existing data (default TRUE)" type="object">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <param description="config layer to insert data into ('user' or 'system')" type="string"/>
      <param description="if true, errors are returned if file opening fails" type="string"/>
      <return description="TRUE on success or a PEAR error on failure" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="file" byreference="false" type="{unknown}"/>
    <parameter name="override" byreference="false" type="boolean" default="true"/>
    <parameter name="layer" byreference="false" type="string" default="'user'"/>
    <parameter name="strict" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="arrayMergeRecursive" start="963" end="984" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <param type="array"/>
      <param type="array"/>
      <return type="array"/>
    </docblock>
    <parameter name="arr2" byreference="false" type="{unknown}"/>
    <parameter name="arr1" byreference="false" type="{unknown}"/>
  </method>
  <method name="writeConfigFile" start="995" end="1037" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Writes data into a config layer from a file."/>
      <param description="file to read from, or null for default" type="object">
        <type full="string|null" namespace="" name="string|null"/>
      </param>
      <param description="config layer to insert data into ('user' or" type="string">'system')</param>
      <param description="data to write to config file or null for internal data [DEPRECATED]" type="object">
        <type full="string|null" namespace="" name="string|null"/>
      </param>
      <return description="TRUE on success or a PEAR error on failure" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="file" byreference="false" type="{unknown}" default="NULL"/>
    <parameter name="layer" byreference="false" type="string" default="'user'"/>
    <parameter name="data" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="_readConfigDataFrom" start="1047" end="1106" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Reads configuration data from a file and returns the parsed data in an array."/>
      <param description="file to read from" type="string"/>
      <return description="configuration data or a PEAR error on failure" type="array"/>
      <access value="private"/>
    </docblock>
    <parameter name="file" byreference="false" type="{unknown}"/>
  </method>
  <method name="getConfFile" start="1113" end="1116" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the file used for storing the config for a layer"/>
      <param description="'user' or 'system'" type="string" variable="$layer"/>
    </docblock>
    <parameter name="layer" byreference="false" type="{unknown}"/>
  </method>
  <method name="_addConfigVars" start="1124" end="1211" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param description="Configuration class name, used for detecting duplicate calls" type="string"/>
      <param description="information on a role as parsed from its xml file" type="array"/>
      <return type="object">
        <type full="true|PEAR_Error" namespace="" name="true|PEAR_Error"/>
      </return>
      <access value="private"/>
    </docblock>
    <parameter name="class" byreference="false" type="{unknown}"/>
    <parameter name="vars" byreference="false" type="{unknown}"/>
  </method>
  <method name="_encodeOutput" start="1222" end="1251" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Encodes/scrambles configuration data before writing to files.">Currently, 'password' values will be base64-encoded as to avoid
that people spot cleartext passwords by accident.</description>
      <param description="(reference) array to encode values in" type="array"/>
      <return description="TRUE on success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
      <access value="private"/>
    </docblock>
    <parameter name="data" byreference="true" type="{unknown}"/>
  </method>
  <method name="_decodeInput" start="1262" end="1293" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Decodes/unscrambles configuration data after reading from files."/>
      <param description="(reference) array to encode values in" type="array"/>
      <return description="TRUE on success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
      <access value="private"/>
      <see value="PEAR_Config::_encodeOutput"/>
    </docblock>
    <parameter name="data" byreference="true" type="{unknown}"/>
  </method>
  <method name="getDefaultChannel" start="1303" end="1330" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Retrieve the default channel.">On startup, channels are not initialized, so if the default channel is not
pear.php.net, then initialize the config.</description>
      <param description="registry layer" type="string"/>
      <return type="object">
        <type full="string|false" namespace="" name="string|false"/>
      </return>
    </docblock>
    <parameter name="layer" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="get" start="1340" end="1431" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a configuration value, prioritizing layers as per the layers property."/>
      <param description="config key" type="string"/>
      <return description="the config value, or NULL if not found" type="mixed"/>
      <access value="public"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="layer" byreference="false" type="{unknown}" default="NULL"/>
    <parameter name="channel" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="_getChannelValue" start="1441" end="1486" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a channel-specific configuration value, prioritizing layers as per the layers property."/>
      <param description="config key" type="string"/>
      <return description="the config value, or NULL if not found" type="mixed"/>
      <access value="private"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="layer" byreference="false" type="{unknown}"/>
    <parameter name="channel" byreference="false" type="{unknown}"/>
  </method>
  <method name="set" start="1500" end="1614" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set a config value in a specific layer (defaults to 'user').">Enforces the types defined in the configuration_info array.  An
integer config variable will be cast to int, and a set config
variable will be validated against its legal values.</description>
      <param description="config key" type="string"/>
      <param description="config value" type="string"/>
      <param description="(optional) config layer" type="string"/>
      <param description="channel to set this value for, or null for global value" type="string"/>
      <return description="TRUE on success, FALSE on failure" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="layer" byreference="false" type="string" default="'user'"/>
    <parameter name="channel" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="_lazyChannelSetup" start="1616" end="1653" abstract="false" final="false" static="false" visibility="public">
    <parameter name="uselayer" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="setChannels" start="1663" end="1693" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the list of channels.">This should be set via a call to <link xmlns="http://xml.phpdox.net/src" value="PEAR_Registry::listChannels()"/></description>
      <param type="array"/>
      <param type="object">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <return description="success of operation" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="channels" byreference="false" type="{unknown}"/>
    <parameter name="merge" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="getType" start="1706" end="1712" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the type of a config value."/>
      <param description="config key" type="string"/>
      <return description="type, one of &quot;string&quot;, &quot;integer&quot;, &quot;file&quot;," type="string">"directory", "set" or "password".</return>
      <access value="public"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="getDocs" start="1723" end="1730" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the documentation for a config value."/>
      <param description="config key" type="string"/>
      <return description="documentation string" type="string"/>
      <access value="public"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="getPrompt" start="1741" end="1748" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the short documentation for a config value."/>
      <param description="config key" type="string"/>
      <return description="short documentation string" type="string"/>
      <access value="public"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="getGroup" start="1759" end="1766" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the parameter group for a config key."/>
      <param description="config key" type="string"/>
      <return description="parameter group" type="string"/>
      <access value="public"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="getGroups" start="1776" end="1784" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the list of parameter groups."/>
      <return description="list of parameter groups" type="array"/>
      <access value="public"/>
    </docblock>
  </method>
  <method name="getGroupKeys" start="1795" end="1805" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the list of the parameters in a group."/>
      <param description="parameter group" type="string" variable="$group"/>
      <return description="list of parameters in $group" type="array"/>
      <access value="public"/>
    </docblock>
    <parameter name="group" byreference="false" type="{unknown}"/>
  </method>
  <method name="getSetValues" start="1818" end="1834" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the list of allowed set values for a config value.  Returns NULL for config values that are not sets."/>
      <param description="config key" type="string"/>
      <return description="enumerated array of set values, or NULL if the" type="array">config key is unknown or not a set</return>
      <access value="public"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="getKeys" start="1843" end="1859" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get all the current config keys."/>
      <return description="simple array of config keys" type="array"/>
      <access value="public"/>
    </docblock>
  </method>
  <method name="remove" start="1871" end="1890" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Remove the a config key from a specific config layer."/>
      <param description="config key" type="string"/>
      <param description="(optional) config layer" type="string"/>
      <param description="(optional) channel (defaults to default channel)" type="string"/>
      <return description="TRUE on success, FALSE on failure" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
      <access value="public"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="layer" byreference="false" type="string" default="'user'"/>
    <parameter name="channel" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="removeLayer" start="1901" end="1909" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Temporarily remove an entire config layer.  USE WITH CARE!"/>
      <param description="config key" type="string"/>
      <param description="(optional) config layer" type="string"/>
      <return description="TRUE on success, FALSE on failure" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
      <access value="public"/>
    </docblock>
    <parameter name="layer" byreference="false" type="{unknown}"/>
  </method>
  <method name="store" start="1919" end="1922" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Stores configuration data in a layer."/>
      <param description="config layer to store" type="string"/>
      <return description="TRUE on success, or PEAR error on failure" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
      <access value="public"/>
    </docblock>
    <parameter name="layer" byreference="false" type="string" default="'user'"/>
    <parameter name="data" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="definedBy" start="1937" end="1959" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tells what config layer that gets to define a key."/>
      <param description="config key" type="string"/>
      <param description="return the defining channel" type="boolean"/>
      <return description="the config layer, or an empty string if not found." type="object">if $returnchannel, the return is an array array('layer' =&gt; layername,
        'channel' =&gt; channelname), or an empty string if not found<type full="string|array" namespace="" name="string|array"/></return>
      <access value="public"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="returnchannel" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="isDefined" start="1969" end="1978" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tells whether a given key exists as a config value."/>
      <param description="config key" type="string"/>
      <return description="whether &lt;config key&gt; exists in this object" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
      <access value="public"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="isDefinedLayer" start="1988" end="1991" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tells whether a given config layer exists."/>
      <param description="config layer" type="string"/>
      <return description="whether &lt;config layer&gt; exists in this object" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
      <access value="public"/>
    </docblock>
    <parameter name="layer" byreference="false" type="{unknown}"/>
  </method>
  <method name="getLayers" start="1998" end="2003" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the layers defined (except the 'default' one)"/>
      <return description="of the defined layers" type="array"/>
    </docblock>
  </method>
  <method name="apiVersion" start="2005" end="2008" abstract="false" final="false" static="false" visibility="public"/>
  <method name="getRegistry" start="2013" end="2030" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return type="object">
        <type full="PEAR_Registry" namespace="" name="PEAR_Registry"/>
      </return>
    </docblock>
    <parameter name="use" byreference="false" type="{unknown}" default="NULL"/>
    <inline>
      <comment value="only go here if null was passed in" line="2027"/>
    </inline>
  </method>
  <method name="setRegistry" start="2037" end="2053" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="This is to allow customization like the use of installroot"/>
      <param type="object">
        <type full="PEAR_Registry" namespace="" name="PEAR_Registry"/>
      </param>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="reg" byreference="true" type="{unknown}"/>
    <parameter name="layer" byreference="false" type="string" default="'user'"/>
  </method>
  <method name="noRegistry" start="2055" end="2058" abstract="false" final="false" static="false" visibility="public"/>
  <method name="getREST" start="2063" end="2072" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return type="object">
        <type full="PEAR_REST" namespace="" name="PEAR_REST"/>
      </return>
    </docblock>
    <parameter name="version" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array" default=""/>
  </method>
  <method name="getFTP" start="2079" end="2087" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="The ftp server is set in {@link readFTPConfigFile()}.  It exists only if a remote configuration file has been specified"/>
      <return type="object">
        <type full="PEAR_FTP|false" namespace="" name="PEAR_FTP|false"/>
      </return>
    </docblock>
  </method>
  <method name="_prependPath" start="2089" end="2104" abstract="false" final="false" static="true" visibility="public">
    <parameter name="path" byreference="false" type="{unknown}"/>
    <parameter name="prepend" byreference="false" type="{unknown}"/>
  </method>
  <method name="setInstallRoot" start="2110" end="2130" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param description="installation directory to prepend to all _dir variables, or false to" type="object">disable<type full="string|false" namespace="" name="string|false"/></param>
    </docblock>
    <parameter name="root" byreference="false" type="{unknown}"/>
  </method>
  <parent full="PEAR" namespace="" name="PEAR">
    <member name="_debug" default="false" type="boolean" visibility="public" static="false" line="92">
      <docblock>
        <description compact="Whether to enable internal debug messages."/>
        <var type="object">
          <type full="bool" namespace="" name="bool"/>
        </var>
        <access value="private"/>
      </docblock>
    </member>
    <member name="_default_error_mode" default="NULL" visibility="public" static="false" line="100">
      <docblock>
        <description compact="Default error mode for this object."/>
        <var type="int"/>
        <access value="private"/>
      </docblock>
    </member>
    <member name="_default_error_options" default="NULL" visibility="public" static="false" line="109">
      <docblock>
        <description compact="Default error options used for this object when error mode is PEAR_ERROR_TRIGGER."/>
        <var type="int"/>
        <access value="private"/>
      </docblock>
    </member>
    <member name="_default_error_handler" default="''" type="string" visibility="public" static="false" line="118">
      <docblock>
        <description compact="Default error handler (callback) for this object, if error mode is PEAR_ERROR_CALLBACK."/>
        <var type="string"/>
        <access value="private"/>
      </docblock>
    </member>
    <member name="_error_class" default="'PEAR_Error'" type="string" visibility="public" static="false" line="126">
      <docblock>
        <description compact="Which class to use for error objects."/>
        <var type="string"/>
        <access value="private"/>
      </docblock>
    </member>
    <member name="_expected_errors" default="" type="array" visibility="public" static="false" line="134">
      <docblock>
        <description compact="An array of expected errors."/>
        <var type="array"/>
        <access value="private"/>
      </docblock>
    </member>
    <member name="bivalentMethods" default="" type="array" visibility="protected" static="true" line="140">
      <docblock>
        <description compact="List of methods that can be called both statically and non-statically."/>
        <var type="array"/>
      </docblock>
    </member>
    <constructor name="__construct" start="158" end="183" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Constructor.  Registers this object in $_PEAR_destructor_object_list for destructor emulation if a destructor object exists."/>
        <param description="(optional) which class to use for" type="string" variable="$error_class">error objects, defaults to PEAR_Error.</param>
        <access value="public"/>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <parameter name="error_class" byreference="false" type="{unknown}" default="NULL"/>
    </constructor>
    <method name="PEAR" start="192" end="195" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Only here for backwards compatibility.">E.g. Archive_Tar calls $this-&gt;PEAR() in its constructor.</description>
        <param description="Which class to use for error objects," type="string" variable="$error_class">defaults to PEAR_Error.</param>
      </docblock>
      <parameter name="error_class" byreference="false" type="{unknown}" default="NULL"/>
    </method>
    <method name="_PEAR" start="208" end="212" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Destructor (the emulated type of...).  Does nothing right now, but is included for forward compatibility, so subclass destructors should always call it.">See the note in the class desciption about output from
destructors.</description>
        <access value="public"/>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
    </method>
    <method name="__call" start="214" end="225" abstract="false" final="false" static="false" visibility="public">
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}"/>
    </method>
    <method name="__callStatic" start="227" end="238" abstract="false" final="false" static="true" visibility="public">
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}"/>
    </method>
    <method name="getStaticProperty" start="251" end="263" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="If you have a class that's mostly/entirely static, and you need static properties, you can use this method to simulate them. Eg. in your method(s) do this: $myVar = &amp;PEAR::getStaticProperty('myclass', 'myVar'); You MUST use a reference, or they will not persist!"/>
        <param description="The calling classname, to prevent clashes" type="string" variable="$class"/>
        <param description="The variable to retrieve." type="string" variable="$var"/>
        <return description="A reference to the variable. If not set it will be" type="mixed">auto initialised to NULL.</return>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="var" byreference="false" type="{unknown}"/>
    </method>
    <method name="registerShutdownFunc" start="274" end="283" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Use this function to register a shutdown method for static classes."/>
        <param description="The function name (or array of class/method) to call" type="mixed" variable="$func"/>
        <param description="The arguments to pass to the function" type="mixed" variable="$args"/>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <parameter name="func" byreference="false" type="{unknown}"/>
      <parameter name="args" byreference="false" type="array" default=""/>
      <inline>
        <comment value="if we are called statically, there is a potential" line="276"/>
        <comment value="that no shutdown func is registered.  Bug #6445" line="277"/>
      </inline>
    </method>
    <method name="isError" start="296" end="309" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Tell whether a value is a PEAR error."/>
        <param description="the value to test" type="mixed" variable="$data"/>
        <param description="if $data is an error object, return true" type="int" variable="$code">only if $code is a string and
                       $obj-&gt;getMessage() == $code or
                       $code is an integer and $obj-&gt;getCode() == $code</param>
        <return description="true if parameter is an error" type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="data" byreference="false" type="{unknown}"/>
      <parameter name="code" byreference="false" type="{unknown}" default="NULL"/>
    </method>
    <method name="_setErrorHandling" start="352" end="388" abstract="false" final="false" static="true" visibility="protected">
      <docblock>
        <description compact="Sets how errors generated by this object should be handled.">Can be invoked both in objects and statically.  If called
statically, setErrorHandling sets the default behaviour for all
PEAR objects.  If called in an object, setErrorHandling sets
the default behaviour for that object.</description>
        <param type="object" variable="$object">Object the method was called on (non-static mode)</param>
        <param type="int" variable="$mode">One of PEAR_ERROR_RETURN, PEAR_ERROR_PRINT,
       PEAR_ERROR_TRIGGER, PEAR_ERROR_DIE,
       PEAR_ERROR_CALLBACK or PEAR_ERROR_EXCEPTION.</param>
        <param type="mixed" variable="$options">When $mode is PEAR_ERROR_TRIGGER, this is the error level (one
       of E_USER_NOTICE, E_USER_WARNING or E_USER_ERROR).

       When $mode is PEAR_ERROR_CALLBACK, this parameter is expected
       to be the callback function or method.  A callback
       function is a string with the name of the function, a
       callback method is an array of two elements: the element
       at index 0 is the object, and the element at index 1 is
       the name of the method to call in the object.

       When $mode is PEAR_ERROR_PRINT or PEAR_ERROR_DIE, this is
       a printf format string used when printing the error
       message.</param>
        <access value="public"/>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
        <see value="PEAR_ERROR_RETURN"/>
        <see value="PEAR_ERROR_PRINT"/>
        <see value="PEAR_ERROR_TRIGGER"/>
        <see value="PEAR_ERROR_DIE"/>
        <see value="PEAR_ERROR_CALLBACK"/>
        <see value="PEAR_ERROR_EXCEPTION"/>
        <since value="PHP 4.0.5"/>
      </docblock>
      <parameter name="object" byreference="false" type="{unknown}"/>
      <parameter name="mode" byreference="false" type="{unknown}" default="NULL"/>
      <parameter name="options" byreference="false" type="{unknown}" default="NULL"/>
    </method>
    <method name="expectError" start="405" end="413" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This method is used to tell which errors you expect to get.">Expected errors are always returned with error mode
PEAR_ERROR_RETURN.  Expected error codes are stored in a stack,
and this method pushes a new element onto it.  The list of
expected errors are in effect until they are popped off the
stack with the popExpect() method.

Note that this method can not be called statically</description>
        <param description="a single error code or an array of error codes to expect" type="mixed" variable="$code"/>
        <return description="the new depth of the &quot;expected errors&quot; stack" type="int"/>
        <access value="public"/>
      </docblock>
      <parameter name="code" byreference="false" type="string" default="'*'"/>
    </method>
    <method name="popExpect" start="421" end="424" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This method pops one element off the expected error codes stack."/>
        <return description="the list of error codes that were popped" type="array"/>
      </docblock>
    </method>
    <method name="_checkDelExpect" start="434" end="450" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This method checks unsets an error code if available"/>
        <param description="error code" type="mixed"/>
        <return description="true if the error code was unset, false otherwise" type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
        <access value="private"/>
        <since value="PHP 4.3.0"/>
      </docblock>
      <parameter name="error_code" byreference="false" type="{unknown}"/>
    </method>
    <method name="delExpect" start="461" end="483" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This method deletes all occurrences of the specified element from the expected error codes stack."/>
        <param description="error code that should be deleted" type="mixed" variable="$error_code"/>
        <return description="list of error codes that were deleted or error" type="mixed"/>
        <access value="public"/>
        <since value="PHP 4.3.0"/>
      </docblock>
      <parameter name="error_code" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="$error_code is empty" line="481"/>
        <comment value="IMPROVE ME" line="482"/>
      </inline>
    </method>
    <method name="_raiseError" start="521" end="581" abstract="false" final="false" static="true" visibility="protected">
      <docblock>
        <description compact="This method is a wrapper that returns an instance of the configured error class with this object's default error handling applied.  If the $mode and $options parameters are not specified, the object's defaults are used."/>
        <param description="a text error message or a PEAR error object" type="mixed" variable="$message"/>
        <param description="a numeric error code (it is up to your class" type="int" variable="$code">to define these if you want to use codes)</param>
        <param description="One of PEAR_ERROR_RETURN, PEAR_ERROR_PRINT," type="int" variable="$mode">PEAR_ERROR_TRIGGER, PEAR_ERROR_DIE,
                 PEAR_ERROR_CALLBACK, PEAR_ERROR_EXCEPTION.</param>
        <param description="If $mode is PEAR_ERROR_TRIGGER, this parameter" type="mixed" variable="$options">specifies the PHP-internal error level (one of
                 E_USER_NOTICE, E_USER_WARNING or E_USER_ERROR).
                 If $mode is PEAR_ERROR_CALLBACK, this
                 parameter specifies the callback function or
                 method.  In other error modes this parameter
                 is ignored.</param>
        <param description="If you need to pass along for example debug" type="string" variable="$userinfo">information, this parameter is meant for that.</param>
        <param description="The returned error object will be" type="string" variable="$error_class">instantiated from this class, if specified.</param>
        <param description="If true, raiseError will only pass error codes," type="object" variable="$skipmsg">the error message parameter will be dropped.<type full="bool" namespace="" name="bool"/></param>
        <return description="a PEAR error object" type="object"/>
        <see value="PEAR::setErrorHandling"/>
        <since value="PHP 4.0.5"/>
      </docblock>
      <parameter name="object" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
      <parameter name="code" byreference="false" type="{unknown}" default="NULL"/>
      <parameter name="mode" byreference="false" type="{unknown}" default="NULL"/>
      <parameter name="options" byreference="false" type="{unknown}" default="NULL"/>
      <parameter name="userinfo" byreference="false" type="{unknown}" default="NULL"/>
      <parameter name="error_class" byreference="false" type="{unknown}" default="NULL"/>
      <parameter name="skipmsg" byreference="false" type="boolean" default="false"/>
      <inline>
        <comment value="The error is yet a PEAR error object" line="530"/>
        <comment value="No mode given, try global ones" line="553"/>
      </inline>
    </method>
    <method name="_throwError" start="598" end="607" abstract="false" final="false" static="true" visibility="protected">
      <docblock>
        <description compact="Simpler form of raiseError with fewer options.  In most cases message, code and userinfo are enough."/>
        <param description="a text error message or a PEAR error object" type="mixed" variable="$message"/>
        <param description="a numeric error code (it is up to your class" type="int" variable="$code">to define these if you want to use codes)</param>
        <param description="If you need to pass along for example debug" type="string" variable="$userinfo">information, this parameter is meant for that.</param>
        <return description="a PEAR error object" type="object"/>
        <see value="PEAR::raiseError"/>
      </docblock>
      <parameter name="object" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
      <parameter name="code" byreference="false" type="{unknown}" default="NULL"/>
      <parameter name="userinfo" byreference="false" type="{unknown}" default="NULL"/>
    </method>
    <method name="staticPushErrorHandling" start="609" end="642" abstract="false" final="false" static="true" visibility="public">
      <parameter name="mode" byreference="false" type="{unknown}"/>
      <parameter name="options" byreference="false" type="{unknown}" default="NULL"/>
    </method>
    <method name="staticPopErrorHandling" start="644" end="678" abstract="false" final="false" static="true" visibility="public"/>
    <method name="_pushErrorHandling" start="692" end="711" abstract="false" final="false" static="true" visibility="protected">
      <docblock>
        <description compact="Push a new error handler on top of the error handler options stack. With this you can easily override the actual error handler for some code and restore it later with popErrorHandling."/>
        <param description="(same as setErrorHandling)" type="mixed" variable="$mode"/>
        <param description="(same as setErrorHandling)" type="mixed" variable="$options"/>
        <return description="Always true" type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
        <see value="PEAR::setErrorHandling"/>
      </docblock>
      <parameter name="object" byreference="false" type="{unknown}"/>
      <parameter name="mode" byreference="false" type="{unknown}"/>
      <parameter name="options" byreference="false" type="{unknown}" default="NULL"/>
    </method>
    <method name="_popErrorHandling" start="720" end="732" abstract="false" final="false" static="true" visibility="protected">
      <docblock>
        <description compact="Pop the last error handler used"/>
        <return description="Always true" type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
        <see value="PEAR::pushErrorHandling"/>
      </docblock>
      <parameter name="object" byreference="false" type="{unknown}"/>
    </method>
    <method name="loadExtension" start="741" end="768" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="OS independent PHP extension load. Remember to take care on the correct extension name for case sensitive OSes."/>
        <param description="The extension name" type="string" variable="$ext"/>
        <return description="Success or not on the dl() call" type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="ext" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="if either returns true dl() will produce a FATAL error, stop that" line="747"/>
      </inline>
    </method>
    <method name="getSourceDateEpoch" start="777" end="790" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Get SOURCE_DATE_EPOCH environment variable See https://reproducible-builds.org/specs/source-date-epoch/"/>
        <return type="int"/>
        <access value="public"/>
      </docblock>
    </method>
  </parent>
</class>
