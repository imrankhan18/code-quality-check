<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PHP_CodeSniffer\Standards\PSR1\Sniffs\Files\SideEffectsSniff" namespace="PHP_CodeSniffer\Standards\PSR1\Sniffs\Files" name="SideEffectsSniff" abstract="false" final="false" start="16" end="298">
  <file path="//var/www/html/vendor/squizlabs/php_codesniffer/src/Standards/PSR1/Sniffs/Files" file="SideEffectsSniff.php" realpath="/var/www/html/vendor/squizlabs/php_codesniffer/src/Standards/PSR1/Sniffs/Files/SideEffectsSniff.php" size="11126" time="2021-12-12T21:44:58+00:00" unixtime="1639345498" sha1="9bf7d2d015ce49c3503d818b46559ac2c5661b6d" relative="ar/www/html/vendor/squizlabs/php_codesniffer/src/Standards/PSR1/Sniffs/Files/SideEffectsSniff.php"/>
  <implements full="PHP_CodeSniffer\Sniffs\Sniff" namespace="PHP_CodeSniffer\Sniffs" name="Sniff"/>
  <method name="register" start="25" end="29" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns an array of tokens this test wants to listen for."/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="process" start="41" end="61" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Processes this sniff, when one of its tokens is encountered."/>
      <param description="The file being scanned." type="object" variable="$phpcsFile">
        <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
      </param>
      <param description="The position of the current token in" type="int" variable="$stackPtr">the token stack.</param>
      <return type="object">
        <type full="PHP_CodeSniffer\Standards\PSR1\Sniffs\Files\void" namespace="PHP_CodeSniffer\Standards\PSR1\Sniffs\Files" name="void"/>
      </return>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Ignore the rest of the file." line="58"/>
    </inline>
  </method>
  <method name="searchForConflict" start="79" end="295" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Searches for symbol declarations and side effects.">Returns the positions of both the first symbol declared and the first
side effect in the file. A NULL value for either indicates nothing was
found.</description>
      <param description="The file being scanned." type="object" variable="$phpcsFile">
        <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
      </param>
      <param description="The token to start searching from." type="int" variable="$start"/>
      <param description="The token to search to." type="int" variable="$end"/>
      <param description="The stack of tokens that make up" type="array" variable="$tokens">the file.</param>
      <return type="array"/>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="{unknown}"/>
    <parameter name="start" byreference="false" type="{unknown}"/>
    <parameter name="end" byreference="false" type="{unknown}"/>
    <parameter name="tokens" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="end for" line="288"/>
    </inline>
  </method>
  <interface full="PHP_CodeSniffer\Sniffs\Sniff" namespace="PHP_CodeSniffer\Sniffs" name="Sniff">
    <method name="register" start="40" end="40" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Registers the tokens that this sniff wants to listen for.">An example return value for a sniff that wants to listen for whitespace
and any comments would be:

&lt;code&gt;
   return array(
           T_WHITESPACE,
           T_DOC_COMMENT,
           T_COMMENT,
          );
&lt;/code&gt;</description>
        <return type="array" of="object">
          <type full="PHP_CodeSniffer\Sniffs\mixed" namespace="PHP_CodeSniffer\Sniffs" name="mixed"/>
        </return>
        <see value="Tokens.php"/>
      </docblock>
    </method>
    <method name="process" start="77" end="77" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Called when one of the token types that this sniff is listening for is found.">The stackPtr variable indicates where in the stack the token was found.
A sniff can acquire information this token, along with all the other
tokens within the stack by first acquiring the token stack:

&lt;code&gt;
   $tokens = $phpcsFile-&gt;getTokens();
   echo 'Encountered a '.$tokens[$stackPtr]['type'].' token';
   echo 'token information: ';
   print_r($tokens[$stackPtr]);
&lt;/code&gt;

If the sniff discovers an anomaly in the code, they can raise an error
by calling addError() on the \PHP_CodeSniffer\Files\File object, specifying an error
message and the position of the offending token:

&lt;code&gt;
   $phpcsFile-&gt;addError('Encountered an error', $stackPtr);
&lt;/code&gt;</description>
        <param description="The PHP_CodeSniffer file where the" type="object" variable="$phpcsFile">token was found.<type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/></param>
        <param description="The position in the PHP_CodeSniffer" type="int" variable="$stackPtr">file's token stack where the token
                                              was found.</param>
        <return description="Optionally returns a stack pointer. The sniff will not be" type="object">called again on the current file until the returned stack
                 pointer is reached. Return (count($tokens) + 1) to skip
                 the rest of the file.<type full="PHP_CodeSniffer\Sniffs\void|int" namespace="PHP_CodeSniffer\Sniffs" name="void|int"/></return>
      </docblock>
      <parameter name="phpcsFile" byreference="false" type="object">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </parameter>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    </method>
  </interface>
</class>
