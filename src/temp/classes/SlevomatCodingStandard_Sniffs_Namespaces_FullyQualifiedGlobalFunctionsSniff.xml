<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="SlevomatCodingStandard\Sniffs\Namespaces\FullyQualifiedGlobalFunctionsSniff" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="FullyQualifiedGlobalFunctionsSniff" abstract="false" final="false" start="9" end="45">
  <file path="//var/www/html/vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/Namespaces" file="FullyQualifiedGlobalFunctionsSniff.php" realpath="/var/www/html/vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/Namespaces/FullyQualifiedGlobalFunctionsSniff.php" size="944" time="2022-03-29T12:44:16+00:00" unixtime="1648557856" sha1="24a658f1c8d59318dcfcc78d899f117dc277adc6" relative="ar/www/html/vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/Namespaces/FullyQualifiedGlobalFunctionsSniff.php"/>
  <extends full="SlevomatCodingStandard\Sniffs\Namespaces\AbstractFullyQualifiedGlobalReference" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="AbstractFullyQualifiedGlobalReference"/>
  <member name="includeSpecialFunctions" default="false" type="boolean" visibility="public" static="false" line="14">
    <docblock>
      <var type="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\bool" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="bool"/>
      </var>
    </docblock>
  </member>
  <method name="getNormalizedInclude" start="19" end="28" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description/>
      <return type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Namespaces\string" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="string"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
  </method>
  <method name="getNotFullyQualifiedMessage" start="30" end="33" abstract="false" final="false" static="false" visibility="protected">
    <return type="string" nullable="false"/>
  </method>
  <method name="isCaseSensitive" start="35" end="38" abstract="false" final="false" static="false" visibility="protected">
    <return type="bool" nullable="false"/>
  </method>
  <method name="isValidType" start="40" end="43" abstract="false" final="false" static="false" visibility="protected">
    <return type="bool" nullable="false"/>
    <parameter name="name" byreference="false" type="object">
      <type full="SlevomatCodingStandard\Helpers\ReferencedName" namespace="SlevomatCodingStandard\Helpers" name="ReferencedName"/>
    </parameter>
  </method>
  <parent full="SlevomatCodingStandard\Sniffs\Namespaces\AbstractFullyQualifiedGlobalReference" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="AbstractFullyQualifiedGlobalReference">
    <implements full="PHP_CodeSniffer\Sniffs\Sniff" namespace="PHP_CodeSniffer\Sniffs" name="Sniff"/>
    <constant type="{unknown}" name="CODE_NON_FULLY_QUALIFIED" value="'NonFullyQualified'"/>
    <member name="exclude" default="" type="array" visibility="public" static="false" line="30">
      <docblock>
        <var type="array" of="object">
          <type full="SlevomatCodingStandard\Sniffs\Namespaces\string" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="string"/>
        </var>
      </docblock>
    </member>
    <member name="include" default="" type="array" visibility="public" static="false" line="33">
      <docblock>
        <var type="array" of="object">
          <type full="SlevomatCodingStandard\Sniffs\Namespaces\string" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="string"/>
        </var>
      </docblock>
    </member>
    <method name="getNotFullyQualifiedMessage" start="41" end="41" abstract="true" final="false" static="false" visibility="protected">
      <return type="string" nullable="false"/>
    </method>
    <method name="isCaseSensitive" start="43" end="43" abstract="true" final="false" static="false" visibility="protected">
      <return type="bool" nullable="false"/>
    </method>
    <method name="isValidType" start="45" end="45" abstract="true" final="false" static="false" visibility="protected">
      <return type="bool" nullable="false"/>
      <parameter name="name" byreference="false" type="object">
        <type full="SlevomatCodingStandard\Helpers\ReferencedName" namespace="SlevomatCodingStandard\Helpers" name="ReferencedName"/>
      </parameter>
    </method>
    <method name="register" start="50" end="55" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return type="array" of="object">
          <type full="SlevomatCodingStandard\Sniffs\Namespaces\(int|string)" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="(int|string)"/>
        </return>
      </docblock>
      <return type="array" nullable="false"/>
    </method>
    <method name="process" start="61" end="126" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <phpcssuppress value="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint"/>
        <param type="int" variable="$openTagPointer"/>
      </docblock>
      <return type="void" nullable="false"/>
      <parameter name="phpcsFile" byreference="false" type="object">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </parameter>
      <parameter name="openTagPointer" byreference="false" type="{unknown}"/>
    </method>
    <method name="getNormalizedInclude" start="131" end="137" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description/>
        <return type="array" of="object">
          <type full="SlevomatCodingStandard\Sniffs\Namespaces\string" namespace="SlevomatCodingStandard\Sniffs\Namespaces" name="string"/>
        </return>
      </docblock>
      <return type="array" nullable="false"/>
    </method>
  </parent>
  <interface full="PHP_CodeSniffer\Sniffs\Sniff" namespace="PHP_CodeSniffer\Sniffs" name="Sniff">
    <method name="register" start="40" end="40" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Registers the tokens that this sniff wants to listen for.">An example return value for a sniff that wants to listen for whitespace
and any comments would be:

&lt;code&gt;
   return array(
           T_WHITESPACE,
           T_DOC_COMMENT,
           T_COMMENT,
          );
&lt;/code&gt;</description>
        <return type="array" of="object">
          <type full="PHP_CodeSniffer\Sniffs\mixed" namespace="PHP_CodeSniffer\Sniffs" name="mixed"/>
        </return>
        <see value="Tokens.php"/>
      </docblock>
    </method>
    <method name="process" start="77" end="77" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Called when one of the token types that this sniff is listening for is found.">The stackPtr variable indicates where in the stack the token was found.
A sniff can acquire information this token, along with all the other
tokens within the stack by first acquiring the token stack:

&lt;code&gt;
   $tokens = $phpcsFile-&gt;getTokens();
   echo 'Encountered a '.$tokens[$stackPtr]['type'].' token';
   echo 'token information: ';
   print_r($tokens[$stackPtr]);
&lt;/code&gt;

If the sniff discovers an anomaly in the code, they can raise an error
by calling addError() on the \PHP_CodeSniffer\Files\File object, specifying an error
message and the position of the offending token:

&lt;code&gt;
   $phpcsFile-&gt;addError('Encountered an error', $stackPtr);
&lt;/code&gt;</description>
        <param description="The PHP_CodeSniffer file where the" type="object" variable="$phpcsFile">token was found.<type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/></param>
        <param description="The position in the PHP_CodeSniffer" type="int" variable="$stackPtr">file's token stack where the token
                                              was found.</param>
        <return description="Optionally returns a stack pointer. The sniff will not be" type="object">called again on the current file until the returned stack
                 pointer is reached. Return (count($tokens) + 1) to skip
                 the rest of the file.<type full="PHP_CodeSniffer\Sniffs\void|int" namespace="PHP_CodeSniffer\Sniffs" name="void|int"/></return>
      </docblock>
      <parameter name="phpcsFile" byreference="false" type="object">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </parameter>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    </method>
  </interface>
</class>
