<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PHP_CodeSniffer\Tests\Core\File\GetMethodParametersTest" namespace="PHP_CodeSniffer\Tests\Core\File" name="GetMethodParametersTest" abstract="false" final="false" start="14" end="969">
  <file path="//var/www/html/vendor/squizlabs/php_codesniffer/tests/Core/File" file="GetMethodParametersTest.php" realpath="/var/www/html/vendor/squizlabs/php_codesniffer/tests/Core/File/GetMethodParametersTest.php" size="30994" time="2021-12-12T21:44:58+00:00" unixtime="1639345498" sha1="d6f9df1b9126360784339a97f80c672252cdcae4" relative="ar/www/html/vendor/squizlabs/php_codesniffer/tests/Core/File/GetMethodParametersTest.php"/>
  <extends full="PHP_CodeSniffer\Tests\Core\AbstractMethodUnitTest" namespace="PHP_CodeSniffer\Tests\Core" name="AbstractMethodUnitTest"/>
  <method name="testPassByReference" start="23" end="38" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify pass-by-reference parsing."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testArrayHint" start="46" end="61" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify array hint parsing."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testTypeHint" start="69" end="94" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify type hint parsing."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testSelfTypeHint" start="102" end="117" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify self type hint parsing."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testNullableTypeHint" start="125" end="150" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify nullable type hint parsing."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testVariable" start="158" end="173" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify variable."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testSingleDefaultValue" start="181" end="197" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify default value parsing with a single function param."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testDefaultValues" start="205" end="231" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify default value parsing."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testBitwiseAndConstantExpressionDefaultValue" start="239" end="255" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify &quot;bitwise and&quot; in default value !== pass-by-reference."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testArrowFunction" start="263" end="288" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify that arrow functions are supported."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8MixedTypeHint" start="296" end="311" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 mixed type declaration."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8MixedTypeHintNullable" start="319" end="334" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 mixed type declaration with nullability."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testNamespaceOperatorTypeHint" start="342" end="357" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of type declarations using the namespace operator."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8UnionTypesSimple" start="365" end="389" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 union type declaration."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8UnionTypesWithSpreadOperatorAndReference" start="397" end="421" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 union type declaration when the variable has either a spread operator or a reference."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8UnionTypesSimpleWithBitwiseOrInDefault" start="429" end="445" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 union type declaration with a bitwise or in the default value."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8UnionTypesTwoClasses" start="453" end="468" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 union type declaration with two classes."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8UnionTypesAllBaseTypes" start="476" end="491" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 union type declaration with all base types."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8UnionTypesAllPseudoTypes" start="499" end="514" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 union type declaration with all pseudo types."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8UnionTypesNullable" start="522" end="537" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 union type declaration with (illegal) nullability."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8PseudoTypeNull" start="545" end="561" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 type declaration with (illegal) single type null."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8PseudoTypeFalse" start="569" end="585" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 type declaration with (illegal) single type false."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8PseudoTypeFalseAndBool" start="593" end="609" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 type declaration with (illegal) type false combined with type bool."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8ObjectAndClass" start="617" end="632" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 type declaration with (illegal) type object combined with a class name."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8PseudoTypeIterableAndArray" start="640" end="655" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 type declaration with (illegal) type iterable combined with array/Traversable."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8DuplicateTypeInUnionWhitespaceAndComment" start="663" end="678" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 type declaration with (illegal) duplicate types."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8ConstructorPropertyPromotionNoTypes" start="686" end="725" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 constructor property promotion without type declaration, with defaults."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8ConstructorPropertyPromotionWithTypes" start="733" end="770" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 constructor property promotion with type declarations."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8ConstructorPropertyPromotionAndNormalParam" start="778" end="803" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 constructor with both property promotion as well as normal parameters."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8ConstructorPropertyPromotionGlobalFunction" start="811" end="827" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify behaviour when a non-constructor function uses PHP 8 property promotion syntax."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8ConstructorPropertyPromotionAbstractMethod" start="835" end="861" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify behaviour when an abstract constructor uses PHP 8 property promotion syntax."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testCommentsInParameter" start="869" end="885" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify and document behaviour when there are comments within a parameter declaration."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testParameterAttributesInFunctionDeclaration" start="893" end="948" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify behaviour when parameters have attributes attached."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="getMethodParametersTestHelper" start="959" end="966" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Test helper."/>
      <param description="The comment which preceeds the test." type="string" variable="$commentString"/>
      <param description="The expected function output." type="array" variable="$expected"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
    <parameter name="commentString" byreference="false" type="{unknown}"/>
    <parameter name="expected" byreference="false" type="{unknown}"/>
  </method>
  <parent full="PHP_CodeSniffer\Tests\Core\AbstractMethodUnitTest" namespace="PHP_CodeSniffer\Tests\Core" name="AbstractMethodUnitTest">
    <extends full="PHPUnit\Framework\TestCase" namespace="PHPUnit\Framework" name="TestCase" unresolved="true"/>
    <member name="fileExtension" default="'inc'" type="string" visibility="protected" static="true" line="28">
      <docblock>
        <description compact="The file extension of the test case file (without leading dot).">This allows child classes to overrule the default `inc` with, for instance,
`js` or `css` when applicable.</description>
        <var type="string"/>
      </docblock>
    </member>
    <member name="phpcsFile" visibility="protected" static="true" line="35">
      <docblock>
        <description compact="The \PHP_CodeSniffer\Files\File object containing the parsed contents of the test case file."/>
        <var type="object">
          <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
        </var>
      </docblock>
    </member>
    <method name="setUpBeforeClass" start="46" end="65" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Initialize &amp; tokenize \PHP_CodeSniffer\Files\File with code from the test case file.">The test case file for a unit test class has to be in the same directory
directory and use the same file name as the test class, using the .inc extension.</description>
        <return type="object">
          <type full="PHP_CodeSniffer\Tests\Core\void" namespace="PHP_CodeSniffer\Tests\Core" name="void"/>
        </return>
      </docblock>
      <inline>
        <comment value="Default to a file with the same name as the test class. Extension is property based." line="53"/>
        <comment value="Make sure the file gets parsed correctly based on the file type." line="58"/>
      </inline>
    </method>
    <method name="tearDownAfterClass" start="73" end="77" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Clean up after finished test."/>
        <return type="object">
          <type full="PHP_CodeSniffer\Tests\Core\void" namespace="PHP_CodeSniffer\Tests\Core" name="void"/>
        </return>
      </docblock>
    </method>
    <method name="getTargetToken" start="92" end="137" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the token pointer for a target token based on a specific comment found on the line before.">Note: the test delimiter comment MUST start with "/* test" to allow this function to
distinguish between comments used *in* a test and test delimiters.</description>
        <param description="The delimiter comment to look for." type="string" variable="$commentString"/>
        <param description="The type of token(s) to look for." type="object" variable="$tokenType">
          <type full="PHP_CodeSniffer\Tests\Core\int|string|array" namespace="PHP_CodeSniffer\Tests\Core" name="int|string|array"/>
        </param>
        <param description="Optional. The token content for the target token." type="string" variable="$tokenContent"/>
        <return type="int"/>
      </docblock>
      <parameter name="commentString" byreference="false" type="{unknown}"/>
      <parameter name="tokenType" byreference="false" type="{unknown}"/>
      <parameter name="tokenContent" byreference="false" type="{unknown}" default="NULL"/>
      <inline>
        <comment value="Limit the token finding to between this and the next delimiter comment." line="106"/>
      </inline>
    </method>
  </parent>
</class>
