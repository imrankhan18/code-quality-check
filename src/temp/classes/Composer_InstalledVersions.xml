<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Composer\InstalledVersions" namespace="Composer" name="InstalledVersions" abstract="false" final="false" start="27" end="352">
  <file path="//var/www/html/vendor/composer" file="InstalledVersions.php" realpath="/var/www/html/vendor/composer/InstalledVersions.php" size="15004" time="2022-04-12T11:26:59+00:00" unixtime="1649762819" sha1="22df752e7fbef75dedde8f23ffab4c554d01cb72" relative="ar/www/html/vendor/composer/InstalledVersions.php"/>
  <docblock>
    <description compact="This class is copied in every Composer installed project and available to all">See also https://getcomposer.org/doc/07-runtime.md#installed-versions

To require its presence, you can require `composer-runtime-api ^2.0`</description>
    <final/>
  </docblock>
  <member name="installed" visibility="private" static="true" line="33">
    <docblock>
      <description/>
      <var type="array" of="object">
        <type full="Composer\mixed[]|nu" namespace="Composer" name="mixed[]|nu"/>
      </var>
      <psalm value="-var array{root: array{name: string, version: string, reference: string, pretty_version: string, aliases: string[], dev: bool, install_path: string, type: string}, versions: array&lt;string, array{dev_requirement: bool, pretty_version?: string, version?: string, aliases?: string[], reference?: string, replaced?: string[], provided?: string[], install_path?: string, type?: string}&gt;}|array{}|null"/>
    </docblock>
  </member>
  <member name="canGetVendors" visibility="private" static="true" line="38">
    <docblock>
      <description/>
      <var type="object">
        <type full="Composer\bool|null" namespace="Composer" name="bool|null"/>
      </var>
    </docblock>
  </member>
  <member name="installedByVendor" default="" type="array" visibility="private" static="true" line="44">
    <docblock>
      <description/>
      <var type="array" of="object">
        <type full="Composer\array" namespace="Composer" name="array"/>
      </var>
      <psalm value="-var array&lt;string, array{root: array{name: string, version: string, reference: string, pretty_version: string, aliases: string[], dev: bool, install_path: string, type: string}, versions: array&lt;string, array{dev_requirement: bool, pretty_version?: string, version?: string, aliases?: string[], reference?: string, replaced?: string[], provided?: string[], install_path?: string, type?: string}&gt;}&gt;"/>
    </docblock>
  </member>
  <method name="getInstalledPackages" start="52" end="64" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a list of all package names which are present, either by being installed, replaced or provided"/>
      <return type="array" of="object">
        <type full="Composer\string" namespace="Composer" name="string"/>
      </return>
      <psalm value="-return list&lt;string&gt;"/>
    </docblock>
  </method>
  <method name="getInstalledPackagesByType" start="73" end="86" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a list of all package names with a specific type e.g. 'library'"/>
      <param type="string" variable="$type"/>
      <return type="array" of="object">
        <type full="Composer\string" namespace="Composer" name="string"/>
      </return>
      <psalm value="-return list&lt;string&gt;"/>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}"/>
  </method>
  <method name="isInstalled" start="97" end="106" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks whether the given package is installed">This also returns true if the package name is provided or replaced by another package</description>
      <param type="string" variable="$packageName"/>
      <param type="object" variable="$includeDevRequirements">
        <type full="Composer\bool" namespace="Composer" name="bool"/>
      </param>
      <return type="object">
        <type full="Composer\bool" namespace="Composer" name="bool"/>
      </return>
    </docblock>
    <parameter name="packageName" byreference="false" type="{unknown}"/>
    <parameter name="includeDevRequirements" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="satisfies" start="120" end="126" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks whether the given package satisfies a version constraint">e.g. If you want to know whether version 2.3+ of package foo/bar is installed, you would call:

  Composer\InstalledVersions::satisfies(new VersionParser, 'foo/bar', '^2.3')</description>
      <param description="Install composer/semver to have access to this class and functionality" type="object" variable="$parser">
        <type full="Composer\Semver\VersionParser" namespace="Composer\Semver" name="VersionParser"/>
      </param>
      <param type="string" variable="$packageName"/>
      <param description="A version constraint to check for, if you pass one you have to make sure composer/semver is required by your package" type="object" variable="$constraint">
        <type full="Composer\string|null" namespace="Composer" name="string|null"/>
      </param>
      <return type="object">
        <type full="Composer\bool" namespace="Composer" name="bool"/>
      </return>
    </docblock>
    <parameter name="parser" byreference="false" type="object">
      <type full="Composer\Semver\VersionParser" namespace="Composer\Semver" name="VersionParser"/>
    </parameter>
    <parameter name="packageName" byreference="false" type="{unknown}"/>
    <parameter name="constraint" byreference="false" type="{unknown}"/>
  </method>
  <method name="getVersionRanges" start="137" end="162" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a version constraint representing all the range(s) which are installed for a given package">It is easier to use this via isInstalled() with the $constraint argument if you need to check
whether a given version of a package is installed, and not just whether it exists</description>
      <param type="string" variable="$packageName"/>
      <return description="Version constraint usable with composer/semver" type="string"/>
    </docblock>
    <parameter name="packageName" byreference="false" type="{unknown}"/>
  </method>
  <method name="getVersion" start="168" end="183" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <param type="string" variable="$packageName"/>
      <return description="If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present" type="object">
        <type full="Composer\string|null" namespace="Composer" name="string|null"/>
      </return>
    </docblock>
    <parameter name="packageName" byreference="false" type="{unknown}"/>
  </method>
  <method name="getPrettyVersion" start="189" end="204" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <param type="string" variable="$packageName"/>
      <return description="If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present" type="object">
        <type full="Composer\string|null" namespace="Composer" name="string|null"/>
      </return>
    </docblock>
    <parameter name="packageName" byreference="false" type="{unknown}"/>
  </method>
  <method name="getReference" start="210" end="225" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <param type="string" variable="$packageName"/>
      <return description="If the package is being replaced or provided but is not really installed, null will be returned as reference" type="object">
        <type full="Composer\string|null" namespace="Composer" name="string|null"/>
      </return>
    </docblock>
    <parameter name="packageName" byreference="false" type="{unknown}"/>
  </method>
  <method name="getInstallPath" start="231" end="242" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <param type="string" variable="$packageName"/>
      <return description="If the package is being replaced or provided but is not really installed, null will be returned as install path. Packages of type metapackages also have a null install path." type="object">
        <type full="Composer\string|null" namespace="Composer" name="string|null"/>
      </return>
    </docblock>
    <parameter name="packageName" byreference="false" type="{unknown}"/>
  </method>
  <method name="getRootPackage" start="248" end="253" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <return type="array"/>
      <psalm value="-return array{name: string, version: string, reference: string, pretty_version: string, aliases: string[], dev: bool, install_path: string, type: string}"/>
    </docblock>
  </method>
  <method name="getRawData" start="262" end="277" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the raw installed.php data for custom implementations"/>
      <deprecated value="Use getAllRawData() instead which returns all datasets for all autoloaders present in the process. getRawData only returns the first dataset loaded, which may not be what you expect."/>
      <return type="array" of="object">
        <type full="Composer\array" namespace="Composer" name="array"/>
      </return>
      <psalm value="-return array{root: array{name: string, version: string, reference: string, pretty_version: string, aliases: string[], dev: bool, install_path: string, type: string}, versions: array&lt;string, array{dev_requirement: bool, pretty_version?: string, version?: string, aliases?: string[], reference?: string, replaced?: string[], provided?: string[], install_path?: string, type?: string}&gt;}"/>
    </docblock>
  </method>
  <method name="getAllRawData" start="285" end="288" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the raw data of all installed.php which are currently loaded for custom implementations"/>
      <return type="array" of="object">
        <type full="Composer\array" namespace="Composer" name="array"/>
      </return>
      <psalm value="-return list&lt;array{root: array{name: string, version: string, reference: string, pretty_version: string, aliases: string[], dev: bool, install_path: string, type: string}, versions: array&lt;string, array{dev_requirement: bool, pretty_version?: string, version?: string, aliases?: string[], reference?: string, replaced?: string[], provided?: string[], install_path?: string, type?: string}&gt;}&gt;"/>
    </docblock>
  </method>
  <method name="reload" start="308" end="312" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Lets you reload the static array from another file">This is only useful for complex integrations in which a project needs to use
this class but then also needs to execute another project's autoloader in process,
and wants to ensure both projects have access to their version of installed.php.

A typical case would be PHPUnit, where it would need to make sure it reads all
the data it needs from this class, then call reload() with
`require $CWD/vendor/composer/installed.php` (or similar) as input to make sure
the project in which it runs can then also use this class safely, without
interference between PHPUnit's dependencies and the project's dependencies.</description>
      <param description="A vendor/composer/installed.php data set" type="array" variable="$data" of="object">
        <type full="Composer\array" namespace="Composer" name="array"/>
      </param>
      <return type="object">
        <type full="Composer\void" namespace="Composer" name="void"/>
      </return>
      <psalm value="-param array{root: array{name: string, version: string, reference: string, pretty_version: string, aliases: string[], dev: bool, install_path: string, type: string}, versions: array&lt;string, array{dev_requirement: bool, pretty_version?: string, version?: string, aliases?: string[], reference?: string, replaced?: string[], provided?: string[], install_path?: string, type?: string}&gt;} $data"/>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
  </method>
  <method name="getInstalled" start="318" end="351" abstract="false" final="false" static="true" visibility="private">
    <docblock>
      <description/>
      <return type="array" of="object">
        <type full="Composer\array" namespace="Composer" name="array"/>
      </return>
      <psalm value="-return list&lt;array{root: array{name: string, version: string, reference: string, pretty_version: string, aliases: string[], dev: bool, install_path: string, type: string}, versions: array&lt;string, array{dev_requirement: bool, pretty_version?: string, version?: string, aliases?: string[], reference?: string, replaced?: string[], provided?: string[], install_path?: string, type?: string}&gt;}&gt;"/>
    </docblock>
  </method>
</class>
