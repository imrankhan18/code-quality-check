<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="GuzzleHttp\Promise\Promise" namespace="GuzzleHttp\Promise" name="Promise" abstract="false" final="false" start="10" end="278">
  <file path="//var/www/html/vendor/guzzlehttp/promises/src" file="Promise.php" realpath="/var/www/html/vendor/guzzlehttp/promises/src/Promise.php" size="8944" time="2021-10-22T20:56:57+00:00" unixtime="1634936217" sha1="25466693d31173d1aa848161d3ff53f79eaa61a1" relative="ar/www/html/vendor/guzzlehttp/promises/src/Promise.php"/>
  <docblock>
    <description compact="Promises/A+ implementation that avoids recursion when possible."/>
    <link value="https://promisesaplus.com/"/>
  </docblock>
  <implements full="GuzzleHttp\Promise\PromiseInterface" namespace="GuzzleHttp\Promise" name="PromiseInterface"/>
  <member name="state" default="" type="{unknown}" constant="self::PENDING" visibility="private" static="false" line="12"/>
  <member name="result" visibility="private" static="false" line="13"/>
  <member name="cancelFn" visibility="private" static="false" line="14"/>
  <member name="waitFn" visibility="private" static="false" line="15"/>
  <member name="waitList" visibility="private" static="false" line="16"/>
  <member name="handlers" default="" type="array" visibility="private" static="false" line="17"/>
  <constructor name="__construct" start="23" end="29" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param description="Fn that when invoked resolves the promise." type="object" variable="$waitFn">
        <type full="GuzzleHttp\Promise\callable" namespace="GuzzleHttp\Promise" name="callable"/>
      </param>
      <param description="Fn that when invoked cancels the promise." type="object" variable="$cancelFn">
        <type full="GuzzleHttp\Promise\callable" namespace="GuzzleHttp\Promise" name="callable"/>
      </param>
    </docblock>
    <parameter name="waitFn" byreference="false" type="callable" default="NULL"/>
    <parameter name="cancelFn" byreference="false" type="callable" default="NULL"/>
  </constructor>
  <method name="then" start="31" end="53" abstract="false" final="false" static="false" visibility="public">
    <parameter name="onFulfilled" byreference="false" type="callable" default="NULL"/>
    <parameter name="onRejected" byreference="false" type="callable" default="NULL"/>
    <inline>
      <comment value="Return a fulfilled promise and immediately invoke any callbacks." line="43"/>
      <comment value="It's either cancelled or rejected, so return a rejected promise" line="49"/>
      <comment value="and immediately invoke any callbacks." line="50"/>
    </inline>
  </method>
  <method name="otherwise" start="55" end="58" abstract="false" final="false" static="false" visibility="public">
    <parameter name="onRejected" byreference="false" type="callable"/>
  </method>
  <method name="wait" start="60" end="74" abstract="false" final="false" static="false" visibility="public">
    <parameter name="unwrap" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="getState" start="76" end="79" abstract="false" final="false" static="false" visibility="public"/>
  <method name="cancel" start="81" end="106" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="Reject the promise only if it wasn't rejected in a then callback." line="101"/>
      <comment value="@psalm-suppress RedundantCondition" line="102"/>
    </inline>
  </method>
  <method name="resolve" start="108" end="111" abstract="false" final="false" static="false" visibility="public">
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="reject" start="113" end="116" abstract="false" final="false" static="false" visibility="public">
    <parameter name="reason" byreference="false" type="{unknown}"/>
  </method>
  <method name="settle" start="118" end="174" abstract="false" final="false" static="false" visibility="private">
    <parameter name="state" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Clear out the state of the promise but stash the handlers." line="134"/>
      <comment value="If the value was not a settled promise or a thenable, then resolve" line="146"/>
      <comment value="it in the task queue using the correct ID." line="147"/>
    </inline>
  </method>
  <method name="callHandler" start="183" end="217" abstract="false" final="false" static="true" visibility="private">
    <docblock>
      <description compact="Call a stack of handlers using a specific callback index and value."/>
      <param description="1 (resolve) or 2 (reject)." type="int" variable="$index"/>
      <param description="Value to pass to the callback." type="mixed" variable="$value"/>
      <param description="Array of handler data (promise and callbacks)." type="array" variable="$handler"/>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="handler" byreference="false" type="array"/>
    <inline>
      <comment value="The promise may have been cancelled or resolved before placing" line="188"/>
      <comment value="this thunk in the queue." line="189"/>
    </inline>
  </method>
  <method name="waitIfPending" start="219" end="241" abstract="false" final="false" static="false" visibility="private">
    <inline>
      <comment value="@psalm-suppress RedundantCondition" line="237"/>
    </inline>
  </method>
  <method name="invokeWaitFn" start="243" end="260" abstract="false" final="false" static="false" visibility="private"/>
  <method name="invokeWaitList" start="262" end="277" abstract="false" final="false" static="false" visibility="private"/>
  <interface full="GuzzleHttp\Promise\PromiseInterface" namespace="GuzzleHttp\Promise" name="PromiseInterface">
    <constant type="{unknown}" name="PENDING" value="'pending'"/>
    <constant type="{unknown}" name="FULFILLED" value="'fulfilled'"/>
    <constant type="{unknown}" name="REJECTED" value="'rejected'"/>
    <method name="then" start="29" end="32" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Appends fulfillment and rejection handlers to the promise, and returns a new promise resolving to the return value of the called handler."/>
        <param description="Invoked when the promise fulfills." type="object" variable="$onFulfilled">
          <type full="GuzzleHttp\Promise\callable" namespace="GuzzleHttp\Promise" name="callable"/>
        </param>
        <param description="Invoked when the promise is rejected." type="object" variable="$onRejected">
          <type full="GuzzleHttp\Promise\callable" namespace="GuzzleHttp\Promise" name="callable"/>
        </param>
        <return type="object">
          <type full="GuzzleHttp\Promise\PromiseInterface" namespace="GuzzleHttp\Promise" name="PromiseInterface"/>
        </return>
      </docblock>
      <parameter name="onFulfilled" byreference="false" type="callable" default="NULL"/>
      <parameter name="onRejected" byreference="false" type="callable" default="NULL"/>
    </method>
    <method name="otherwise" start="44" end="44" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Appends a rejection handler callback to the promise, and returns a new promise resolving to the return value of the callback if it is called, or to its original fulfillment value if the promise is instead fulfilled."/>
        <param description="Invoked when the promise is rejected." type="object" variable="$onRejected">
          <type full="GuzzleHttp\Promise\callable" namespace="GuzzleHttp\Promise" name="callable"/>
        </param>
        <return type="object">
          <type full="GuzzleHttp\Promise\PromiseInterface" namespace="GuzzleHttp\Promise" name="PromiseInterface"/>
        </return>
      </docblock>
      <parameter name="onRejected" byreference="false" type="callable"/>
    </method>
    <method name="getState" start="54" end="54" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the state of the promise (&quot;pending&quot;, &quot;rejected&quot;, or &quot;fulfilled&quot;).">The three states can be checked against the constants defined on
PromiseInterface: PENDING, FULFILLED, and REJECTED.</description>
        <return type="string"/>
      </docblock>
    </method>
    <method name="resolve" start="63" end="63" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Resolve the promise with the given value."/>
        <param type="mixed" variable="$value"/>
        <throws description="if the promise is already resolved." type="object">
          <type full="\RuntimeException" namespace="" name="RuntimeException"/>
        </throws>
      </docblock>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="reject" start="72" end="72" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Reject the promise with the given reason."/>
        <param type="mixed" variable="$reason"/>
        <throws description="if the promise is already resolved." type="object">
          <type full="\RuntimeException" namespace="" name="RuntimeException"/>
        </throws>
      </docblock>
      <parameter name="reason" byreference="false" type="{unknown}"/>
    </method>
    <method name="cancel" start="79" end="79" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Cancels the promise if possible."/>
        <link value="https://github.com/promises-aplus/cancellation-spec/issues/7"/>
      </docblock>
    </method>
    <method name="wait" start="96" end="96" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Waits until the promise completes if possible.">Pass $unwrap as true to unwrap the result of the promise, either
returning the resolved value or throwing the rejected exception.

If the promise cannot be waited on, then the promise will be rejected.</description>
        <param type="object" variable="$unwrap">
          <type full="GuzzleHttp\Promise\bool" namespace="GuzzleHttp\Promise" name="bool"/>
        </param>
        <return type="mixed"/>
        <throws description="if the promise has no wait function or if the" type="object">promise does not settle after waiting.<type full="\LogicException" namespace="" name="LogicException"/></throws>
      </docblock>
      <parameter name="unwrap" byreference="false" type="boolean" default="true"/>
    </method>
  </interface>
</class>
