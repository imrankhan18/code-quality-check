<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Composer\Downloader\SvnDownloader" namespace="Composer\Downloader" name="SvnDownloader" abstract="false" final="false" start="26" end="255">
  <file path="//var/www/html/vendor/composer/composer/src/Composer/Downloader" file="SvnDownloader.php" realpath="/var/www/html/vendor/composer/composer/src/Composer/Downloader/SvnDownloader.php" size="9153" time="2022-04-13T14:43:00+00:00" unixtime="1649860980" sha1="6fe400a9a078ac1d5514abf19c9d1da37a643da3" relative="ar/www/html/vendor/composer/composer/src/Composer/Downloader/SvnDownloader.php"/>
  <docblock>
    <description/>
    <author value="Ben Bieker &lt;mail@ben-bieker.de&gt;"/>
    <author value="Till Klampaeckel &lt;till@php.net&gt;"/>
  </docblock>
  <extends full="Composer\Downloader\VcsDownloader" namespace="Composer\Downloader" name="VcsDownloader"/>
  <member name="cacheCredentials" default="true" type="boolean" visibility="protected" static="false" line="29">
    <docblock>
      <var type="object">
        <type full="Composer\Downloader\bool" namespace="Composer\Downloader" name="bool"/>
      </var>
    </docblock>
  </member>
  <method name="doDownload" start="34" end="43" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description/>
      <inheritdoc/>
    </docblock>
    <return type="object" nullable="false">
      <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
    </return>
    <parameter name="package" byreference="false" type="object">
      <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
    </parameter>
    <parameter name="path" byreference="false" type="string"/>
    <parameter name="url" byreference="false" type="string"/>
    <parameter name="prevPackage" byreference="false" type="object" default="NULL">
      <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
    </parameter>
  </method>
  <method name="doInstall" start="48" end="65" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description/>
      <inheritdoc/>
    </docblock>
    <return type="object" nullable="false">
      <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
    </return>
    <parameter name="package" byreference="false" type="object">
      <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
    </parameter>
    <parameter name="path" byreference="false" type="string"/>
    <parameter name="url" byreference="false" type="string"/>
  </method>
  <method name="doUpdate" start="70" end="89" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description/>
      <inheritdoc/>
    </docblock>
    <return type="object" nullable="false">
      <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
    </return>
    <parameter name="initial" byreference="false" type="object">
      <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
    </parameter>
    <parameter name="target" byreference="false" type="object">
      <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
    </parameter>
    <parameter name="path" byreference="false" type="string"/>
    <parameter name="url" byreference="false" type="string"/>
  </method>
  <method name="getLocalChanges" start="94" end="103" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <inheritdoc/>
    </docblock>
    <return type="string" nullable="true"/>
    <parameter name="package" byreference="false" type="object">
      <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
    </parameter>
    <parameter name="path" byreference="false" type="string"/>
  </method>
  <method name="execute" start="117" end="128" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Execute an SVN command and try to fix up the process with credentials if necessary."/>
      <param description="Base URL of the repository" type="string" variable="$baseUrl"/>
      <param description="SVN command to run" type="string" variable="$command"/>
      <param description="SVN url" type="string" variable="$url"/>
      <param description="Working directory" type="string" variable="$cwd"/>
      <param description="Target for a checkout" type="string" variable="$path"/>
      <throws type="object">
        <type full="\RuntimeException" namespace="" name="RuntimeException"/>
      </throws>
      <return type="string"/>
    </docblock>
    <return type="string" nullable="false"/>
    <parameter name="package" byreference="false" type="object">
      <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
    </parameter>
    <parameter name="baseUrl" byreference="false" type="string"/>
    <parameter name="command" byreference="false" type="string"/>
    <parameter name="url" byreference="false" type="string"/>
    <parameter name="cwd" byreference="false" type="string" default="NULL"/>
    <parameter name="path" byreference="false" type="string" default="NULL"/>
  </method>
  <method name="cleanChanges" start="133" end="189" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description/>
      <inheritdoc/>
    </docblock>
    <return type="object" nullable="false">
      <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
    </return>
    <parameter name="package" byreference="false" type="object">
      <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
    </parameter>
    <parameter name="path" byreference="false" type="string"/>
    <parameter name="update" byreference="false" type="bool"/>
  </method>
  <method name="getCommitLogs" start="194" end="232" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description/>
      <inheritdoc/>
    </docblock>
    <return type="string" nullable="false"/>
    <parameter name="fromReference" byreference="false" type="string"/>
    <parameter name="toReference" byreference="false" type="string"/>
    <parameter name="path" byreference="false" type="string"/>
  </method>
  <method name="discardChanges" start="239" end="246" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description/>
      <param type="string" variable="$path"/>
      <return type="object">
        <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
      </return>
    </docblock>
    <return type="object" nullable="false">
      <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
    </return>
    <parameter name="path" byreference="false" type="string"/>
  </method>
  <method name="hasMetadataRepository" start="251" end="254" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description/>
      <inheritdoc/>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="path" byreference="false" type="string"/>
  </method>
  <parent full="Composer\Downloader\VcsDownloader" namespace="Composer\Downloader" name="VcsDownloader">
    <implements full="Composer\Downloader\DownloaderInterface" namespace="Composer\Downloader" name="DownloaderInterface"/>
    <implements full="Composer\Downloader\ChangeReportInterface" namespace="Composer\Downloader" name="ChangeReportInterface"/>
    <implements full="Composer\Downloader\VcsCapableDownloaderInterface" namespace="Composer\Downloader" name="VcsCapableDownloaderInterface"/>
    <member name="io" visibility="protected" static="false" line="34">
      <docblock>
        <var type="object">
          <type full="Composer\IO\IOInterface" namespace="Composer\IO" name="IOInterface"/>
        </var>
      </docblock>
    </member>
    <member name="config" visibility="protected" static="false" line="36">
      <docblock>
        <var type="object">
          <type full="Composer\Config" namespace="Composer" name="Config"/>
        </var>
      </docblock>
    </member>
    <member name="process" visibility="protected" static="false" line="38">
      <docblock>
        <var type="object">
          <type full="Composer\Util\ProcessExecutor" namespace="Composer\Util" name="ProcessExecutor"/>
        </var>
      </docblock>
    </member>
    <member name="filesystem" visibility="protected" static="false" line="40">
      <docblock>
        <var type="object">
          <type full="Composer\Util\Filesystem" namespace="Composer\Util" name="Filesystem"/>
        </var>
      </docblock>
    </member>
    <member name="hasCleanedChanges" default="" type="array" visibility="protected" static="false" line="42">
      <docblock>
        <var description="true&gt;" type="object">
          <type full="Composer\Downloader\array&lt;string" namespace="Composer\Downloader" name="array&lt;string"/>
        </var>
      </docblock>
    </member>
    <constructor name="__construct" start="44" end="50" abstract="false" final="false" static="false" visibility="public">
      <parameter name="io" byreference="false" type="object">
        <type full="Composer\IO\IOInterface" namespace="Composer\IO" name="IOInterface"/>
      </parameter>
      <parameter name="config" byreference="false" type="object">
        <type full="Composer\Config" namespace="Composer" name="Config"/>
      </parameter>
      <parameter name="process" byreference="false" type="object" default="NULL">
        <type full="Composer\Util\ProcessExecutor" namespace="Composer\Util" name="ProcessExecutor"/>
      </parameter>
      <parameter name="fs" byreference="false" type="object" default="NULL">
        <type full="Composer\Util\Filesystem" namespace="Composer\Util" name="Filesystem"/>
      </parameter>
    </constructor>
    <method name="getInstallationSource" start="55" end="58" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <inheritdoc/>
      </docblock>
      <return type="string" nullable="false"/>
    </method>
    <method name="download" start="63" end="91" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <inheritdoc/>
      </docblock>
      <return type="object" nullable="false">
        <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
      </return>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
      <parameter name="path" byreference="false" type="string"/>
      <parameter name="prevPackage" byreference="false" type="object" default="NULL">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
    </method>
    <method name="prepare" start="96" end="108" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <inheritdoc/>
      </docblock>
      <return type="object" nullable="false">
        <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
      </return>
      <parameter name="type" byreference="false" type="string"/>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
      <parameter name="path" byreference="false" type="string"/>
      <parameter name="prevPackage" byreference="false" type="object" default="NULL">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
    </method>
    <method name="cleanup" start="113" end="121" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <inheritdoc/>
      </docblock>
      <return type="object" nullable="false">
        <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
      </return>
      <parameter name="type" byreference="false" type="string"/>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
      <parameter name="path" byreference="false" type="string"/>
      <parameter name="prevPackage" byreference="false" type="object" default="NULL">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
    </method>
    <method name="install" start="126" end="156" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <inheritdoc/>
      </docblock>
      <return type="object" nullable="false">
        <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
      </return>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
      <parameter name="path" byreference="false" type="string"/>
    </method>
    <method name="update" start="161" end="220" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <inheritdoc/>
      </docblock>
      <return type="object" nullable="false">
        <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
      </return>
      <parameter name="initial" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
      <parameter name="target" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
      <parameter name="path" byreference="false" type="string"/>
      <inline>
        <comment value="print the commit logs if in verbose mode and VCS metadata is present" line="191"/>
        <comment value="because in case of missing metadata code would trigger another exception" line="192"/>
      </inline>
    </method>
    <method name="remove" start="225" end="236" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <inheritdoc/>
      </docblock>
      <return type="object" nullable="false">
        <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
      </return>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
      <parameter name="path" byreference="false" type="string"/>
    </method>
    <method name="getVcsReference" start="241" end="253" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <inheritdoc/>
      </docblock>
      <return type="string" nullable="true"/>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
      <parameter name="path" byreference="false" type="string"/>
    </method>
    <method name="cleanChanges" start="267" end="275" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Prompt the user to check if changes should be stashed/removed or the operation aborted"/>
        <param type="object" variable="$package">
          <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
        </param>
        <param type="string" variable="$path"/>
        <param description="if true (update) the changes can be stashed and reapplied after an update," type="object" variable="$update">if false (remove) the changes should be assumed to be lost if the operation is not aborted<type full="Composer\Downloader\bool" namespace="Composer\Downloader" name="bool"/></param>
        <return type="object">
          <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
        </return>
        <throws description="in case the operation must be aborted" type="object">
          <type full="\RuntimeException" namespace="" name="RuntimeException"/>
        </throws>
      </docblock>
      <return type="object" nullable="false">
        <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
      </return>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
      <parameter name="path" byreference="false" type="string"/>
      <parameter name="update" byreference="false" type="bool"/>
      <inline>
        <comment value="the default implementation just fails if there are any changes, override in child classes to provide stash-ability" line="269"/>
      </inline>
    </method>
    <method name="reapplyChanges" start="286" end="288" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Reapply previously stashes changes if applicable, only called after an update (regardless if successful or not)"/>
        <param type="string" variable="$path"/>
        <return type="object">
          <type full="Composer\Downloader\void" namespace="Composer\Downloader" name="void"/>
        </return>
        <throws description="in case the operation must be aborted or the patch does not apply cleanly" type="object">
          <type full="\RuntimeException" namespace="" name="RuntimeException"/>
        </throws>
      </docblock>
      <return type="void" nullable="false"/>
      <parameter name="path" byreference="false" type="string"/>
    </method>
    <method name="doDownload" start="300" end="300" abstract="true" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Downloads data needed to run an install/update later"/>
        <param description="package instance" type="object" variable="$package">
          <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
        </param>
        <param description="download path" type="string" variable="$path"/>
        <param description="package url" type="string" variable="$url"/>
        <param description="previous package (in case of an update)" type="object" variable="$prevPackage">
          <type full="Composer\Downloader\PackageInterface|null" namespace="Composer\Downloader" name="PackageInterface|null"/>
        </param>
        <return type="object">
          <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
        </return>
      </docblock>
      <return type="object" nullable="false">
        <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
      </return>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
      <parameter name="path" byreference="false" type="string"/>
      <parameter name="url" byreference="false" type="string"/>
      <parameter name="prevPackage" byreference="false" type="object" default="NULL">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
    </method>
    <method name="doInstall" start="311" end="311" abstract="true" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Downloads specific package into specific folder."/>
        <param description="package instance" type="object" variable="$package">
          <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
        </param>
        <param description="download path" type="string" variable="$path"/>
        <param description="package url" type="string" variable="$url"/>
        <return type="object">
          <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
        </return>
      </docblock>
      <return type="object" nullable="false">
        <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
      </return>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
      <parameter name="path" byreference="false" type="string"/>
      <parameter name="url" byreference="false" type="string"/>
    </method>
    <method name="doUpdate" start="323" end="323" abstract="true" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Updates specific package in specific folder from initial to target version."/>
        <param description="initial package" type="object" variable="$initial">
          <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
        </param>
        <param description="updated package" type="object" variable="$target">
          <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
        </param>
        <param description="download path" type="string" variable="$path"/>
        <param description="package url" type="string" variable="$url"/>
        <return type="object">
          <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
        </return>
      </docblock>
      <return type="object" nullable="false">
        <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
      </return>
      <parameter name="initial" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
      <parameter name="target" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
      <parameter name="path" byreference="false" type="string"/>
      <parameter name="url" byreference="false" type="string"/>
    </method>
    <method name="getCommitLogs" start="333" end="333" abstract="true" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Fetches the commit logs between two commits"/>
        <param description="the source reference" type="string" variable="$fromReference"/>
        <param description="the target reference" type="string" variable="$toReference"/>
        <param description="the package path" type="string" variable="$path"/>
        <return type="string"/>
      </docblock>
      <return type="string" nullable="false"/>
      <parameter name="fromReference" byreference="false" type="string"/>
      <parameter name="toReference" byreference="false" type="string"/>
      <parameter name="path" byreference="false" type="string"/>
    </method>
    <method name="hasMetadataRepository" start="342" end="342" abstract="true" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Checks if VCS metadata repository has been initialized repository example: .git|.svn|.hg"/>
        <param type="string" variable="$path"/>
        <return type="object">
          <type full="Composer\Downloader\bool" namespace="Composer\Downloader" name="bool"/>
        </return>
      </docblock>
      <return type="bool" nullable="false"/>
      <parameter name="path" byreference="false" type="string"/>
    </method>
  </parent>
  <interface full="Composer\Downloader\DownloaderInterface" namespace="Composer\Downloader" name="DownloaderInterface">
    <method name="getInstallationSource" start="31" end="31" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns installation source (either source or dist)."/>
        <return description="&quot;source&quot; or &quot;dist&quot;" type="string"/>
      </docblock>
      <return type="string" nullable="false"/>
    </method>
    <method name="download" start="39" end="39" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This should do any network-related tasks to prepare for an upcoming install/update"/>
        <param description="download path" type="string" variable="$path"/>
        <return type="object">
          <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
        </return>
      </docblock>
      <return type="object" nullable="false">
        <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
      </return>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
      <parameter name="path" byreference="false" type="string"/>
      <parameter name="prevPackage" byreference="false" type="object" default="NULL">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
    </method>
    <method name="prepare" start="55" end="55" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Do anything that needs to be done between all downloads have been completed and the actual operation is executed">All packages get first downloaded, then all together prepared, then all together installed/updated/uninstalled. Therefore
for error recovery it is important to avoid failing during install/update/uninstall as much as possible, and risky things or
user prompts should happen in the prepare step rather. In case of failure, cleanup() will be called so that changes can
be undone as much as possible.</description>
        <param description="one of install/update/uninstall" type="string" variable="$type"/>
        <param description="package instance" type="object" variable="$package">
          <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
        </param>
        <param description="download path" type="string" variable="$path"/>
        <param description="previous package instance in case of an update" type="object" variable="$prevPackage">
          <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
        </param>
        <return type="object">
          <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
        </return>
      </docblock>
      <return type="object" nullable="false">
        <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
      </return>
      <parameter name="type" byreference="false" type="string"/>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
      <parameter name="path" byreference="false" type="string"/>
      <parameter name="prevPackage" byreference="false" type="object" default="NULL">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
    </method>
    <method name="install" start="64" end="64" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Installs specific package into specific folder."/>
        <param description="package instance" type="object" variable="$package">
          <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
        </param>
        <param description="download path" type="string" variable="$path"/>
        <return type="object">
          <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
        </return>
      </docblock>
      <return type="object" nullable="false">
        <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
      </return>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
      <parameter name="path" byreference="false" type="string"/>
    </method>
    <method name="update" start="74" end="74" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Updates specific package in specific folder from initial to target version."/>
        <param description="initial package" type="object" variable="$initial">
          <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
        </param>
        <param description="updated package" type="object" variable="$target">
          <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
        </param>
        <param description="download path" type="string" variable="$path"/>
        <return type="object">
          <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
        </return>
      </docblock>
      <return type="object" nullable="false">
        <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
      </return>
      <parameter name="initial" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
      <parameter name="target" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
      <parameter name="path" byreference="false" type="string"/>
    </method>
    <method name="remove" start="83" end="83" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Removes specific package from specific folder."/>
        <param description="package instance" type="object" variable="$package">
          <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
        </param>
        <param description="download path" type="string" variable="$path"/>
        <return type="object">
          <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
        </return>
      </docblock>
      <return type="object" nullable="false">
        <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
      </return>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
      <parameter name="path" byreference="false" type="string"/>
    </method>
    <method name="cleanup" start="98" end="98" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Do anything to cleanup changes applied in the prepare or install/update/uninstall steps">Note that cleanup will be called for all packages, either after install/update/uninstall is complete,
or if any package failed any operation. This is to give all installers a change to cleanup things
they did previously, so you need to keep track of changes applied in the installer/downloader themselves.</description>
        <param description="one of install/update/uninstall" type="string" variable="$type"/>
        <param description="package instance" type="object" variable="$package">
          <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
        </param>
        <param description="download path" type="string" variable="$path"/>
        <param description="previous package instance in case of an update" type="object" variable="$prevPackage">
          <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
        </param>
        <return type="object">
          <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
        </return>
      </docblock>
      <return type="object" nullable="false">
        <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
      </return>
      <parameter name="type" byreference="false" type="string"/>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
      <parameter name="path" byreference="false" type="string"/>
      <parameter name="prevPackage" byreference="false" type="object" default="NULL">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
    </method>
  </interface>
  <interface full="Composer\Downloader\ChangeReportInterface" namespace="Composer\Downloader" name="ChangeReportInterface">
    <method name="getLocalChanges" start="31" end="31" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Checks for changes to the local copy"/>
        <param description="package instance" type="object" variable="$package">
          <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
        </param>
        <param description="package directory" type="string" variable="$path"/>
        <return description="changes or null" type="object">
          <type full="Composer\Downloader\string|null" namespace="Composer\Downloader" name="string|null"/>
        </return>
      </docblock>
      <return type="string" nullable="true"/>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
      <parameter name="path" byreference="false" type="string"/>
    </method>
  </interface>
  <interface full="Composer\Downloader\VcsCapableDownloaderInterface" namespace="Composer\Downloader" name="VcsCapableDownloaderInterface">
    <method name="getVcsReference" start="31" end="31" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Gets the VCS Reference for the package at path"/>
        <param description="package directory" type="object" variable="$package">
          <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
        </param>
        <param description="package directory" type="string" variable="$path"/>
        <return description="reference or null" type="object">
          <type full="Composer\Downloader\string|null" namespace="Composer\Downloader" name="string|null"/>
        </return>
      </docblock>
      <return type="string" nullable="true"/>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
      <parameter name="path" byreference="false" type="string"/>
    </method>
  </interface>
</class>
