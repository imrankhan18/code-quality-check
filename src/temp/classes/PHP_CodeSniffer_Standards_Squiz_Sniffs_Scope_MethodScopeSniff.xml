<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PHP_CodeSniffer\Standards\Squiz\Sniffs\Scope\MethodScopeSniff" namespace="PHP_CodeSniffer\Standards\Squiz\Sniffs\Scope" name="MethodScopeSniff" abstract="false" final="false" start="16" end="92">
  <file path="//var/www/html/vendor/squizlabs/php_codesniffer/src/Standards/Squiz/Sniffs/Scope" file="MethodScopeSniff.php" realpath="/var/www/html/vendor/squizlabs/php_codesniffer/src/Standards/Squiz/Sniffs/Scope/MethodScopeSniff.php" size="2775" time="2021-12-12T21:44:58+00:00" unixtime="1639345498" sha1="97f993dda88686716de0d85d0fbf9bb2bb5d210a" relative="ar/www/html/vendor/squizlabs/php_codesniffer/src/Standards/Squiz/Sniffs/Scope/MethodScopeSniff.php"/>
  <extends full="PHP_CodeSniffer\Sniffs\AbstractScopeSniff" namespace="PHP_CodeSniffer\Sniffs" name="AbstractScopeSniff"/>
  <constructor name="__construct" start="23" end="27" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Constructs a Squiz_Sniffs_Scope_MethodScopeSniff."/>
    </docblock>
  </constructor>
  <method name="processTokenWithinScope" start="39" end="73" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Processes the function tokens within the class."/>
      <param description="The file where this token was found." type="object" variable="$phpcsFile">
        <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
      </param>
      <param description="The position where the token was found." type="int" variable="$stackPtr"/>
      <param description="The current scope opener token." type="int" variable="$currScope"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Standards\Squiz\Sniffs\Scope\void" namespace="PHP_CodeSniffer\Standards\Squiz\Sniffs\Scope" name="void"/>
      </return>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    <parameter name="currScope" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Determine if this is a function which needs to be examined." line="43"/>
    </inline>
  </method>
  <method name="processTokenOutsideScope" start="86" end="89" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Processes a token that is found within the scope that this test is listening to."/>
      <param description="The file where this token was found." type="object" variable="$phpcsFile">
        <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
      </param>
      <param description="The position in the stack where this" type="int" variable="$stackPtr">token was found.</param>
      <return type="object">
        <type full="PHP_CodeSniffer\Standards\Squiz\Sniffs\Scope\void" namespace="PHP_CodeSniffer\Standards\Squiz\Sniffs\Scope" name="void"/>
      </return>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="stackPtr" byreference="false" type="{unknown}"/>
  </method>
  <parent full="PHP_CodeSniffer\Sniffs\AbstractScopeSniff" namespace="PHP_CodeSniffer\Sniffs" name="AbstractScopeSniff">
    <implements full="PHP_CodeSniffer\Sniffs\Sniff" namespace="PHP_CodeSniffer\Sniffs" name="Sniff"/>
    <constructor name="__construct" start="71" end="97" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Constructs a new AbstractScopeTest."/>
        <param description="The type of scope the test wishes to listen to." type="array" variable="$scopeTokens"/>
        <param description="The tokens that the test wishes to listen to" type="array" variable="$tokens">within the scope.</param>
        <param description="If true this test will also alert the" type="boolean" variable="$listenOutside">extending class when a token is found outside
                              the scope, by calling the
                              processTokenOutsideScope method.</param>
        <throws description="If the specified tokens arrays are empty" type="object">or invalid.<type full="\PHP_CodeSniffer\Exceptions\RuntimeException" namespace="\PHP_CodeSniffer\Exceptions" name="RuntimeException"/></throws>
      </docblock>
      <parameter name="scopeTokens" byreference="false" type="array"/>
      <parameter name="tokens" byreference="false" type="array"/>
      <parameter name="listenOutside" byreference="false" type="boolean" default="false"/>
    </constructor>
    <method name="register" start="110" end="114" abstract="false" final="true" static="false" visibility="public">
      <docblock>
        <description compact="The method that is called to register the tokens this test wishes to listen to.">DO NOT OVERRIDE THIS METHOD. Use the constructor of this class to register
for the desired tokens and scope.</description>
        <return type="array" of="object">
          <type full="PHP_CodeSniffer\Sniffs\int" namespace="PHP_CodeSniffer\Sniffs" name="int"/>
        </return>
        <see value="__constructor()"/>
      </docblock>
    </method>
    <method name="process" start="130" end="153" abstract="false" final="true" static="false" visibility="public">
      <docblock>
        <description compact="Processes the tokens that this test is listening for."/>
        <param description="The file where this token was found." type="object" variable="$phpcsFile">
          <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
        </param>
        <param description="The position in the stack where this" type="int" variable="$stackPtr">token was found.</param>
        <return description="Optionally returns a stack pointer. The sniff will not be" type="object">called again on the current file until the returned stack
                 pointer is reached. Return ($phpcsFile-&gt;numTokens + 1) to skip
                 the rest of the file.<type full="PHP_CodeSniffer\Sniffs\void|int" namespace="PHP_CodeSniffer\Sniffs" name="void|int"/></return>
        <see value="processTokenWithinScope()"/>
      </docblock>
      <parameter name="phpcsFile" byreference="false" type="object">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </parameter>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    </method>
    <method name="processTokenWithinScope" start="172" end="172" abstract="true" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Processes a token that is found within the scope that this test is listening to."/>
        <param description="The file where this token was found." type="object" variable="$phpcsFile">
          <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
        </param>
        <param description="The position in the stack where this" type="int" variable="$stackPtr">token was found.</param>
        <param description="The position in the tokens array that" type="int" variable="$currScope">opened the scope that this test is
                                              listening for.</param>
        <return description="Optionally returns a stack pointer. The sniff will not be" type="object">called again on the current file until the returned stack
                 pointer is reached. Return ($phpcsFile-&gt;numTokens + 1) to skip
                 the rest of the file.<type full="PHP_CodeSniffer\Sniffs\void|int" namespace="PHP_CodeSniffer\Sniffs" name="void|int"/></return>
      </docblock>
      <parameter name="phpcsFile" byreference="false" type="object">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </parameter>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
      <parameter name="currScope" byreference="false" type="{unknown}"/>
    </method>
    <method name="processTokenOutsideScope" start="188" end="188" abstract="true" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Processes a token that is found outside the scope that this test is listening to."/>
        <param description="The file where this token was found." type="object" variable="$phpcsFile">
          <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
        </param>
        <param description="The position in the stack where this" type="int" variable="$stackPtr">token was found.</param>
        <return description="Optionally returns a stack pointer. The sniff will not be" type="object">called again on the current file until the returned stack
                 pointer is reached. Return (count($tokens) + 1) to skip
                 the rest of the file.<type full="PHP_CodeSniffer\Sniffs\void|int" namespace="PHP_CodeSniffer\Sniffs" name="void|int"/></return>
      </docblock>
      <parameter name="phpcsFile" byreference="false" type="object">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </parameter>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    </method>
  </parent>
  <interface full="PHP_CodeSniffer\Sniffs\Sniff" namespace="PHP_CodeSniffer\Sniffs" name="Sniff">
    <method name="register" start="40" end="40" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Registers the tokens that this sniff wants to listen for.">An example return value for a sniff that wants to listen for whitespace
and any comments would be:

&lt;code&gt;
   return array(
           T_WHITESPACE,
           T_DOC_COMMENT,
           T_COMMENT,
          );
&lt;/code&gt;</description>
        <return type="array" of="object">
          <type full="PHP_CodeSniffer\Sniffs\mixed" namespace="PHP_CodeSniffer\Sniffs" name="mixed"/>
        </return>
        <see value="Tokens.php"/>
      </docblock>
    </method>
    <method name="process" start="77" end="77" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Called when one of the token types that this sniff is listening for is found.">The stackPtr variable indicates where in the stack the token was found.
A sniff can acquire information this token, along with all the other
tokens within the stack by first acquiring the token stack:

&lt;code&gt;
   $tokens = $phpcsFile-&gt;getTokens();
   echo 'Encountered a '.$tokens[$stackPtr]['type'].' token';
   echo 'token information: ';
   print_r($tokens[$stackPtr]);
&lt;/code&gt;

If the sniff discovers an anomaly in the code, they can raise an error
by calling addError() on the \PHP_CodeSniffer\Files\File object, specifying an error
message and the position of the offending token:

&lt;code&gt;
   $phpcsFile-&gt;addError('Encountered an error', $stackPtr);
&lt;/code&gt;</description>
        <param description="The PHP_CodeSniffer file where the" type="object" variable="$phpcsFile">token was found.<type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/></param>
        <param description="The position in the PHP_CodeSniffer" type="int" variable="$stackPtr">file's token stack where the token
                                              was found.</param>
        <return description="Optionally returns a stack pointer. The sniff will not be" type="object">called again on the current file until the returned stack
                 pointer is reached. Return (count($tokens) + 1) to skip
                 the rest of the file.<type full="PHP_CodeSniffer\Sniffs\void|int" namespace="PHP_CodeSniffer\Sniffs" name="void|int"/></return>
      </docblock>
      <parameter name="phpcsFile" byreference="false" type="object">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </parameter>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    </method>
  </interface>
</class>
