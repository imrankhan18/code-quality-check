<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PHP_CodeSniffer\Tests\Core\Tokenizer\BackfillFnTokenTest" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="BackfillFnTokenTest" abstract="false" final="false" start="14" end="802">
  <file path="//var/www/html/vendor/squizlabs/php_codesniffer/tests/Core/Tokenizer" file="BackfillFnTokenTest.php" realpath="/var/www/html/vendor/squizlabs/php_codesniffer/tests/Core/Tokenizer/BackfillFnTokenTest.php" size="29411" time="2021-12-12T21:44:58+00:00" unixtime="1639345498" sha1="909c73e4661beb3ac29b2f823a23cc31acd25e0e" relative="ar/www/html/vendor/squizlabs/php_codesniffer/tests/Core/Tokenizer/BackfillFnTokenTest.php"/>
  <extends full="PHP_CodeSniffer\Tests\Core\AbstractMethodUnitTest" namespace="PHP_CodeSniffer\Tests\Core" name="AbstractMethodUnitTest"/>
  <method name="testSimple" start="25" end="33" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test simple arrow functions."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testWhitespace" start="43" end="49" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test whitespace inside arrow function definitions."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testComment" start="59" end="65" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test comments inside arrow function definitions."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testHeredoc" start="75" end="81" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test heredocs inside arrow function definitions."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testNestedOuter" start="91" end="97" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test nested arrow functions."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testNestedInner" start="107" end="128" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test nested arrow functions."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testNestedSharedCloser" start="138" end="163" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test nested arrow functions with a shared closer."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testFunctionCall" start="173" end="179" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow functions that call functions."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testChainedFunctionCall" start="189" end="195" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow functions that are included in chained calls."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testFunctionArgument" start="205" end="211" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow functions that are used as function arguments."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testClosure" start="221" end="227" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow functions that use closures."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testArrayIndex" start="237" end="243" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow functions using an array index."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testReturnType" start="253" end="259" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow functions with a return type."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testReference" start="269" end="275" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow functions that return a reference."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testGrouped" start="285" end="291" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow functions that are grouped by parenthesis."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testArrayValue" start="301" end="307" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow functions that are used as array values."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testArrayValueNoTrailingComma" start="317" end="323" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow functions that are used as array values with no trailing comma."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testYield" start="333" end="339" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow functions that use the yield keyword."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testNullableNamespace" start="349" end="355" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow functions that use nullable namespace types."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testNamespaceOperatorInTypes" start="365" end="371" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow functions that use the namespace operator in the return type."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testKeywordReturnTypes" start="381" end="412" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow functions that use self/parent/callable/array/static return types."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testUnionParamType" start="422" end="428" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow function with a union parameter type."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testUnionReturnType" start="438" end="444" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow function with a union return type."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testTernary" start="454" end="496" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow functions used in ternary operators."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testTernaryWithTypes" start="506" end="514" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test typed arrow functions used in ternary operators."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testWithMatchValue" start="524" end="530" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow function returning a match control structure."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testWithMatchValueAndMore" start="540" end="546" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow function returning a match control structure with something behind it."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testInMatchValue" start="564" end="574" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test match control structure returning arrow functions."/>
      <param description="The comment prefacing the target token." type="string" variable="$testMarker"/>
      <param description="The expected offset of the scope opener in relation to the testMarker." type="int" variable="$openerOffset"/>
      <param description="The expected offset of the scope closer in relation to the testMarker." type="int" variable="$closerOffset"/>
      <param description="The type of token expected for the scope closer." type="string" variable="$expectedCloserType"/>
      <param description="A friendly name for the type of token expected for the scope closer" type="string" variable="$expectedCloserFriendlyName">to be used in the error message for failing tests.</param>
      <dataprovider value="dataInMatchValue"/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
    <parameter name="testMarker" byreference="false" type="{unknown}"/>
    <parameter name="openerOffset" byreference="false" type="{unknown}"/>
    <parameter name="closerOffset" byreference="false" type="{unknown}"/>
    <parameter name="expectedCloserType" byreference="false" type="{unknown}"/>
    <parameter name="expectedCloserFriendlyName" byreference="false" type="{unknown}"/>
  </method>
  <method name="dataInMatchValue" start="584" end="617" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Data provider."/>
      <see value="testInMatchValue()"/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="testNestedInMethod" start="627" end="633" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test arrow function nested within a method declaration."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testNotAnArrowFunction" start="648" end="664" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify that &quot;fn&quot; keywords which are not arrow functions get tokenized as T_STRING and don't have the extra token array indexes."/>
      <param description="The comment prefacing the target token." type="string" variable="$testMarker"/>
      <param description="The token content to look for." type="string" variable="$testContent"/>
      <dataprovider value="dataNotAnArrowFunction"/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
    <parameter name="testMarker" byreference="false" type="{unknown}"/>
    <parameter name="testContent" byreference="false" type="string" default="'fn'"/>
  </method>
  <method name="dataNotAnArrowFunction" start="674" end="715" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Data provider."/>
      <see value="testNotAnArrowFunction()"/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="backfillHelper" start="730" end="767" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Helper function to check that all token keys are correctly set for T_FN tokens."/>
      <param description="The T_FN token to check." type="int" variable="$token"/>
      <param description="Whether to skip the scope closer check." type="object" variable="$skipScopeCloserCheck">This should be set to "true" when testing nested arrow functions,
                                  where the "inner" arrow function shares a scope closer with the
                                  "outer" arrow function, as the 'scope_condition' for the scope closer
                                  of the "inner" arrow function will point to the "outer" arrow function.<type full="PHP_CodeSniffer\Tests\Core\Tokenizer\bool" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="bool"/></param>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
    <parameter name="token" byreference="false" type="{unknown}"/>
    <parameter name="skipScopeCloserCheck" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="scopePositionTestHelper" start="782" end="799" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Helper function to check that the scope opener/closer positions are correctly set for T_FN tokens."/>
      <param description="The T_FN token to check." type="int" variable="$token"/>
      <param description="The expected offset of the scope opener in relation to" type="int" variable="$openerOffset">the fn keyword.</param>
      <param description="The expected offset of the scope closer in relation to" type="int" variable="$closerOffset">the fn keyword.</param>
      <param description="Optional. The type of token expected for the scope closer." type="string" variable="$expectedCloserType"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
    <parameter name="token" byreference="false" type="{unknown}"/>
    <parameter name="openerOffset" byreference="false" type="{unknown}"/>
    <parameter name="closerOffset" byreference="false" type="{unknown}"/>
    <parameter name="expectedCloserType" byreference="false" type="string" default="'semicolon'"/>
  </method>
  <parent full="PHP_CodeSniffer\Tests\Core\AbstractMethodUnitTest" namespace="PHP_CodeSniffer\Tests\Core" name="AbstractMethodUnitTest">
    <extends full="PHPUnit\Framework\TestCase" namespace="PHPUnit\Framework" name="TestCase" unresolved="true"/>
    <member name="fileExtension" default="'inc'" type="string" visibility="protected" static="true" line="28">
      <docblock>
        <description compact="The file extension of the test case file (without leading dot).">This allows child classes to overrule the default `inc` with, for instance,
`js` or `css` when applicable.</description>
        <var type="string"/>
      </docblock>
    </member>
    <member name="phpcsFile" visibility="protected" static="true" line="35">
      <docblock>
        <description compact="The \PHP_CodeSniffer\Files\File object containing the parsed contents of the test case file."/>
        <var type="object">
          <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
        </var>
      </docblock>
    </member>
    <method name="setUpBeforeClass" start="46" end="65" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Initialize &amp; tokenize \PHP_CodeSniffer\Files\File with code from the test case file.">The test case file for a unit test class has to be in the same directory
directory and use the same file name as the test class, using the .inc extension.</description>
        <return type="object">
          <type full="PHP_CodeSniffer\Tests\Core\void" namespace="PHP_CodeSniffer\Tests\Core" name="void"/>
        </return>
      </docblock>
      <inline>
        <comment value="Default to a file with the same name as the test class. Extension is property based." line="53"/>
        <comment value="Make sure the file gets parsed correctly based on the file type." line="58"/>
      </inline>
    </method>
    <method name="tearDownAfterClass" start="73" end="77" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Clean up after finished test."/>
        <return type="object">
          <type full="PHP_CodeSniffer\Tests\Core\void" namespace="PHP_CodeSniffer\Tests\Core" name="void"/>
        </return>
      </docblock>
    </method>
    <method name="getTargetToken" start="92" end="137" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the token pointer for a target token based on a specific comment found on the line before.">Note: the test delimiter comment MUST start with "/* test" to allow this function to
distinguish between comments used *in* a test and test delimiters.</description>
        <param description="The delimiter comment to look for." type="string" variable="$commentString"/>
        <param description="The type of token(s) to look for." type="object" variable="$tokenType">
          <type full="PHP_CodeSniffer\Tests\Core\int|string|array" namespace="PHP_CodeSniffer\Tests\Core" name="int|string|array"/>
        </param>
        <param description="Optional. The token content for the target token." type="string" variable="$tokenContent"/>
        <return type="int"/>
      </docblock>
      <parameter name="commentString" byreference="false" type="{unknown}"/>
      <parameter name="tokenType" byreference="false" type="{unknown}"/>
      <parameter name="tokenContent" byreference="false" type="{unknown}" default="NULL"/>
      <inline>
        <comment value="Limit the token finding to between this and the next delimiter comment." line="106"/>
      </inline>
    </method>
  </parent>
</class>
