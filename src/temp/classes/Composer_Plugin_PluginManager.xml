<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Composer\Plugin\PluginManager" namespace="Composer\Plugin" name="PluginManager" abstract="false" final="false" start="40" end="766">
  <file path="//var/www/html/vendor/composer/composer/src/Composer/Plugin" file="PluginManager.php" realpath="/var/www/html/vendor/composer/composer/src/Composer/Plugin/PluginManager.php" size="32297" time="2022-04-13T14:43:00+00:00" unixtime="1649860980" sha1="03d12d6930b055d5cd522952c79f7dd2ac4c683c" relative="ar/www/html/vendor/composer/composer/src/Composer/Plugin/PluginManager.php"/>
  <docblock>
    <description compact="Plugin manager"/>
    <author value="Nils Adermann &lt;naderman@naderman.de&gt;"/>
    <author value="Jordi Boggiano &lt;j.boggiano@seld.be&gt;"/>
  </docblock>
  <member name="composer" visibility="protected" static="false" line="43">
    <docblock>
      <var type="object">
        <type full="Composer\Composer" namespace="Composer" name="Composer"/>
      </var>
    </docblock>
  </member>
  <member name="io" visibility="protected" static="false" line="45">
    <docblock>
      <var type="object">
        <type full="Composer\IO\IOInterface" namespace="Composer\IO" name="IOInterface"/>
      </var>
    </docblock>
  </member>
  <member name="globalComposer" visibility="protected" static="false" line="47">
    <docblock>
      <var type="object">
        <type full="Composer\Plugin\PartialComposer|null" namespace="Composer\Plugin" name="PartialComposer|null"/>
      </var>
    </docblock>
  </member>
  <member name="versionParser" visibility="protected" static="false" line="49">
    <docblock>
      <var type="object">
        <type full="Composer\Package\Version\VersionParser" namespace="Composer\Package\Version" name="VersionParser"/>
      </var>
    </docblock>
  </member>
  <member name="disablePlugins" default="false" type="boolean" visibility="protected" static="false" line="51">
    <docblock>
      <var type="object">
        <type full="Composer\Plugin\bool" namespace="Composer\Plugin" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="plugins" default="" type="array" visibility="protected" static="false" line="54">
    <docblock>
      <var type="object">
        <type full="Composer\Plugin\array&lt;PluginInterface&gt;" namespace="Composer\Plugin" name="array&lt;PluginInterface&gt;"/>
      </var>
    </docblock>
  </member>
  <member name="registeredPlugins" default="" type="array" visibility="protected" static="false" line="56">
    <docblock>
      <var description="PluginInterface|InstallerInterface&gt;" type="object">
        <type full="Composer\Plugin\array&lt;string" namespace="Composer\Plugin" name="array&lt;string"/>
      </var>
    </docblock>
  </member>
  <member name="allowPluginRules" visibility="private" static="false" line="61">
    <docblock>
      <description/>
      <var description="bool&gt;|null" type="object">
        <type full="Composer\Plugin\array&lt;non-empty-string" namespace="Composer\Plugin" name="array&lt;non-empty-string"/>
      </var>
    </docblock>
  </member>
  <member name="allowGlobalPluginRules" visibility="private" static="false" line="66">
    <docblock>
      <description/>
      <var description="bool&gt;|null" type="object">
        <type full="Composer\Plugin\array&lt;non-empty-string" namespace="Composer\Plugin" name="array&lt;non-empty-string"/>
      </var>
    </docblock>
  </member>
  <member name="classCounter" default="0" type="integer" visibility="private" static="true" line="69">
    <docblock>
      <var type="int"/>
    </docblock>
  </member>
  <constructor name="__construct" start="71" end="81" abstract="false" final="false" static="false" visibility="public">
    <parameter name="io" byreference="false" type="object">
      <type full="Composer\IO\IOInterface" namespace="Composer\IO" name="IOInterface"/>
    </parameter>
    <parameter name="composer" byreference="false" type="object">
      <type full="Composer\Composer" namespace="Composer" name="Composer"/>
    </parameter>
    <parameter name="globalComposer" byreference="false" type="object" default="NULL">
      <type full="Composer\PartialComposer" namespace="Composer" name="PartialComposer"/>
    </parameter>
    <parameter name="disablePlugins" byreference="false" type="boolean" default="false"/>
  </constructor>
  <method name="loadInstalledPlugins" start="88" end="100" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Loads all plugins from currently installed plugin packages"/>
      <return type="object">
        <type full="Composer\Plugin\void" namespace="Composer\Plugin" name="void"/>
      </return>
    </docblock>
    <return type="void" nullable="false"/>
  </method>
  <method name="deactivateInstalledPlugins" start="107" end="118" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Deactivate all plugins from currently installed plugin packages"/>
      <return type="object">
        <type full="Composer\Plugin\void" namespace="Composer\Plugin" name="void"/>
      </return>
    </docblock>
    <return type="void" nullable="false"/>
  </method>
  <method name="getPlugins" start="125" end="128" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets all currently active plugin instances"/>
      <return description="plugins" type="object">
        <type full="Composer\Plugin\array&lt;PluginInterface&gt;" namespace="Composer\Plugin" name="array&lt;PluginInterface&gt;"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
  </method>
  <method name="getGlobalComposer" start="133" end="136" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets global composer or null when main composer is not fully loaded"/>
    </docblock>
    <return type="object" nullable="true">
      <type full="Composer\PartialComposer" namespace="Composer" name="PartialComposer"/>
    </return>
  </method>
  <method name="registerPackage" start="152" end="297" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Register a plugin package, activate it etc.">If it's of type composer-installer it is registered as an installer
instead for BC</description>
      <param type="object" variable="$package">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </param>
      <param description="By default this silently skips plugins that can not be found, but if set to true it fails with an exception" type="object" variable="$failOnMissingClasses">
        <type full="Composer\Plugin\bool" namespace="Composer\Plugin" name="bool"/>
      </param>
      <param description="Set to true to denote plugins which are installed in the global Composer directory" type="object" variable="$isGlobalPlugin">
        <type full="Composer\Plugin\bool" namespace="Composer\Plugin" name="bool"/>
      </param>
      <return type="object">
        <type full="Composer\Plugin\void" namespace="Composer\Plugin" name="void"/>
      </return>
      <throws type="object">
        <type full="\UnexpectedValueException" namespace="" name="UnexpectedValueException"/>
      </throws>
    </docblock>
    <return type="void" nullable="false"/>
    <parameter name="package" byreference="false" type="object">
      <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
    </parameter>
    <parameter name="failOnMissingClasses" byreference="false" type="boolean" default="false"/>
    <parameter name="isGlobalPlugin" byreference="false" type="boolean" default="false"/>
    <inline>
      <comment value="clear files autoload rules from the root package as the root dependencies are not" line="212"/>
      <comment value="necessarily all present yet when booting this runtime autoloader" line="213"/>
    </inline>
  </method>
  <method name="deactivatePackage" start="311" end="328" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Deactivates a plugin package">If it's of type composer-installer it is unregistered from the installers
instead for BC</description>
      <param type="object" variable="$package">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </param>
      <return type="object">
        <type full="Composer\Plugin\void" namespace="Composer\Plugin" name="void"/>
      </return>
      <throws type="object">
        <type full="\UnexpectedValueException" namespace="" name="UnexpectedValueException"/>
      </throws>
    </docblock>
    <return type="void" nullable="false"/>
    <parameter name="package" byreference="false" type="object">
      <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
    </parameter>
  </method>
  <method name="uninstallPackage" start="342" end="360" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Uninstall a plugin package">If it's of type composer-installer it is unregistered from the installers
instead for BC</description>
      <param type="object" variable="$package">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </param>
      <return type="object">
        <type full="Composer\Plugin\void" namespace="Composer\Plugin" name="void"/>
      </return>
      <throws type="object">
        <type full="\UnexpectedValueException" namespace="" name="UnexpectedValueException"/>
      </throws>
    </docblock>
    <return type="void" nullable="false"/>
    <parameter name="package" byreference="false" type="object">
      <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
    </parameter>
  </method>
  <method name="getPluginApiVersion" start="367" end="370" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Returns the version of the internal composer-plugin-api package."/>
      <return type="string"/>
    </docblock>
    <return type="string" nullable="false"/>
  </method>
  <method name="addPlugin" start="385" end="409" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds a plugin, activates it and registers it with the event dispatcher">Ideally plugin packages should be registered via registerPackage, but if you use Composer
programmatically and want to register a plugin class directly this is a valid way
to do it.</description>
      <param description="plugin instance" type="object" variable="$plugin">
        <type full="Composer\Plugin\PluginInterface" namespace="Composer\Plugin" name="PluginInterface"/>
      </param>
      <param type="object" variable="$isGlobalPlugin">
        <type full="Composer\Plugin\bool" namespace="Composer\Plugin" name="bool"/>
      </param>
      <param description="Package from which the plugin comes from" type="object" variable="$sourcePackage">
        <type full="Composer\Plugin\?PackageInterface" namespace="Composer\Plugin" name="?PackageInterface"/>
      </param>
      <return type="object">
        <type full="Composer\Plugin\void" namespace="Composer\Plugin" name="void"/>
      </return>
    </docblock>
    <return type="void" nullable="false"/>
    <parameter name="plugin" byreference="false" type="object">
      <type full="Composer\Plugin\PluginInterface" namespace="Composer\Plugin" name="PluginInterface"/>
    </parameter>
    <parameter name="isGlobalPlugin" byreference="false" type="boolean" default="false"/>
    <parameter name="sourcePackage" byreference="false" type="object" default="NULL">
      <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
    </parameter>
  </method>
  <method name="removePlugin" start="422" end="434" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Removes a plugin, deactivates it and removes any listener the plugin has set on the plugin instance">Ideally plugin packages should be deactivated via deactivatePackage, but if you use Composer
programmatically and want to deregister a plugin class directly this is a valid way
to do it.</description>
      <param description="plugin instance" type="object" variable="$plugin">
        <type full="Composer\Plugin\PluginInterface" namespace="Composer\Plugin" name="PluginInterface"/>
      </param>
      <return type="object">
        <type full="Composer\Plugin\void" namespace="Composer\Plugin" name="void"/>
      </return>
    </docblock>
    <return type="void" nullable="false"/>
    <parameter name="plugin" byreference="false" type="object">
      <type full="Composer\Plugin\PluginInterface" namespace="Composer\Plugin" name="PluginInterface"/>
    </parameter>
  </method>
  <method name="uninstallPlugin" start="447" end="451" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Notifies a plugin it is being uninstalled and should clean up">Ideally plugin packages should be uninstalled via uninstallPackage, but if you use Composer
programmatically and want to deregister a plugin class directly this is a valid way
to do it.</description>
      <param description="plugin instance" type="object" variable="$plugin">
        <type full="Composer\Plugin\PluginInterface" namespace="Composer\Plugin" name="PluginInterface"/>
      </param>
      <return type="object">
        <type full="Composer\Plugin\void" namespace="Composer\Plugin" name="void"/>
      </return>
    </docblock>
    <return type="void" nullable="false"/>
    <parameter name="plugin" byreference="false" type="object">
      <type full="Composer\Plugin\PluginInterface" namespace="Composer\Plugin" name="PluginInterface"/>
    </parameter>
  </method>
  <method name="loadRepository" start="469" end="495" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Load all plugins and installers from a repository">If a plugin requires another plugin, the required one will be loaded first

Note that plugins in the specified repository that rely on events that
have fired prior to loading will be missed. This means you likely want to
call this method as early as possible.</description>
      <param description="Repository to scan for plugins to install" type="object" variable="$repo">
        <type full="Composer\Repository\RepositoryInterface" namespace="Composer\Repository" name="RepositoryInterface"/>
      </param>
      <param type="object" variable="$isGlobalRepo">
        <type full="Composer\Plugin\bool" namespace="Composer\Plugin" name="bool"/>
      </param>
      <return type="object">
        <type full="Composer\Plugin\void" namespace="Composer\Plugin" name="void"/>
      </return>
      <throws type="object">
        <type full="\RuntimeException" namespace="" name="RuntimeException"/>
      </throws>
    </docblock>
    <return type="void" nullable="false"/>
    <parameter name="repo" byreference="false" type="object">
      <type full="Composer\Repository\RepositoryInterface" namespace="Composer\Repository" name="RepositoryInterface"/>
    </parameter>
    <parameter name="isGlobalRepo" byreference="false" type="bool"/>
  </method>
  <method name="deactivateRepository" start="507" end="523" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Deactivate all plugins and installers from a repository">If a plugin requires another plugin, the required one will be deactivated last</description>
      <param description="Repository to scan for plugins to install" type="object" variable="$repo">
        <type full="Composer\Repository\RepositoryInterface" namespace="Composer\Repository" name="RepositoryInterface"/>
      </param>
      <param type="object" variable="$isGlobalRepo">
        <type full="Composer\Plugin\bool" namespace="Composer\Plugin" name="bool"/>
      </param>
      <return type="object">
        <type full="Composer\Plugin\void" namespace="Composer\Plugin" name="void"/>
      </return>
    </docblock>
    <return type="void" nullable="false"/>
    <parameter name="repo" byreference="false" type="object">
      <type full="Composer\Repository\RepositoryInterface" namespace="Composer\Repository" name="RepositoryInterface"/>
    </parameter>
    <parameter name="isGlobalRepo" byreference="false" type="bool"/>
  </method>
  <method name="collectDependencies" start="534" end="546" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Recursively generates a map of package names to packages for all deps"/>
      <param description="Set of local repos" type="object" variable="$installedRepo">
        <type full="Composer\Repository\InstalledRepository" namespace="Composer\Repository" name="InstalledRepository"/>
      </param>
      <param description="PackageInterface&gt; $collected     Current state of the map for recursion" type="object">
        <type full="Composer\Plugin\array&lt;string" namespace="Composer\Plugin" name="array&lt;string"/>
      </param>
      <param description="The package to analyze" type="object" variable="$package">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </param>
      <return description="PackageInterface&gt; Map of package names to packages" type="object">
        <type full="Composer\Plugin\array&lt;string" namespace="Composer\Plugin" name="array&lt;string"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
    <parameter name="installedRepo" byreference="false" type="object">
      <type full="Composer\Repository\InstalledRepository" namespace="Composer\Repository" name="InstalledRepository"/>
    </parameter>
    <parameter name="collected" byreference="false" type="array"/>
    <parameter name="package" byreference="false" type="object">
      <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
    </parameter>
  </method>
  <method name="getInstallPath" start="556" end="565" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Retrieves the path a package is installed to."/>
      <param type="object" variable="$package">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </param>
      <param description="Whether this is a global package" type="object" variable="$global">
        <type full="Composer\Plugin\bool" namespace="Composer\Plugin" name="bool"/>
      </param>
      <return description="Install path" type="string"/>
    </docblock>
    <return type="string" nullable="false"/>
    <parameter name="package" byreference="false" type="object">
      <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
    </parameter>
    <parameter name="global" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="getCapabilityImplementationClassName" start="573" end="593" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description/>
      <param type="object" variable="$plugin">
        <type full="Composer\Plugin\PluginInterface" namespace="Composer\Plugin" name="PluginInterface"/>
      </param>
      <param type="string" variable="$capability"/>
      <throws description="On empty or non-string implementation class name value" type="object">
        <type full="\RuntimeException" namespace="" name="RuntimeException"/>
      </throws>
      <return description="The fully qualified class of the implementation or null if Plugin is not of Capable type or does not provide it" type="object">
        <type full="Composer\Plugin\null|string" namespace="Composer\Plugin" name="null|string"/>
      </return>
    </docblock>
    <return type="string" nullable="true"/>
    <parameter name="plugin" byreference="false" type="object">
      <type full="Composer\Plugin\PluginInterface" namespace="Composer\Plugin" name="PluginInterface"/>
    </parameter>
    <parameter name="capability" byreference="false" type="string"/>
  </method>
  <method name="getPluginCapability" start="606" end="627" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <template value="CapabilityClass of Capability"/>
      <param type="object" variable="$plugin">
        <type full="Composer\Plugin\PluginInterface" namespace="Composer\Plugin" name="PluginInterface"/>
      </param>
      <param description="The fully qualified name of the API interface which the plugin may provide" type="object" variable="$capabilityClassName">an implementation of.<type full="Composer\Plugin\class-string&lt;CapabilityClass&gt;" namespace="Composer\Plugin" name="class-string&lt;CapabilityClass&gt;"/></param>
      <param description="Arguments passed to Capability's constructor." type="object" variable="$ctorArgs">Keeping it an array will allow future values to be passed w\o changing the signature.<type full="Composer\Plugin\array&lt;mixed&gt;" namespace="Composer\Plugin" name="array&lt;mixed&gt;"/></param>
      <return type="object">
        <type full="Composer\Plugin\null|Capability" namespace="Composer\Plugin" name="null|Capability"/>
      </return>
      <phpstan value="-param class-string&lt;CapabilityClass&gt; $capabilityClassName"/>
      <phpstan value="-return null|CapabilityClass"/>
    </docblock>
    <return type="object" nullable="true">
      <type full="Composer\Plugin\Capability\Capability" namespace="Composer\Plugin\Capability" name="Capability"/>
    </return>
    <parameter name="plugin" byreference="false" type="object">
      <type full="Composer\Plugin\PluginInterface" namespace="Composer\Plugin" name="PluginInterface"/>
    </parameter>
    <parameter name="capabilityClassName" byreference="false" type="{unknown}"/>
    <parameter name="ctorArgs" byreference="false" type="array" default=""/>
  </method>
  <method name="getPluginCapabilities" start="637" end="647" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <template value="CapabilityClass of Capability"/>
      <param description="The fully qualified name of the API interface which the plugin may provide" type="object" variable="$capabilityClassName">an implementation of.<type full="Composer\Plugin\class-string&lt;CapabilityClass&gt;" namespace="Composer\Plugin" name="class-string&lt;CapabilityClass&gt;"/></param>
      <param description="Arguments passed to Capability's constructor." type="object" variable="$ctorArgs">Keeping it an array will allow future values to be passed w\o changing the signature.<type full="Composer\Plugin\array&lt;mixed&gt;" namespace="Composer\Plugin" name="array&lt;mixed&gt;"/></param>
      <return type="array" of="object">
        <type full="Composer\Plugin\CapabilityClass" namespace="Composer\Plugin" name="CapabilityClass"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
    <parameter name="capabilityClassName" byreference="false" type="{unknown}"/>
    <parameter name="ctorArgs" byreference="false" type="array" default=""/>
  </method>
  <method name="parseAllowedPlugins" start="653" end="673" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param description="bool&gt;|bool|null $allowPluginsConfig" type="object">
        <type full="Composer\Plugin\array&lt;string" namespace="Composer\Plugin" name="array&lt;string"/>
      </param>
      <return description="bool&gt;|null" type="object">
        <type full="Composer\Plugin\array&lt;non-empty-string" namespace="Composer\Plugin" name="array&lt;non-empty-string"/>
      </return>
    </docblock>
    <return type="array" nullable="true"/>
    <parameter name="allowPluginsConfig" byreference="false" type="{unknown}"/>
  </method>
  <method name="isPluginAllowed" start="680" end="765" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="string" variable="$package"/>
      <param type="object" variable="$isGlobalPlugin">
        <type full="Composer\Plugin\bool" namespace="Composer\Plugin" name="bool"/>
      </param>
      <return type="object">
        <type full="Composer\Plugin\bool" namespace="Composer\Plugin" name="bool"/>
      </return>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="package" byreference="false" type="string"/>
    <parameter name="isGlobalPlugin" byreference="false" type="bool"/>
  </method>
</class>
