<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PHP_CodeSniffer\Files\DummyFile" namespace="PHP_CodeSniffer\Files" name="DummyFile" abstract="false" final="false" start="20" end="82">
  <file path="//var/www/html/vendor/squizlabs/php_codesniffer/src/Files" file="DummyFile.php" realpath="/var/www/html/vendor/squizlabs/php_codesniffer/src/Files/DummyFile.php" size="2664" time="2021-12-12T21:44:58+00:00" unixtime="1639345498" sha1="bf1bdafbf094fd227ad171fc091e17b1d6687d5f" relative="ar/www/html/vendor/squizlabs/php_codesniffer/src/Files/DummyFile.php"/>
  <extends full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
  <constructor name="__construct" start="33" end="59" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Creates a DummyFile object and sets the content."/>
      <param description="The content of the file." type="string" variable="$content"/>
      <param description="The ruleset used for the run." type="object" variable="$ruleset">
        <type full="\PHP_CodeSniffer\Ruleset" namespace="\PHP_CodeSniffer" name="Ruleset"/>
      </param>
      <param description="The config data for the run." type="object" variable="$config">
        <type full="\PHP_CodeSniffer\Config" namespace="\PHP_CodeSniffer" name="Config"/>
      </param>
      <return type="object">
        <type full="PHP_CodeSniffer\Files\void" namespace="PHP_CodeSniffer\Files" name="void"/>
      </return>
    </docblock>
    <parameter name="content" byreference="false" type="{unknown}"/>
    <parameter name="ruleset" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Ruleset" namespace="PHP_CodeSniffer" name="Ruleset"/>
    </parameter>
    <parameter name="config" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Config" namespace="PHP_CodeSniffer" name="Config"/>
    </parameter>
    <inline>
      <comment value="See if a filename was defined in the content." line="37"/>
      <comment value="This is done by including: phpcs_input_file: [file path]" line="38"/>
      <comment value="as the first line of content." line="39"/>
      <comment value="The CLI arg overrides anything passed in the content." line="52"/>
    </inline>
  </constructor>
  <method name="setErrorCounts" start="72" end="79" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the error, warning, and fixable counts for the file."/>
      <param description="The number of errors found." type="int" variable="$errorCount"/>
      <param description="The number of warnings found." type="int" variable="$warningCount"/>
      <param description="The number of fixable errors found." type="int" variable="$fixableCount"/>
      <param description="The number of errors that were fixed." type="int" variable="$fixedCount"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Files\void" namespace="PHP_CodeSniffer\Files" name="void"/>
      </return>
    </docblock>
    <parameter name="errorCount" byreference="false" type="{unknown}"/>
    <parameter name="warningCount" byreference="false" type="{unknown}"/>
    <parameter name="fixableCount" byreference="false" type="{unknown}"/>
    <parameter name="fixedCount" byreference="false" type="{unknown}"/>
  </method>
  <parent full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File">
    <member name="path" default="''" type="string" visibility="public" static="false" line="27">
      <docblock>
        <description compact="The absolute path to the file associated with this object."/>
        <var type="string"/>
      </docblock>
    </member>
    <member name="content" default="''" type="string" visibility="protected" static="false" line="34">
      <docblock>
        <description compact="The content of the file."/>
        <var type="string"/>
      </docblock>
    </member>
    <member name="config" default="NULL" visibility="public" static="false" line="41">
      <docblock>
        <description compact="The config data for the run."/>
        <var type="object">
          <type full="\PHP_CodeSniffer\Config" namespace="\PHP_CodeSniffer" name="Config"/>
        </var>
      </docblock>
    </member>
    <member name="ruleset" default="NULL" visibility="public" static="false" line="48">
      <docblock>
        <description compact="The ruleset used for the run."/>
        <var type="object">
          <type full="\PHP_CodeSniffer\Ruleset" namespace="\PHP_CodeSniffer" name="Ruleset"/>
        </var>
      </docblock>
    </member>
    <member name="ignored" default="false" type="boolean" visibility="public" static="false" line="55">
      <docblock>
        <description compact="If TRUE, the entire file is being ignored."/>
        <var type="boolean"/>
      </docblock>
    </member>
    <member name="eolChar" default="''" type="string" visibility="public" static="false" line="62">
      <docblock>
        <description compact="The EOL character this file uses."/>
        <var type="string"/>
      </docblock>
    </member>
    <member name="fixer" default="NULL" visibility="public" static="false" line="69">
      <docblock>
        <description compact="The Fixer object to control fixing errors."/>
        <var type="object">
          <type full="\PHP_CodeSniffer\Fixer" namespace="\PHP_CodeSniffer" name="Fixer"/>
        </var>
      </docblock>
    </member>
    <member name="tokenizer" default="NULL" visibility="public" static="false" line="76">
      <docblock>
        <description compact="The tokenizer being used for this file."/>
        <var type="object">
          <type full="\PHP_CodeSniffer\Tokenizers\Tokenizer" namespace="\PHP_CodeSniffer\Tokenizers" name="Tokenizer"/>
        </var>
      </docblock>
    </member>
    <member name="tokenizerType" default="'PHP'" type="string" visibility="public" static="false" line="83">
      <docblock>
        <description compact="The name of the tokenizer being used for this file."/>
        <var type="string"/>
      </docblock>
    </member>
    <member name="fromCache" default="false" type="boolean" visibility="public" static="false" line="93">
      <docblock>
        <description compact="Was the file loaded from cache?">If TRUE, the file was loaded from a local cache.
If FALSE, the file was tokenized and processed fully.</description>
        <var type="boolean"/>
      </docblock>
    </member>
    <member name="numTokens" default="0" type="integer" visibility="public" static="false" line="102">
      <docblock>
        <description compact="The number of tokens in this file.">Stored here to save calling count() everywhere.</description>
        <var type="integer"/>
      </docblock>
    </member>
    <member name="tokens" default="" type="array" visibility="protected" static="false" line="109">
      <docblock>
        <description compact="The tokens stack map."/>
        <var type="array"/>
      </docblock>
    </member>
    <member name="errors" default="" type="array" visibility="protected" static="false" line="117">
      <docblock>
        <description compact="The errors raised from sniffs."/>
        <var type="array"/>
        <see value="getErrors()"/>
      </docblock>
    </member>
    <member name="warnings" default="" type="array" visibility="protected" static="false" line="125">
      <docblock>
        <description compact="The warnings raised from sniffs."/>
        <var type="array"/>
        <see value="getWarnings()"/>
      </docblock>
    </member>
    <member name="metrics" default="" type="array" visibility="protected" static="false" line="133">
      <docblock>
        <description compact="The metrics recorded by sniffs."/>
        <var type="array"/>
        <see value="getMetrics()"/>
      </docblock>
    </member>
    <member name="errorCount" default="0" type="integer" visibility="protected" static="false" line="150">
      <docblock>
        <description compact="The total number of errors raised."/>
        <var type="integer"/>
      </docblock>
    </member>
    <member name="warningCount" default="0" type="integer" visibility="protected" static="false" line="157">
      <docblock>
        <description compact="The total number of warnings raised."/>
        <var type="integer"/>
      </docblock>
    </member>
    <member name="fixableCount" default="0" type="integer" visibility="protected" static="false" line="164">
      <docblock>
        <description compact="The total number of errors and warnings that can be fixed."/>
        <var type="integer"/>
      </docblock>
    </member>
    <member name="fixedCount" default="0" type="integer" visibility="protected" static="false" line="171">
      <docblock>
        <description compact="The total number of errors and warnings that were fixed."/>
        <var type="integer"/>
      </docblock>
    </member>
    <member name="replayingErrors" default="false" type="boolean" visibility="protected" static="false" line="178">
      <docblock>
        <description compact="TRUE if errors are being replayed from the cache."/>
        <var type="boolean"/>
      </docblock>
    </member>
    <member name="ignoredListeners" default="" type="array" visibility="protected" static="false" line="185">
      <docblock>
        <description compact="An array of sniffs that are being ignored."/>
        <var type="array"/>
      </docblock>
    </member>
    <member name="ignoredCodes" default="" type="array" visibility="protected" static="false" line="192">
      <docblock>
        <description compact="An array of message codes that are being ignored."/>
        <var type="array"/>
      </docblock>
    </member>
    <member name="listeners" default="" type="array" visibility="protected" static="false" line="199">
      <docblock>
        <description compact="An array of sniffs listening to this file's processing."/>
        <var type="array" of="object">
          <type full="\PHP_CodeSniffer\Sniffs\Sniff" namespace="\PHP_CodeSniffer\Sniffs" name="Sniff"/>
        </var>
      </docblock>
    </member>
    <member name="activeListener" default="''" type="string" visibility="protected" static="false" line="206">
      <docblock>
        <description compact="The class name of the sniff currently processing the file."/>
        <var type="string"/>
      </docblock>
    </member>
    <member name="listenerTimes" default="" type="array" visibility="protected" static="false" line="213">
      <docblock>
        <description compact="An array of sniffs being processed and how long they took."/>
        <var type="array"/>
      </docblock>
    </member>
    <member name="configCache" default="" type="array" visibility="protected" static="false" line="222">
      <docblock>
        <description compact="A cache of often used config settings to improve performance.">Storing them here saves 10k+ calls to __get() in the Config class.</description>
        <var type="array"/>
      </docblock>
    </member>
    <constructor name="__construct" start="234" end="259" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Constructs a file."/>
        <param description="The absolute path to the file to process." type="string" variable="$path"/>
        <param description="The ruleset used for the run." type="object" variable="$ruleset">
          <type full="\PHP_CodeSniffer\Ruleset" namespace="\PHP_CodeSniffer" name="Ruleset"/>
        </param>
        <param description="The config data for the run." type="object" variable="$config">
          <type full="\PHP_CodeSniffer\Config" namespace="\PHP_CodeSniffer" name="Config"/>
        </param>
        <return type="object">
          <type full="PHP_CodeSniffer\Files\void" namespace="PHP_CodeSniffer\Files" name="void"/>
        </return>
      </docblock>
      <parameter name="path" byreference="false" type="{unknown}"/>
      <parameter name="ruleset" byreference="false" type="object">
        <type full="PHP_CodeSniffer\Ruleset" namespace="PHP_CodeSniffer" name="Ruleset"/>
      </parameter>
      <parameter name="config" byreference="false" type="object">
        <type full="PHP_CodeSniffer\Config" namespace="PHP_CodeSniffer" name="Config"/>
      </parameter>
    </constructor>
    <method name="setContent" start="271" end="283" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the content of the file.">Setting the content also calculates the EOL char being used.</description>
        <param description="The file content." type="string" variable="$content"/>
        <return type="object">
          <type full="PHP_CodeSniffer\Files\void" namespace="PHP_CodeSniffer\Files" name="void"/>
        </return>
      </docblock>
      <parameter name="content" byreference="false" type="{unknown}"/>
    </method>
    <method name="reloadContent" start="294" end="297" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Reloads the content of the file.">By default, we have no idea where our content comes from,
so we can't do anything.</description>
        <return type="object">
          <type full="PHP_CodeSniffer\Files\void" namespace="PHP_CodeSniffer\Files" name="void"/>
        </return>
      </docblock>
    </method>
    <method name="disableCaching" start="305" end="309" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Disables caching of this file."/>
        <return type="object">
          <type full="PHP_CodeSniffer\Files\void" namespace="PHP_CodeSniffer\Files" name="void"/>
        </return>
      </docblock>
    </method>
    <method name="process" start="317" end="548" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Starts the stack traversal and tells listeners when tokens are found."/>
        <return type="object">
          <type full="PHP_CodeSniffer\Files\void" namespace="PHP_CodeSniffer\Files" name="void"/>
        </return>
      </docblock>
      <inline>
        <comment value="Check if tokenizer errors cause this file to be ignored." line="331"/>
        <comment value="Foreach of the listeners that have registered to listen for this" line="347"/>
        <comment value="token, get them to process it." line="348"/>
        <comment value="end foreach" line="517"/>
        <comment value="If short open tags are off but the file being checked uses" line="519"/>
        <comment value="short open tags, the whole content will be inline HTML" line="520"/>
        <comment value="and nothing will be checked. So try and handle this case." line="521"/>
        <comment value="We don't show this error for STDIN because we can't be sure the content" line="522"/>
        <comment value="actually came directly from the user. It could be something like" line="523"/>
        <comment value="refs from a Git pre-push hook." line="524"/>
      </inline>
    </method>
    <method name="parse" start="556" end="609" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Tokenizes the file and prepares it for the test run."/>
        <return type="object">
          <type full="PHP_CodeSniffer\Files\void" namespace="PHP_CodeSniffer\Files" name="void"/>
        </return>
      </docblock>
      <inline>
        <comment value="Check for mixed line endings as these can cause tokenizer errors and we" line="582"/>
        <comment value="should let the user know that the results they get may be incorrect." line="583"/>
        <comment value="This is done by removing all backslashes, removing the newline char we" line="584"/>
        <comment value="detected, then converting newlines chars into text. If any backslashes" line="585"/>
        <comment value="are left at the end, we have additional newline chars in use." line="586"/>
      </inline>
    </method>
    <method name="getTokens" start="617" end="621" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the token stack for this file."/>
        <return type="array"/>
      </docblock>
    </method>
    <method name="cleanUp" start="629" end="640" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Remove vars stored in this file that are no longer required."/>
        <return type="object">
          <type full="PHP_CodeSniffer\Files\void" namespace="PHP_CodeSniffer\Files" name="void"/>
        </return>
      </docblock>
    </method>
    <method name="addError" start="656" end="674" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Records an error against a specific token in the file."/>
        <param description="The error message." type="string" variable="$error"/>
        <param description="The stack position where the error occurred." type="int" variable="$stackPtr"/>
        <param description="A violation code unique to the sniff message." type="string" variable="$code"/>
        <param description="Replacements for the error message." type="array" variable="$data"/>
        <param description="The severity level for this error. A value of 0" type="int" variable="$severity">will be converted into the default severity level.</param>
        <param description="Can the error be fixed by the sniff?" type="boolean" variable="$fixable"/>
        <return type="boolean"/>
      </docblock>
      <parameter name="error" byreference="false" type="{unknown}"/>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
      <parameter name="code" byreference="false" type="{unknown}"/>
      <parameter name="data" byreference="false" type="array" default=""/>
      <parameter name="severity" byreference="false" type="integer" default="0"/>
      <parameter name="fixable" byreference="false" type="boolean" default="false"/>
    </method>
    <method name="addWarning" start="690" end="708" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Records a warning against a specific token in the file."/>
        <param description="The error message." type="string" variable="$warning"/>
        <param description="The stack position where the error occurred." type="int" variable="$stackPtr"/>
        <param description="A violation code unique to the sniff message." type="string" variable="$code"/>
        <param description="Replacements for the warning message." type="array" variable="$data"/>
        <param description="The severity level for this warning. A value of 0" type="int" variable="$severity">will be converted into the default severity level.</param>
        <param description="Can the warning be fixed by the sniff?" type="boolean" variable="$fixable"/>
        <return type="boolean"/>
      </docblock>
      <parameter name="warning" byreference="false" type="{unknown}"/>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
      <parameter name="code" byreference="false" type="{unknown}"/>
      <parameter name="data" byreference="false" type="array" default=""/>
      <parameter name="severity" byreference="false" type="integer" default="0"/>
      <parameter name="fixable" byreference="false" type="boolean" default="false"/>
    </method>
    <method name="addErrorOnLine" start="723" end="732" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Records an error against a specific line in the file."/>
        <param description="The error message." type="string" variable="$error"/>
        <param description="The line on which the error occurred." type="int" variable="$line"/>
        <param description="A violation code unique to the sniff message." type="string" variable="$code"/>
        <param description="Replacements for the error message." type="array" variable="$data"/>
        <param description="The severity level for this error. A value of 0" type="int" variable="$severity">will be converted into the default severity level.</param>
        <return type="boolean"/>
      </docblock>
      <parameter name="error" byreference="false" type="{unknown}"/>
      <parameter name="line" byreference="false" type="{unknown}"/>
      <parameter name="code" byreference="false" type="{unknown}"/>
      <parameter name="data" byreference="false" type="array" default=""/>
      <parameter name="severity" byreference="false" type="integer" default="0"/>
    </method>
    <method name="addWarningOnLine" start="747" end="756" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Records a warning against a specific token in the file."/>
        <param description="The error message." type="string" variable="$warning"/>
        <param description="The line on which the warning occurred." type="int" variable="$line"/>
        <param description="A violation code unique to the sniff message." type="string" variable="$code"/>
        <param description="Replacements for the warning message." type="array" variable="$data"/>
        <param description="The severity level for this warning. A value of 0 will" type="int" variable="$severity">will be converted into the default severity level.</param>
        <return type="boolean"/>
      </docblock>
      <parameter name="warning" byreference="false" type="{unknown}"/>
      <parameter name="line" byreference="false" type="{unknown}"/>
      <parameter name="code" byreference="false" type="{unknown}"/>
      <parameter name="data" byreference="false" type="array" default=""/>
      <parameter name="severity" byreference="false" type="integer" default="0"/>
    </method>
    <method name="addFixableError" start="773" end="787" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Records a fixable error against a specific token in the file.">Returns true if the error was recorded and should be fixed.</description>
        <param description="The error message." type="string" variable="$error"/>
        <param description="The stack position where the error occurred." type="int" variable="$stackPtr"/>
        <param description="A violation code unique to the sniff message." type="string" variable="$code"/>
        <param description="Replacements for the error message." type="array" variable="$data"/>
        <param description="The severity level for this error. A value of 0" type="int" variable="$severity">will be converted into the default severity level.</param>
        <return type="boolean"/>
      </docblock>
      <parameter name="error" byreference="false" type="{unknown}"/>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
      <parameter name="code" byreference="false" type="{unknown}"/>
      <parameter name="data" byreference="false" type="array" default=""/>
      <parameter name="severity" byreference="false" type="integer" default="0"/>
    </method>
    <method name="addFixableWarning" start="804" end="818" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Records a fixable warning against a specific token in the file.">Returns true if the warning was recorded and should be fixed.</description>
        <param description="The error message." type="string" variable="$warning"/>
        <param description="The stack position where the error occurred." type="int" variable="$stackPtr"/>
        <param description="A violation code unique to the sniff message." type="string" variable="$code"/>
        <param description="Replacements for the warning message." type="array" variable="$data"/>
        <param description="The severity level for this warning. A value of 0" type="int" variable="$severity">will be converted into the default severity level.</param>
        <return type="boolean"/>
      </docblock>
      <parameter name="warning" byreference="false" type="{unknown}"/>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
      <parameter name="code" byreference="false" type="{unknown}"/>
      <parameter name="data" byreference="false" type="array" default=""/>
      <parameter name="severity" byreference="false" type="integer" default="0"/>
    </method>
    <method name="addMessage" start="836" end="1086" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Adds an error to the error stack."/>
        <param description="Is this an error message?" type="boolean" variable="$error"/>
        <param description="The text of the message." type="string" variable="$message"/>
        <param description="The line on which the message occurred." type="int" variable="$line"/>
        <param description="The column at which the message occurred." type="int" variable="$column"/>
        <param description="A violation code unique to the sniff message." type="string" variable="$code"/>
        <param description="Replacements for the message." type="array" variable="$data"/>
        <param description="The severity level for this message. A value of 0" type="int" variable="$severity">will be converted into the default severity level.</param>
        <param description="Can the problem be fixed by the sniff?" type="boolean" variable="$fixable"/>
        <return type="boolean"/>
      </docblock>
      <parameter name="error" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="{unknown}"/>
      <parameter name="line" byreference="false" type="{unknown}"/>
      <parameter name="column" byreference="false" type="{unknown}"/>
      <parameter name="code" byreference="false" type="{unknown}"/>
      <parameter name="data" byreference="false" type="{unknown}"/>
      <parameter name="severity" byreference="false" type="{unknown}"/>
      <parameter name="fixable" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Check if this line is ignoring all message codes." line="838"/>
        <comment value="Work out which sniff generated the message." line="843"/>
        <comment value="end if" line="867"/>
        <comment value="end if" line="894"/>
        <comment value="Filter out any messages for sniffs that shouldn't have run" line="903"/>
        <comment value="due to the use of the --sniffs command line argument." line="904"/>
        <comment value="If we know this sniff code is being ignored for this file, return early." line="914"/>
        <comment value="Make sure we are not ignoring this file." line="968"/>
        <comment value="end if" line="1026"/>
        <comment value="See if there is a custom error message format to use." line="1045"/>
        <comment value="But don't do this if we are replaying errors because replayed" line="1046"/>
        <comment value="errors have already used the custom format and have had their" line="1047"/>
        <comment value="data replaced." line="1048"/>
      </inline>
    </method>
    <method name="recordMetric" start="1098" end="1114" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Record a metric about the file being examined."/>
        <param description="The stack position where the metric was recorded." type="int" variable="$stackPtr"/>
        <param description="The name of the metric being recorded." type="string" variable="$metric"/>
        <param description="The value of the metric being recorded." type="string" variable="$value"/>
        <return type="boolean"/>
      </docblock>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
      <parameter name="metric" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="getErrorCount" start="1122" end="1126" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the number of errors raised."/>
        <return type="int"/>
      </docblock>
    </method>
    <method name="getWarningCount" start="1134" end="1138" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the number of warnings raised."/>
        <return type="int"/>
      </docblock>
    </method>
    <method name="getFixableCount" start="1146" end="1150" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the number of fixable errors/warnings raised."/>
        <return type="int"/>
      </docblock>
    </method>
    <method name="getFixedCount" start="1158" end="1162" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the number of fixed errors/warnings."/>
        <return type="int"/>
      </docblock>
    </method>
    <method name="getIgnoredLines" start="1170" end="1174" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the list of ignored lines."/>
        <return type="array"/>
      </docblock>
    </method>
    <method name="getErrors" start="1182" end="1186" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the errors raised from processing this file."/>
        <return type="array"/>
      </docblock>
    </method>
    <method name="getWarnings" start="1194" end="1198" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the warnings raised from processing this file."/>
        <return type="array"/>
      </docblock>
    </method>
    <method name="getMetrics" start="1206" end="1210" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the metrics found while processing this file."/>
        <return type="array"/>
      </docblock>
    </method>
    <method name="getFilename" start="1218" end="1222" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the absolute filename of this file."/>
        <return type="string"/>
      </docblock>
    </method>
    <method name="getDeclarationName" start="1237" end="1271" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the declaration names for classes, interfaces, traits, and functions."/>
        <param description="The position of the declaration token which" type="int" variable="$stackPtr">declared the class, interface, trait, or function.</param>
        <return description="The name of the class, interface, trait, or function;" type="object">or NULL if the function or class is anonymous.<type full="PHP_CodeSniffer\Files\string|null" namespace="PHP_CodeSniffer\Files" name="string|null"/></return>
        <throws description="If the specified token is not of type" type="object">T_FUNCTION, T_CLASS, T_ANON_CLASS,
                                                     T_CLOSURE, T_TRAIT, or T_INTERFACE.<type full="\PHP_CodeSniffer\Exceptions\RuntimeException" namespace="\PHP_CodeSniffer\Exceptions" name="RuntimeException"/></throws>
      </docblock>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    </method>
    <method name="getMethodParameters" start="1322" end="1561" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the method parameters for the specified function token.">Also supports passing in a USE token for a closure use group.

Each parameter is in the following format:

&lt;code&gt;
  0 =&gt; array(
        'name'                =&gt; '$var',  // The variable name.
        'token'               =&gt; integer, // The stack pointer to the variable name.
        'content'             =&gt; string,  // The full content of the variable definition.
        'has_attributes'      =&gt; boolean, // Does the parameter have one or more attributes attached ?
        'pass_by_reference'   =&gt; boolean, // Is the variable passed by reference?
        'reference_token'     =&gt; integer, // The stack pointer to the reference operator
                                          // or FALSE if the param is not passed by reference.
        'variable_length'     =&gt; boolean, // Is the param of variable length through use of `...` ?
        'variadic_token'      =&gt; integer, // The stack pointer to the ... operator
                                          // or FALSE if the param is not variable length.
        'type_hint'           =&gt; string,  // The type hint for the variable.
        'type_hint_token'     =&gt; integer, // The stack pointer to the start of the type hint
                                          // or FALSE if there is no type hint.
        'type_hint_end_token' =&gt; integer, // The stack pointer to the end of the type hint
                                          // or FALSE if there is no type hint.
        'nullable_type'       =&gt; boolean, // TRUE if the type is preceded by the nullability
                                          // operator.
        'comma_token'         =&gt; integer, // The stack pointer to the comma after the param
                                          // or FALSE if this is the last param.
       )
&lt;/code&gt;

Parameters with default values have additional array indexes of:
        'default'             =&gt; string,  // The full content of the default value.
        'default_token'       =&gt; integer, // The stack pointer to the start of the default value.
        'default_equal_token' =&gt; integer, // The stack pointer to the equals sign.

Parameters declared using PHP 8 constructor property promotion, have these additional array indexes:
        'property_visibility' =&gt; string,  // The property visibility as declared.
        'visibility_token'    =&gt; integer, // The stack pointer to the visibility modifier token.</description>
        <param description="The position in the stack of the function token" type="int" variable="$stackPtr">to acquire the parameters for.</param>
        <return type="array"/>
        <throws description="If the specified $stackPtr is not of" type="object">type T_FUNCTION, T_CLOSURE, T_USE,
                                                     or T_FN.<type full="\PHP_CodeSniffer\Exceptions\RuntimeException" namespace="\PHP_CodeSniffer\Exceptions" name="RuntimeException"/></throws>
      </docblock>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="end for" line="1557"/>
      </inline>
    </method>
    <method name="getMethodProperties" start="1593" end="1733" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the visibility and implementation properties of a method.">The format of the return value is:
&lt;code&gt;
  array(
   'scope'                 =&gt; 'public', // Public, private, or protected
   'scope_specified'       =&gt; true,     // TRUE if the scope keyword was found.
   'return_type'           =&gt; '',       // The return type of the method.
   'return_type_token'     =&gt; integer,  // The stack pointer to the start of the return type
                                        // or FALSE if there is no return type.
   'return_type_end_token' =&gt; integer,  // The stack pointer to the end of the return type
                                        // or FALSE if there is no return type.
   'nullable_return_type'  =&gt; false,    // TRUE if the return type is preceded by the
                                        // nullability operator.
   'is_abstract'           =&gt; false,    // TRUE if the abstract keyword was found.
   'is_final'              =&gt; false,    // TRUE if the final keyword was found.
   'is_static'             =&gt; false,    // TRUE if the static keyword was found.
   'has_body'              =&gt; false,    // TRUE if the method has a body
  );
&lt;/code&gt;</description>
        <param description="The position in the stack of the function token to" type="int" variable="$stackPtr">acquire the properties for.</param>
        <return type="array"/>
        <throws description="If the specified position is not a" type="object">T_FUNCTION, T_CLOSURE, or T_FN token.<type full="\PHP_CodeSniffer\Exceptions\RuntimeException" namespace="\PHP_CodeSniffer\Exceptions" name="RuntimeException"/></throws>
      </docblock>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="end for" line="1657"/>
        <comment value="end if" line="1714"/>
      </inline>
    </method>
    <method name="getMemberProperties" start="1764" end="1910" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the visibility and implementation properties of a class member var.">The format of the return value is:

&lt;code&gt;
  array(
   'scope'           =&gt; string,  // Public, private, or protected.
   'scope_specified' =&gt; boolean, // TRUE if the scope was explicitly specified.
   'is_static'       =&gt; boolean, // TRUE if the static keyword was found.
   'type'            =&gt; string,  // The type of the var (empty if no type specified).
   'type_token'      =&gt; integer, // The stack pointer to the start of the type
                                 // or FALSE if there is no type.
   'type_end_token'  =&gt; integer, // The stack pointer to the end of the type
                                 // or FALSE if there is no type.
   'nullable_type'   =&gt; boolean, // TRUE if the type is preceded by the nullability
                                 // operator.
  );
&lt;/code&gt;</description>
        <param description="The position in the stack of the T_VARIABLE token to" type="int" variable="$stackPtr">acquire the properties for.</param>
        <return type="array"/>
        <throws description="If the specified position is not a" type="object">T_VARIABLE token, or if the position is not
                                                     a class member variable.<type full="\PHP_CodeSniffer\Exceptions\RuntimeException" namespace="\PHP_CodeSniffer\Exceptions" name="RuntimeException"/></throws>
      </docblock>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Make sure it's not a method parameter." line="1796"/>
        <comment value="end for" line="1854"/>
        <comment value="end if" line="1898"/>
      </inline>
    </method>
    <method name="getClassProperties" start="1931" end="1969" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the visibility and implementation properties of a class.">The format of the return value is:
&lt;code&gt;
  array(
   'is_abstract' =&gt; false, // true if the abstract keyword was found.
   'is_final'    =&gt; false, // true if the final keyword was found.
  );
&lt;/code&gt;</description>
        <param description="The position in the stack of the T_CLASS token to" type="int" variable="$stackPtr">acquire the properties for.</param>
        <return type="array"/>
        <throws description="If the specified position is not a" type="object">T_CLASS token.<type full="\PHP_CodeSniffer\Exceptions\RuntimeException" namespace="\PHP_CodeSniffer\Exceptions" name="RuntimeException"/></throws>
      </docblock>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="end for" line="1962"/>
      </inline>
    </method>
    <method name="isReference" start="1982" end="2094" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Determine if the passed token is a reference operator.">Returns true if the specified token position represents a reference.
Returns false if the token represents a bitwise operator.</description>
        <param description="The position of the T_BITWISE_AND token." type="int" variable="$stackPtr"/>
        <return type="boolean"/>
      </docblock>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="end if" line="2061"/>
        <comment value="Pass by reference in function calls and assign by reference in arrays." line="2063"/>
        <comment value="end if" line="2090"/>
      </inline>
    </method>
    <method name="getTokensAsString" start="2109" end="2137" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the content of the tokens from the specified start position in the token stack for the specified length."/>
        <param description="The position to start from in the token stack." type="int" variable="$start"/>
        <param description="The length of tokens to traverse from the start pos." type="int" variable="$length"/>
        <param description="Whether the original content or the tab replaced" type="object" variable="$origContent">content should be used.<type full="PHP_CodeSniffer\Files\bool" namespace="PHP_CodeSniffer\Files" name="bool"/></param>
        <return description="The token contents." type="string"/>
        <throws description="If the specified position does not exist." type="object">
          <type full="\PHP_CodeSniffer\Exceptions\RuntimeException" namespace="\PHP_CodeSniffer\Exceptions" name="RuntimeException"/>
        </throws>
      </docblock>
      <parameter name="start" byreference="false" type="{unknown}"/>
      <parameter name="length" byreference="false" type="{unknown}"/>
      <parameter name="origContent" byreference="false" type="boolean" default="false"/>
    </method>
    <method name="findPrevious" start="2166" end="2218" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the position of the previous specified token(s).">If a value is specified, the previous token of the specified type(s)
containing the specified value will be returned.

Returns false if no token can be found.</description>
        <param description="The type(s) of tokens to search for." type="object" variable="$types">
          <type full="PHP_CodeSniffer\Files\int|string|array" namespace="PHP_CodeSniffer\Files" name="int|string|array"/>
        </param>
        <param description="The position to start searching from in the" type="int" variable="$start">token stack.</param>
        <param description="The end position to fail if no token is found." type="object" variable="$end">if not specified or null, end will default to
                                 the start of the token stack.<type full="PHP_CodeSniffer\Files\int|null" namespace="PHP_CodeSniffer\Files" name="int|null"/></param>
        <param description="If true, find the previous token that is NOT of" type="object" variable="$exclude">the types specified in $types.<type full="PHP_CodeSniffer\Files\bool" namespace="PHP_CodeSniffer\Files" name="bool"/></param>
        <param description="The value that the token(s) must be equal to." type="object" variable="$value">If value is omitted, tokens with any value will
                                 be returned.<type full="PHP_CodeSniffer\Files\string|null" namespace="PHP_CodeSniffer\Files" name="string|null"/></param>
        <param description="If true, tokens outside the current statement" type="object" variable="$local">will not be checked. IE. checking will stop
                                 at the previous semi-colon found.<type full="PHP_CodeSniffer\Files\bool" namespace="PHP_CodeSniffer\Files" name="bool"/></param>
        <return type="object">
          <type full="PHP_CodeSniffer\Files\int|false" namespace="PHP_CodeSniffer\Files" name="int|false"/>
        </return>
        <see value="findNext()"/>
      </docblock>
      <parameter name="types" byreference="false" type="{unknown}"/>
      <parameter name="start" byreference="false" type="{unknown}"/>
      <parameter name="end" byreference="false" type="{unknown}" default="NULL"/>
      <parameter name="exclude" byreference="false" type="boolean" default="false"/>
      <parameter name="value" byreference="false" type="{unknown}" default="NULL"/>
      <parameter name="local" byreference="false" type="boolean" default="false"/>
      <inline>
        <comment value="end for" line="2214"/>
      </inline>
    </method>
    <method name="findNext" start="2247" end="2285" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the position of the next specified token(s).">If a value is specified, the next token of the specified type(s)
containing the specified value will be returned.

Returns false if no token can be found.</description>
        <param description="The type(s) of tokens to search for." type="object" variable="$types">
          <type full="PHP_CodeSniffer\Files\int|string|array" namespace="PHP_CodeSniffer\Files" name="int|string|array"/>
        </param>
        <param description="The position to start searching from in the" type="int" variable="$start">token stack.</param>
        <param description="The end position to fail if no token is found." type="object" variable="$end">if not specified or null, end will default to
                                 the end of the token stack.<type full="PHP_CodeSniffer\Files\int|null" namespace="PHP_CodeSniffer\Files" name="int|null"/></param>
        <param description="If true, find the next token that is NOT of" type="object" variable="$exclude">a type specified in $types.<type full="PHP_CodeSniffer\Files\bool" namespace="PHP_CodeSniffer\Files" name="bool"/></param>
        <param description="The value that the token(s) must be equal to." type="object" variable="$value">If value is omitted, tokens with any value will
                                 be returned.<type full="PHP_CodeSniffer\Files\string|null" namespace="PHP_CodeSniffer\Files" name="string|null"/></param>
        <param description="If true, tokens outside the current statement" type="object" variable="$local">will not be checked. i.e., checking will stop
                                 at the next semi-colon found.<type full="PHP_CodeSniffer\Files\bool" namespace="PHP_CodeSniffer\Files" name="bool"/></param>
        <return type="object">
          <type full="PHP_CodeSniffer\Files\int|false" namespace="PHP_CodeSniffer\Files" name="int|false"/>
        </return>
        <see value="findPrevious()"/>
      </docblock>
      <parameter name="types" byreference="false" type="{unknown}"/>
      <parameter name="start" byreference="false" type="{unknown}"/>
      <parameter name="end" byreference="false" type="{unknown}" default="NULL"/>
      <parameter name="exclude" byreference="false" type="boolean" default="false"/>
      <parameter name="value" byreference="false" type="{unknown}" default="NULL"/>
      <parameter name="local" byreference="false" type="boolean" default="false"/>
      <inline>
        <comment value="end for" line="2281"/>
      </inline>
    </method>
    <method name="findStartOfStatement" start="2296" end="2438" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the position of the first non-whitespace token in a statement."/>
        <param description="The position to start searching from in the token stack." type="int" variable="$start"/>
        <param description="Token types that should not be considered stop points." type="object" variable="$ignore">
          <type full="PHP_CodeSniffer\Files\int|string|array" namespace="PHP_CodeSniffer\Files" name="int|string|array"/>
        </param>
        <return type="int"/>
      </docblock>
      <parameter name="start" byreference="false" type="{unknown}"/>
      <parameter name="ignore" byreference="false" type="{unknown}" default="NULL"/>
      <inline>
        <comment value="If the start token is inside the case part of a match expression," line="2325"/>
        <comment value="find the start of the condition. If it's in the statement part, find" line="2326"/>
        <comment value="the token that comes after the match arrow." line="2327"/>
        <comment value="end if" line="2373"/>
        <comment value="If we are starting at a token that ends a scope block, skip to" line="2377"/>
        <comment value="the start and continue from there." line="2378"/>
        <comment value="If we are starting at a token that ends a statement, skip this" line="2379"/>
        <comment value="token so we find the true start of the statement." line="2380"/>
        <comment value="end for" line="2434"/>
      </inline>
    </method>
    <method name="findEndOfStatement" start="2449" end="2553" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the position of the last non-whitespace token in a statement."/>
        <param description="The position to start searching from in the token stack." type="int" variable="$start"/>
        <param description="Token types that should not be considered stop points." type="object" variable="$ignore">
          <type full="PHP_CodeSniffer\Files\int|string|array" namespace="PHP_CodeSniffer\Files" name="int|string|array"/>
        </param>
        <return type="int"/>
      </docblock>
      <parameter name="start" byreference="false" type="{unknown}"/>
      <parameter name="ignore" byreference="false" type="{unknown}" default="NULL"/>
      <inline>
        <comment value="If the start token is inside the case part of a match expression," line="2471"/>
        <comment value="advance to the match arrow and continue looking for the" line="2472"/>
        <comment value="end of the statement from there so that we skip over commas." line="2473"/>
        <comment value="end if" line="2496"/>
        <comment value="end for" line="2549"/>
      </inline>
    </method>
    <method name="findFirstOnLine" start="2573" end="2612" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the position of the first token on a line, matching given type.">Returns false if no token can be found.</description>
        <param description="The type(s) of tokens to search for." type="object" variable="$types">
          <type full="PHP_CodeSniffer\Files\int|string|array" namespace="PHP_CodeSniffer\Files" name="int|string|array"/>
        </param>
        <param description="The position to start searching from in the" type="int" variable="$start">token stack. The first token matching on
                                 this line before this token will be returned.</param>
        <param description="If true, find the token that is NOT of" type="object" variable="$exclude">the types specified in $types.<type full="PHP_CodeSniffer\Files\bool" namespace="PHP_CodeSniffer\Files" name="bool"/></param>
        <param description="The value that the token must be equal to." type="string" variable="$value">If value is omitted, tokens with any value will
                                 be returned.</param>
        <return type="object">
          <type full="PHP_CodeSniffer\Files\int|false" namespace="PHP_CodeSniffer\Files" name="int|false"/>
        </return>
      </docblock>
      <parameter name="types" byreference="false" type="{unknown}"/>
      <parameter name="start" byreference="false" type="{unknown}"/>
      <parameter name="exclude" byreference="false" type="boolean" default="false"/>
      <parameter name="value" byreference="false" type="{unknown}" default="NULL"/>
      <inline>
        <comment value="end for" line="2608"/>
      </inline>
    </method>
    <method name="hasCondition" start="2623" end="2647" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Determine if the passed token has a condition of one of the passed types."/>
        <param description="The position of the token we are checking." type="int" variable="$stackPtr"/>
        <param description="The type(s) of tokens to search for." type="object" variable="$types">
          <type full="PHP_CodeSniffer\Files\int|string|array" namespace="PHP_CodeSniffer\Files" name="int|string|array"/>
        </param>
        <return type="boolean"/>
      </docblock>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
      <parameter name="types" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Check for the existence of the token." line="2625"/>
        <comment value="Make sure the token has conditions." line="2630"/>
      </inline>
    </method>
    <method name="getCondition" start="2664" end="2689" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the position of the condition for the passed token.">Returns FALSE if the token does not have the condition.</description>
        <param description="The position of the token we are checking." type="int" variable="$stackPtr"/>
        <param description="The type of token to search for." type="object" variable="$type">
          <type full="PHP_CodeSniffer\Files\int|string" namespace="PHP_CodeSniffer\Files" name="int|string"/>
        </param>
        <param description="If TRUE, will return the matched condition" type="object" variable="$first">furthest away from the passed token.
                            If FALSE, will return the matched condition
                            closest to the passed token.<type full="PHP_CodeSniffer\Files\bool" namespace="PHP_CodeSniffer\Files" name="bool"/></param>
        <return type="object">
          <type full="PHP_CodeSniffer\Files\int|false" namespace="PHP_CodeSniffer\Files" name="int|false"/>
        </return>
      </docblock>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
      <parameter name="type" byreference="false" type="{unknown}"/>
      <parameter name="first" byreference="false" type="boolean" default="true"/>
      <inline>
        <comment value="Check for the existence of the token." line="2666"/>
        <comment value="Make sure the token has conditions." line="2671"/>
      </inline>
    </method>
    <method name="findExtendedClassName" start="2702" end="2742" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the name of the class that the specified class extends.">(works for classes, anonymous classes and interfaces)

Returns FALSE on error or if there is no extended class name.</description>
        <param description="The stack position of the class." type="int" variable="$stackPtr"/>
        <return type="object">
          <type full="PHP_CodeSniffer\Files\string|false" namespace="PHP_CodeSniffer\Files" name="string|false"/>
        </return>
      </docblock>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Check for the existence of the token." line="2704"/>
      </inline>
    </method>
    <method name="findImplementedInterfaceNames" start="2754" end="2796" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the names of the interfaces that the specified class implements.">Returns FALSE on error or if there are no implemented interface names.</description>
        <param description="The stack position of the class." type="int" variable="$stackPtr"/>
        <return type="object">
          <type full="PHP_CodeSniffer\Files\array|false" namespace="PHP_CodeSniffer\Files" name="array|false"/>
        </return>
      </docblock>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Check for the existence of the token." line="2756"/>
      </inline>
    </method>
  </parent>
</class>
