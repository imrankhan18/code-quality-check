<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PHP_CodeSniffer\Standards\Squiz\Sniffs\Commenting\FunctionCommentSniff" namespace="PHP_CodeSniffer\Standards\Squiz\Sniffs\Commenting" name="FunctionCommentSniff" abstract="false" final="false" start="17" end="766">
  <file path="//var/www/html/vendor/squizlabs/php_codesniffer/src/Standards/Squiz/Sniffs/Commenting" file="FunctionCommentSniff.php" realpath="/var/www/html/vendor/squizlabs/php_codesniffer/src/Standards/Squiz/Sniffs/Commenting/FunctionCommentSniff.php" size="32301" time="2021-12-12T21:44:58+00:00" unixtime="1639345498" sha1="cba4876f2aef167400eb43d8863a2a19b31c5682" relative="ar/www/html/vendor/squizlabs/php_codesniffer/src/Standards/Squiz/Sniffs/Commenting/FunctionCommentSniff.php"/>
  <extends full="PHP_CodeSniffer\Standards\PEAR\Sniffs\Commenting\FunctionCommentSniff" namespace="PHP_CodeSniffer\Standards\PEAR\Sniffs\Commenting" name="FunctionCommentSniff"/>
  <member name="skipIfInheritdoc" default="false" type="boolean" visibility="public" static="false" line="25">
    <docblock>
      <description compact="Whether to skip inheritdoc comments."/>
      <var type="boolean"/>
    </docblock>
  </member>
  <member name="phpVersion" default="NULL" visibility="private" static="false" line="32">
    <docblock>
      <description compact="The current PHP version."/>
      <var type="integer"/>
    </docblock>
  </member>
  <method name="processReturn" start="45" end="189" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Process the return comment of this function comment."/>
      <param description="The file being scanned." type="object" variable="$phpcsFile">
        <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
      </param>
      <param description="The position of the current token" type="int" variable="$stackPtr">in the stack passed in $tokens.</param>
      <param description="The position in the stack where the comment started." type="int" variable="$commentStart"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Standards\Squiz\Sniffs\Commenting\void" namespace="PHP_CodeSniffer\Standards\Squiz\Sniffs\Commenting" name="void"/>
      </return>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    <parameter name="commentStart" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Skip constructor and destructor." line="68"/>
      <comment value="end if" line="187"/>
    </inline>
  </method>
  <method name="processThrows" start="202" end="263" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Process any throw tags that this function comment has."/>
      <param description="The file being scanned." type="object" variable="$phpcsFile">
        <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
      </param>
      <param description="The position of the current token" type="int" variable="$stackPtr">in the stack passed in $tokens.</param>
      <param description="The position in the stack where the comment started." type="int" variable="$commentStart"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Standards\Squiz\Sniffs\Commenting\void" namespace="PHP_CodeSniffer\Standards\Squiz\Sniffs\Commenting" name="void"/>
      </return>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    <parameter name="commentStart" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="end foreach" line="261"/>
    </inline>
  </method>
  <method name="processParams" start="276" end="609" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Process the function parameter comments."/>
      <param description="The file being scanned." type="object" variable="$phpcsFile">
        <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
      </param>
      <param description="The position of the current token" type="int" variable="$stackPtr">in the stack passed in $tokens.</param>
      <param description="The position in the stack where the comment started." type="int" variable="$commentStart"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Standards\Squiz\Sniffs\Commenting\void" namespace="PHP_CodeSniffer\Standards\Squiz\Sniffs\Commenting" name="void"/>
      </return>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    <parameter name="commentStart" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="end foreach" line="382"/>
      <comment value="We want to use ... for all variable length arguments, so added" line="387"/>
      <comment value="this prefix to the variable name so comparisons are easier." line="388"/>
      <comment value="end foreach" line="594"/>
      <comment value="Report missing comments." line="601"/>
    </inline>
  </method>
  <method name="checkSpacingAfterParamType" start="622" end="668" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Check the spacing after the type of a parameter."/>
      <param description="The file being scanned." type="object" variable="$phpcsFile">
        <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
      </param>
      <param description="The parameter to be checked." type="array" variable="$param"/>
      <param description="The maxlength of the longest parameter type." type="int" variable="$maxType"/>
      <param description="The number of spaces to add after the type." type="int" variable="$spacing"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Standards\Squiz\Sniffs\Commenting\void" namespace="PHP_CodeSniffer\Standards\Squiz\Sniffs\Commenting" name="void"/>
      </return>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="param" byreference="false" type="{unknown}"/>
    <parameter name="maxType" byreference="false" type="{unknown}"/>
    <parameter name="spacing" byreference="false" type="integer" default="1"/>
    <inline>
      <comment value="Check number of spaces after the type." line="624"/>
      <comment value="end if" line="666"/>
    </inline>
  </method>
  <method name="checkSpacingAfterParamName" start="681" end="727" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Check the spacing after the name of a parameter."/>
      <param description="The file being scanned." type="object" variable="$phpcsFile">
        <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
      </param>
      <param description="The parameter to be checked." type="array" variable="$param"/>
      <param description="The maxlength of the longest parameter name." type="int" variable="$maxVar"/>
      <param description="The number of spaces to add after the type." type="int" variable="$spacing"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Standards\Squiz\Sniffs\Commenting\void" namespace="PHP_CodeSniffer\Standards\Squiz\Sniffs\Commenting" name="void"/>
      </return>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="param" byreference="false" type="{unknown}"/>
    <parameter name="maxVar" byreference="false" type="{unknown}"/>
    <parameter name="spacing" byreference="false" type="integer" default="1"/>
    <inline>
      <comment value="Check number of spaces after the var name." line="683"/>
      <comment value="end if" line="725"/>
    </inline>
  </method>
  <method name="checkInheritdoc" start="740" end="763" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Determines whether the whole comment is an inheritdoc comment."/>
      <param description="The file being scanned." type="object" variable="$phpcsFile">
        <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
      </param>
      <param description="The position of the current token" type="int" variable="$stackPtr">in the stack passed in $tokens.</param>
      <param description="The position in the stack where the comment started." type="int" variable="$commentStart"/>
      <return description="TRUE if the docblock contains only {@inheritdoc} (case-insensitive)." type="boolean"/>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    <parameter name="commentStart" byreference="false" type="{unknown}"/>
  </method>
  <extenders>
    <extender full="PHP_CodeSniffer\Standards\MySource\Sniffs\Commenting\FunctionCommentSniff" namespace="PHP_CodeSniffer\Standards\MySource\Sniffs\Commenting" name="FunctionCommentSniff"/>
  </extenders>
  <parent full="PHP_CodeSniffer\Standards\PEAR\Sniffs\Commenting\FunctionCommentSniff" namespace="PHP_CodeSniffer\Standards\PEAR\Sniffs\Commenting" name="FunctionCommentSniff">
    <implements full="PHP_CodeSniffer\Sniffs\Sniff" namespace="PHP_CodeSniffer\Sniffs" name="Sniff"/>
    <member name="minimumVisibility" default="'private'" type="string" visibility="public" static="false" line="26">
      <docblock>
        <description compact="Disable the check for functions with a lower visibility than the value given.">Allowed values are public, protected, and private.</description>
        <var type="string"/>
      </docblock>
    </member>
    <member name="specialMethods" default="" type="array" visibility="public" static="false" line="33">
      <docblock>
        <description compact="Array of methods which do not require a return type."/>
        <var type="array"/>
      </docblock>
    </member>
    <method name="register" start="44" end="48" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns an array of tokens this test wants to listen for."/>
        <return type="array"/>
      </docblock>
    </method>
    <method name="process" start="60" end="154" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Processes this test, when one of its tokens is encountered."/>
        <param description="The file being scanned." type="object" variable="$phpcsFile">
          <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
        </param>
        <param description="The position of the current token" type="int" variable="$stackPtr">in the stack passed in $tokens.</param>
        <return type="object">
          <type full="PHP_CodeSniffer\Standards\PEAR\Sniffs\Commenting\void" namespace="PHP_CodeSniffer\Standards\PEAR\Sniffs\Commenting" name="void"/>
        </return>
      </docblock>
      <parameter name="phpcsFile" byreference="false" type="object">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </parameter>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    </method>
    <method name="processReturn" start="167" end="203" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Process the return comment of this function comment."/>
        <param description="The file being scanned." type="object" variable="$phpcsFile">
          <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
        </param>
        <param description="The position of the current token" type="int" variable="$stackPtr">in the stack passed in $tokens.</param>
        <param description="The position in the stack where the comment started." type="int" variable="$commentStart"/>
        <return type="object">
          <type full="PHP_CodeSniffer\Standards\PEAR\Sniffs\Commenting\void" namespace="PHP_CodeSniffer\Standards\PEAR\Sniffs\Commenting" name="void"/>
        </return>
      </docblock>
      <parameter name="phpcsFile" byreference="false" type="object">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </parameter>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
      <parameter name="commentStart" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Skip constructor and destructor." line="171"/>
        <comment value="end if" line="201"/>
      </inline>
    </method>
    <method name="processThrows" start="216" end="238" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Process any throw tags that this function comment has."/>
        <param description="The file being scanned." type="object" variable="$phpcsFile">
          <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
        </param>
        <param description="The position of the current token" type="int" variable="$stackPtr">in the stack passed in $tokens.</param>
        <param description="The position in the stack where the comment started." type="int" variable="$commentStart"/>
        <return type="object">
          <type full="PHP_CodeSniffer\Standards\PEAR\Sniffs\Commenting\void" namespace="PHP_CodeSniffer\Standards\PEAR\Sniffs\Commenting" name="void"/>
        </return>
      </docblock>
      <parameter name="phpcsFile" byreference="false" type="object">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </parameter>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
      <parameter name="commentStart" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="end foreach" line="236"/>
      </inline>
    </method>
    <method name="processParams" start="251" end="522" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Process the function parameter comments."/>
        <param description="The file being scanned." type="object" variable="$phpcsFile">
          <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
        </param>
        <param description="The position of the current token" type="int" variable="$stackPtr">in the stack passed in $tokens.</param>
        <param description="The position in the stack where the comment started." type="int" variable="$commentStart"/>
        <return type="object">
          <type full="PHP_CodeSniffer\Standards\PEAR\Sniffs\Commenting\void" namespace="PHP_CodeSniffer\Standards\PEAR\Sniffs\Commenting" name="void"/>
        </return>
      </docblock>
      <parameter name="phpcsFile" byreference="false" type="object">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </parameter>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
      <parameter name="commentStart" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="end foreach" line="333"/>
        <comment value="We want to use ... for all variable length arguments, so add" line="338"/>
        <comment value="this prefix to the variable name so comparisons are easier." line="339"/>
        <comment value="end foreach" line="507"/>
        <comment value="Report missing comments." line="514"/>
      </inline>
    </method>
  </parent>
  <interface full="PHP_CodeSniffer\Sniffs\Sniff" namespace="PHP_CodeSniffer\Sniffs" name="Sniff">
    <method name="register" start="40" end="40" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Registers the tokens that this sniff wants to listen for.">An example return value for a sniff that wants to listen for whitespace
and any comments would be:

&lt;code&gt;
   return array(
           T_WHITESPACE,
           T_DOC_COMMENT,
           T_COMMENT,
          );
&lt;/code&gt;</description>
        <return type="array" of="object">
          <type full="PHP_CodeSniffer\Sniffs\mixed" namespace="PHP_CodeSniffer\Sniffs" name="mixed"/>
        </return>
        <see value="Tokens.php"/>
      </docblock>
    </method>
    <method name="process" start="77" end="77" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Called when one of the token types that this sniff is listening for is found.">The stackPtr variable indicates where in the stack the token was found.
A sniff can acquire information this token, along with all the other
tokens within the stack by first acquiring the token stack:

&lt;code&gt;
   $tokens = $phpcsFile-&gt;getTokens();
   echo 'Encountered a '.$tokens[$stackPtr]['type'].' token';
   echo 'token information: ';
   print_r($tokens[$stackPtr]);
&lt;/code&gt;

If the sniff discovers an anomaly in the code, they can raise an error
by calling addError() on the \PHP_CodeSniffer\Files\File object, specifying an error
message and the position of the offending token:

&lt;code&gt;
   $phpcsFile-&gt;addError('Encountered an error', $stackPtr);
&lt;/code&gt;</description>
        <param description="The PHP_CodeSniffer file where the" type="object" variable="$phpcsFile">token was found.<type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/></param>
        <param description="The position in the PHP_CodeSniffer" type="int" variable="$stackPtr">file's token stack where the token
                                              was found.</param>
        <return description="Optionally returns a stack pointer. The sniff will not be" type="object">called again on the current file until the returned stack
                 pointer is reached. Return (count($tokens) + 1) to skip
                 the rest of the file.<type full="PHP_CodeSniffer\Sniffs\void|int" namespace="PHP_CodeSniffer\Sniffs" name="void|int"/></return>
      </docblock>
      <parameter name="phpcsFile" byreference="false" type="object">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </parameter>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    </method>
  </interface>
</class>
