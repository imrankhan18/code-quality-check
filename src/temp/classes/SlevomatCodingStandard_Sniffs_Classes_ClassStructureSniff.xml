<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="SlevomatCodingStandard\Sniffs\Classes\ClassStructureSniff" namespace="SlevomatCodingStandard\Sniffs\Classes" name="ClassStructureSniff" abstract="false" final="false" start="43" end="676">
  <file path="//var/www/html/vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/Classes" file="ClassStructureSniff.php" realpath="/var/www/html/vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/Classes/ClassStructureSniff.php" size="22392" time="2022-03-29T12:44:16+00:00" unixtime="1648557856" sha1="8ca5e371805b3b164bef7cec9390f5904e1ef9bf" relative="ar/www/html/vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/Classes/ClassStructureSniff.php"/>
  <implements full="PHP_CodeSniffer\Sniffs\Sniff" namespace="PHP_CodeSniffer\Sniffs" name="Sniff"/>
  <constant type="string" name="CODE_INCORRECT_GROUP_ORDER" value="'IncorrectGroupOrder'"/>
  <constant type="string" name="GROUP_USES" value="'uses'"/>
  <constant type="string" name="GROUP_PUBLIC_CONSTANTS" value="'public constants'"/>
  <constant type="string" name="GROUP_PROTECTED_CONSTANTS" value="'protected constants'"/>
  <constant type="string" name="GROUP_PRIVATE_CONSTANTS" value="'private constants'"/>
  <constant type="string" name="GROUP_PUBLIC_PROPERTIES" value="'public properties'"/>
  <constant type="string" name="GROUP_PUBLIC_STATIC_PROPERTIES" value="'public static properties'"/>
  <constant type="string" name="GROUP_PROTECTED_PROPERTIES" value="'protected properties'"/>
  <constant type="string" name="GROUP_PROTECTED_STATIC_PROPERTIES" value="'protected static properties'"/>
  <constant type="string" name="GROUP_PRIVATE_PROPERTIES" value="'private properties'"/>
  <constant type="string" name="GROUP_PRIVATE_STATIC_PROPERTIES" value="'private static properties'"/>
  <constant type="string" name="GROUP_CONSTRUCTOR" value="'constructor'"/>
  <constant type="string" name="GROUP_STATIC_CONSTRUCTORS" value="'static constructors'"/>
  <constant type="string" name="GROUP_DESTRUCTOR" value="'destructor'"/>
  <constant type="string" name="GROUP_MAGIC_METHODS" value="'magic methods'"/>
  <constant type="string" name="GROUP_PUBLIC_METHODS" value="'public methods'"/>
  <constant type="string" name="GROUP_PUBLIC_ABSTRACT_METHODS" value="'public abstract methods'"/>
  <constant type="string" name="GROUP_PUBLIC_FINAL_METHODS" value="'public final methods'"/>
  <constant type="string" name="GROUP_PUBLIC_STATIC_METHODS" value="'public static methods'"/>
  <constant type="string" name="GROUP_PUBLIC_STATIC_ABSTRACT_METHODS" value="'public static abstract methods'"/>
  <constant type="string" name="GROUP_PUBLIC_STATIC_FINAL_METHODS" value="'public static final methods'"/>
  <constant type="string" name="GROUP_PROTECTED_METHODS" value="'protected methods'"/>
  <constant type="string" name="GROUP_PROTECTED_ABSTRACT_METHODS" value="'protected abstract methods'"/>
  <constant type="string" name="GROUP_PROTECTED_FINAL_METHODS" value="'protected final methods'"/>
  <constant type="string" name="GROUP_PROTECTED_STATIC_METHODS" value="'protected static methods'"/>
  <constant type="string" name="GROUP_PROTECTED_STATIC_ABSTRACT_METHODS" value="'protected static abstract methods'"/>
  <constant type="string" name="GROUP_PROTECTED_STATIC_FINAL_METHODS" value="'protected static final methods'"/>
  <constant type="string" name="GROUP_PRIVATE_METHODS" value="'private methods'"/>
  <constant type="string" name="GROUP_PRIVATE_STATIC_METHODS" value="'private static methods'"/>
  <constant type="string" name="GROUP_SHORTCUT_CONSTANTS" value="'constants'"/>
  <constant type="string" name="GROUP_SHORTCUT_PROPERTIES" value="'properties'"/>
  <constant type="string" name="GROUP_SHORTCUT_STATIC_PROPERTIES" value="'static properties'"/>
  <constant type="string" name="GROUP_SHORTCUT_METHODS" value="'methods'"/>
  <constant type="string" name="GROUP_SHORTCUT_PUBLIC_METHODS" value="'all public methods'"/>
  <constant type="string" name="GROUP_SHORTCUT_PROTECTED_METHODS" value="'all protected methods'"/>
  <constant type="string" name="GROUP_SHORTCUT_PRIVATE_METHODS" value="'all private methods'"/>
  <constant type="string" name="GROUP_SHORTCUT_STATIC_METHODS" value="'static methods'"/>
  <constant type="string" name="GROUP_SHORTCUT_ABSTRACT_METHODS" value="'abstract methods'"/>
  <constant type="string" name="GROUP_SHORTCUT_FINAL_METHODS" value="'final methods'"/>
  <constant type="array" name="SHORTCUTS" value=""/>
  <constant type="array" name="SPECIAL_METHODS" value=""/>
  <member name="groups" default="" type="array" visibility="public" static="false" line="181">
    <docblock>
      <var type="array" of="object">
        <type full="SlevomatCodingStandard\Sniffs\Classes\string" namespace="SlevomatCodingStandard\Sniffs\Classes" name="string"/>
      </var>
    </docblock>
  </member>
  <member name="enableFinalMethods" default="false" type="boolean" visibility="public" static="false" line="184">
    <docblock>
      <var type="object">
        <type full="SlevomatCodingStandard\Sniffs\Classes\bool" namespace="SlevomatCodingStandard\Sniffs\Classes" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="normalizedGroups" visibility="private" static="false" line="187">
    <docblock>
      <var description="int&gt;|null" type="object">
        <type full="SlevomatCodingStandard\Sniffs\Classes\array&lt;string" namespace="SlevomatCodingStandard\Sniffs\Classes" name="array&lt;string"/>
      </var>
    </docblock>
  </member>
  <method name="register" start="192" end="195" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return description="(int|string)&gt;" type="object">
        <type full="SlevomatCodingStandard\Sniffs\Classes\array&lt;int" namespace="SlevomatCodingStandard\Sniffs\Classes" name="array&lt;int"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
  </method>
  <method name="process" start="201" end="260" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <phpcssuppress value="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint"/>
      <param type="int" variable="$pointer"/>
    </docblock>
    <return type="int" nullable="false"/>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="pointer" byreference="false" type="{unknown}"/>
  </method>
  <method name="findNextGroup" start="266" end="315" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param description="int level: int} $rootScopeToken" type="object">
        <type full="SlevomatCodingStandard\Sniffs\Classes\array{scope_closer:" namespace="SlevomatCodingStandard\Sniffs\Classes" name="array{scope_closer:"/>
      </param>
      <return description="int, string}|null" type="object">
        <type full="SlevomatCodingStandard\Sniffs\Classes\array{int" namespace="SlevomatCodingStandard\Sniffs\Classes" name="array{int"/>
      </return>
    </docblock>
    <return type="array" nullable="true"/>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="pointer" byreference="false" type="int"/>
    <parameter name="rootScopeToken" byreference="false" type="array"/>
  </method>
  <method name="getGroupForToken" start="317" end="386" abstract="false" final="false" static="false" visibility="private">
    <return type="string" nullable="false"/>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="pointer" byreference="false" type="int"/>
  </method>
  <method name="getVisibilityForToken" start="388" end="403" abstract="false" final="false" static="false" visibility="private">
    <return type="int" nullable="false"/>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="pointer" byreference="false" type="int"/>
  </method>
  <method name="isMemberStatic" start="405" end="413" abstract="false" final="false" static="false" visibility="private">
    <return type="bool" nullable="false"/>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="pointer" byreference="false" type="int"/>
  </method>
  <method name="isMethodFinal" start="415" end="423" abstract="false" final="false" static="false" visibility="private">
    <return type="bool" nullable="false"/>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="pointer" byreference="false" type="int"/>
  </method>
  <method name="isMethodAbstract" start="425" end="433" abstract="false" final="false" static="false" visibility="private">
    <return type="bool" nullable="false"/>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="pointer" byreference="false" type="int"/>
  </method>
  <method name="isStaticConstructor" start="435" end="450" abstract="false" final="false" static="false" visibility="private">
    <return type="bool" nullable="false"/>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="pointer" byreference="false" type="int"/>
  </method>
  <method name="getParentClassName" start="452" end="458" abstract="false" final="false" static="false" visibility="private">
    <return type="string" nullable="false"/>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="pointer" byreference="false" type="int"/>
  </method>
  <method name="fixIncorrectGroupOrder" start="460" end="490" abstract="false" final="false" static="false" visibility="private">
    <return type="void" nullable="false"/>
    <parameter name="file" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="groupFirstMemberPointer" byreference="false" type="int"/>
    <parameter name="groupLastMemberPointer" byreference="false" type="int"/>
    <parameter name="nextGroupMemberPointer" byreference="false" type="int"/>
  </method>
  <method name="findPreviousMemberEndPointer" start="492" end="499" abstract="false" final="false" static="false" visibility="private">
    <return type="int" nullable="false"/>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="memberPointer" byreference="false" type="int"/>
  </method>
  <method name="findGroupStartPointer" start="501" end="516" abstract="false" final="false" static="false" visibility="private">
    <return type="int" nullable="false"/>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="memberPointer" byreference="false" type="int"/>
    <parameter name="previousMemberEndPointer" byreference="false" nullable="true" type="int" default="NULL"/>
  </method>
  <method name="findGroupEndPointer" start="518" end="530" abstract="false" final="false" static="false" visibility="private">
    <return type="int" nullable="false"/>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="memberPointer" byreference="false" type="int"/>
  </method>
  <method name="removeBlankLinesAfterMember" start="532" end="549" abstract="false" final="false" static="false" visibility="private">
    <return type="int" nullable="false"/>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="memberEndPointer" byreference="false" type="int"/>
    <parameter name="endPointer" byreference="false" type="int"/>
  </method>
  <method name="getNormalizedGroups" start="554" end="650" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <return description="int&gt;" type="object">
        <type full="SlevomatCodingStandard\Sniffs\Classes\array&lt;string" namespace="SlevomatCodingStandard\Sniffs\Classes" name="array&lt;string"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
  </method>
  <method name="unpackShortcut" start="656" end="674" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param description="string&gt; $supportedGroups" type="object">
        <type full="SlevomatCodingStandard\Sniffs\Classes\array&lt;int" namespace="SlevomatCodingStandard\Sniffs\Classes" name="array&lt;int"/>
      </param>
      <return description="string&gt;" type="object">
        <type full="SlevomatCodingStandard\Sniffs\Classes\array&lt;int" namespace="SlevomatCodingStandard\Sniffs\Classes" name="array&lt;int"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
    <parameter name="shortcut" byreference="false" type="string"/>
    <parameter name="supportedGroups" byreference="false" type="array"/>
  </method>
  <interface full="PHP_CodeSniffer\Sniffs\Sniff" namespace="PHP_CodeSniffer\Sniffs" name="Sniff">
    <method name="register" start="40" end="40" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Registers the tokens that this sniff wants to listen for.">An example return value for a sniff that wants to listen for whitespace
and any comments would be:

&lt;code&gt;
   return array(
           T_WHITESPACE,
           T_DOC_COMMENT,
           T_COMMENT,
          );
&lt;/code&gt;</description>
        <return type="array" of="object">
          <type full="PHP_CodeSniffer\Sniffs\mixed" namespace="PHP_CodeSniffer\Sniffs" name="mixed"/>
        </return>
        <see value="Tokens.php"/>
      </docblock>
    </method>
    <method name="process" start="77" end="77" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Called when one of the token types that this sniff is listening for is found.">The stackPtr variable indicates where in the stack the token was found.
A sniff can acquire information this token, along with all the other
tokens within the stack by first acquiring the token stack:

&lt;code&gt;
   $tokens = $phpcsFile-&gt;getTokens();
   echo 'Encountered a '.$tokens[$stackPtr]['type'].' token';
   echo 'token information: ';
   print_r($tokens[$stackPtr]);
&lt;/code&gt;

If the sniff discovers an anomaly in the code, they can raise an error
by calling addError() on the \PHP_CodeSniffer\Files\File object, specifying an error
message and the position of the offending token:

&lt;code&gt;
   $phpcsFile-&gt;addError('Encountered an error', $stackPtr);
&lt;/code&gt;</description>
        <param description="The PHP_CodeSniffer file where the" type="object" variable="$phpcsFile">token was found.<type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/></param>
        <param description="The position in the PHP_CodeSniffer" type="int" variable="$stackPtr">file's token stack where the token
                                              was found.</param>
        <return description="Optionally returns a stack pointer. The sniff will not be" type="object">called again on the current file until the returned stack
                 pointer is reached. Return (count($tokens) + 1) to skip
                 the rest of the file.<type full="PHP_CodeSniffer\Sniffs\void|int" namespace="PHP_CodeSniffer\Sniffs" name="void|int"/></return>
      </docblock>
      <parameter name="phpcsFile" byreference="false" type="object">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </parameter>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    </method>
  </interface>
</class>
