<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Composer\Repository\ComposerRepository" namespace="Composer\Repository" name="ComposerRepository" abstract="false" final="false" start="47" end="1625">
  <file path="//var/www/html/vendor/composer/composer/src/Composer/Repository" file="ComposerRepository.php" realpath="/var/www/html/vendor/composer/composer/src/Composer/Repository/ComposerRepository.php" size="64586" time="2022-04-13T14:43:00+00:00" unixtime="1649860980" sha1="5dd1d5161fc77d1d8f00c8c85c612fd97b8ab0c8" relative="ar/www/html/vendor/composer/composer/src/Composer/Repository/ComposerRepository.php"/>
  <docblock>
    <description/>
    <author value="Jordi Boggiano &lt;j.boggiano@seld.be&gt;"/>
  </docblock>
  <extends full="Composer\Repository\ArrayRepository" namespace="Composer\Repository" name="ArrayRepository"/>
  <implements full="Composer\Repository\ConfigurableRepositoryInterface" namespace="Composer\Repository" name="ConfigurableRepositoryInterface"/>
  <member name="repoConfig" visibility="private" static="false" line="53">
    <docblock>
      <description/>
      <var type="array" of="object">
        <type full="Composer\Repository\mixed" namespace="Composer\Repository" name="mixed"/>
      </var>
      <phpstan value="-var array{url: string, options?: mixed[], type?: 'composer', allow_ssl_downgrade?: bool}"/>
    </docblock>
  </member>
  <member name="options" visibility="private" static="false" line="55">
    <docblock>
      <var type="array" of="object">
        <type full="Composer\Repository\mixed" namespace="Composer\Repository" name="mixed"/>
      </var>
    </docblock>
  </member>
  <member name="url" visibility="private" static="false" line="57">
    <docblock>
      <var type="string"/>
    </docblock>
  </member>
  <member name="baseUrl" visibility="private" static="false" line="59">
    <docblock>
      <var type="string"/>
    </docblock>
  </member>
  <member name="io" visibility="private" static="false" line="61">
    <docblock>
      <var type="object">
        <type full="Composer\IO\IOInterface" namespace="Composer\IO" name="IOInterface"/>
      </var>
    </docblock>
  </member>
  <member name="httpDownloader" visibility="private" static="false" line="63">
    <docblock>
      <var type="object">
        <type full="Composer\Util\HttpDownloader" namespace="Composer\Util" name="HttpDownloader"/>
      </var>
    </docblock>
  </member>
  <member name="loop" visibility="private" static="false" line="65">
    <docblock>
      <var type="object">
        <type full="Composer\Util\Loop" namespace="Composer\Util" name="Loop"/>
      </var>
    </docblock>
  </member>
  <member name="cache" visibility="protected" static="false" line="67">
    <docblock>
      <var type="object">
        <type full="Composer\Cache" namespace="Composer" name="Cache"/>
      </var>
    </docblock>
  </member>
  <member name="notifyUrl" default="NULL" visibility="protected" static="false" line="69">
    <docblock>
      <var type="object">
        <type full="Composer\Repository\?string" namespace="Composer\Repository" name="?string"/>
      </var>
    </docblock>
  </member>
  <member name="searchUrl" default="NULL" visibility="protected" static="false" line="71">
    <docblock>
      <var type="object">
        <type full="Composer\Repository\?string" namespace="Composer\Repository" name="?string"/>
      </var>
    </docblock>
  </member>
  <member name="providersApiUrl" default="NULL" visibility="protected" static="false" line="73">
    <docblock>
      <var description="a URL containing %package% which can be queried to get providers of a given name" type="object">
        <type full="Composer\Repository\?string" namespace="Composer\Repository" name="?string"/>
      </var>
    </docblock>
  </member>
  <member name="hasProviders" default="false" type="boolean" visibility="protected" static="false" line="75">
    <docblock>
      <var type="object">
        <type full="Composer\Repository\bool" namespace="Composer\Repository" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="providersUrl" default="NULL" visibility="protected" static="false" line="77">
    <docblock>
      <var type="object">
        <type full="Composer\Repository\?string" namespace="Composer\Repository" name="?string"/>
      </var>
    </docblock>
  </member>
  <member name="listUrl" default="NULL" visibility="protected" static="false" line="79">
    <docblock>
      <var type="object">
        <type full="Composer\Repository\?string" namespace="Composer\Repository" name="?string"/>
      </var>
    </docblock>
  </member>
  <member name="hasAvailablePackageList" default="false" type="boolean" visibility="protected" static="false" line="81">
    <docblock>
      <var description="Indicates whether a comprehensive list of packages this repository might provide is expressed in the repository root." type="object">
        <type full="Composer\Repository\bool" namespace="Composer\Repository" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="availablePackages" default="NULL" visibility="protected" static="false" line="83">
    <docblock>
      <var type="object">
        <type full="Composer\Repository\?array&lt;string&gt;" namespace="Composer\Repository" name="?array&lt;string&gt;"/>
      </var>
    </docblock>
  </member>
  <member name="availablePackagePatterns" default="NULL" visibility="protected" static="false" line="85">
    <docblock>
      <var type="object">
        <type full="Composer\Repository\?array&lt;non-empty-string&gt;" namespace="Composer\Repository" name="?array&lt;non-empty-string&gt;"/>
      </var>
    </docblock>
  </member>
  <member name="lazyProvidersUrl" default="NULL" visibility="protected" static="false" line="87">
    <docblock>
      <var type="object">
        <type full="Composer\Repository\?string" namespace="Composer\Repository" name="?string"/>
      </var>
    </docblock>
  </member>
  <member name="providerListing" visibility="protected" static="false" line="89">
    <docblock>
      <var description="array{sha256: string}&gt;" type="object">
        <type full="Composer\Repository\?array&lt;string" namespace="Composer\Repository" name="?array&lt;string"/>
      </var>
    </docblock>
  </member>
  <member name="loader" visibility="protected" static="false" line="91">
    <docblock>
      <var type="object">
        <type full="Composer\Package\Loader\ArrayLoader" namespace="Composer\Package\Loader" name="ArrayLoader"/>
      </var>
    </docblock>
  </member>
  <member name="allowSslDowngrade" default="false" type="boolean" visibility="private" static="false" line="93">
    <docblock>
      <var type="object">
        <type full="Composer\Repository\bool" namespace="Composer\Repository" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="eventDispatcher" visibility="private" static="false" line="95">
    <docblock>
      <var type="object">
        <type full="Composer\Repository\?EventDispatcher" namespace="Composer\Repository" name="?EventDispatcher"/>
      </var>
    </docblock>
  </member>
  <member name="sourceMirrors" visibility="private" static="false" line="97">
    <docblock>
      <var description="array&lt;int, array{url: string, preferred: bool}&gt;&gt;" type="object">
        <type full="Composer\Repository\?array&lt;string" namespace="Composer\Repository" name="?array&lt;string"/>
      </var>
    </docblock>
  </member>
  <member name="distMirrors" visibility="private" static="false" line="99">
    <docblock>
      <var description="array{url: string, preferred: bool}&gt;" type="object">
        <type full="Composer\Repository\?array&lt;int" namespace="Composer\Repository" name="?array&lt;int"/>
      </var>
    </docblock>
  </member>
  <member name="degradedMode" default="false" type="boolean" visibility="private" static="false" line="101">
    <docblock>
      <var type="object">
        <type full="Composer\Repository\bool" namespace="Composer\Repository" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="rootData" visibility="private" static="false" line="103">
    <docblock>
      <var type="array" of="object">
        <type full="Composer\Repository\mixed[]|tr" namespace="Composer\Repository" name="mixed[]|tr"/>
      </var>
    </docblock>
  </member>
  <member name="hasPartialPackages" default="false" type="boolean" visibility="private" static="false" line="105">
    <docblock>
      <var type="object">
        <type full="Composer\Repository\bool" namespace="Composer\Repository" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="partialPackagesByName" default="NULL" visibility="private" static="false" line="107">
    <docblock>
      <var description="mixed[]&gt;" type="object">
        <type full="Composer\Repository\?array&lt;string" namespace="Composer\Repository" name="?array&lt;string"/>
      </var>
    </docblock>
  </member>
  <member name="freshMetadataUrls" default="" type="array" visibility="private" static="false" line="114">
    <docblock>
      <description/>
      <var description="list of package names which are fresh and can be loaded from the cache directly in case loadPackage is called several times" type="array">useful for v2 metadata repositories with lazy providers</var>
      <phpstan value="-var array&lt;string, true&gt;"/>
    </docblock>
  </member>
  <member name="packagesNotFoundCache" default="" type="array" visibility="private" static="false" line="121">
    <docblock>
      <description/>
      <var description="list of package names which returned a 404 and should not be re-fetched in case loadPackage is called several times" type="array">useful for v2 metadata repositories with lazy providers</var>
      <phpstan value="-var array&lt;string, true&gt;"/>
    </docblock>
  </member>
  <member name="versionParser" visibility="private" static="false" line="126">
    <docblock>
      <description/>
      <var type="object">
        <type full="Composer\Package\Version\VersionParser" namespace="Composer\Package\Version" name="VersionParser"/>
      </var>
    </docblock>
  </member>
  <constructor name="__construct" start="132" end="175" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param description="mixed&gt; $repoConfig" type="object">
        <type full="Composer\Repository\array&lt;string" namespace="Composer\Repository" name="array&lt;string"/>
      </param>
      <phpstan value="-param array{url: string, options?: mixed[], type?: 'composer', allow_ssl_downgrade?: bool} $repoConfig"/>
    </docblock>
    <parameter name="repoConfig" byreference="false" type="array"/>
    <parameter name="io" byreference="false" type="object">
      <type full="Composer\IO\IOInterface" namespace="Composer\IO" name="IOInterface"/>
    </parameter>
    <parameter name="config" byreference="false" type="object">
      <type full="Composer\Config" namespace="Composer" name="Config"/>
    </parameter>
    <parameter name="httpDownloader" byreference="false" type="object">
      <type full="Composer\Util\HttpDownloader" namespace="Composer\Util" name="HttpDownloader"/>
    </parameter>
    <parameter name="eventDispatcher" byreference="false" type="object" default="NULL">
      <type full="Composer\EventDispatcher\EventDispatcher" namespace="Composer\EventDispatcher" name="EventDispatcher"/>
    </parameter>
    <inline>
      <comment value="force url for packagist.org to repo.packagist.org" line="160"/>
    </inline>
  </constructor>
  <method name="getRepoName" start="177" end="180" abstract="false" final="false" static="false" visibility="public"/>
  <method name="getRepoConfig" start="182" end="185" abstract="false" final="false" static="false" visibility="public"/>
  <method name="findPackage" start="190" end="229" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <inheritdoc/>
    </docblock>
    <parameter name="name" byreference="false" type="string"/>
    <parameter name="constraint" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="this call initializes loadRootServerFile which is needed for the rest below to work" line="192"/>
    </inline>
  </method>
  <method name="findPackages" start="234" end="269" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <inheritdoc/>
    </docblock>
    <parameter name="name" byreference="false" type="string"/>
    <parameter name="constraint" byreference="false" type="{unknown}" default="NULL"/>
    <inline>
      <comment value="this call initializes loadRootServerFile which is needed for the rest below to work" line="236"/>
    </inline>
  </method>
  <method name="filterPackages" start="278" end="307" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="object" variable="$packages">
        <type full="Composer\Repository\array&lt;BasePackage&gt;" namespace="Composer\Repository" name="array&lt;BasePackage&gt;"/>
      </param>
      <param type="object" variable="$constraint">
        <type full="Composer\Repository\ConstraintInterface|null" namespace="Composer\Repository" name="ConstraintInterface|null"/>
      </param>
      <param type="object" variable="$returnFirstMatch">
        <type full="Composer\Repository\bool" namespace="Composer\Repository" name="bool"/>
      </param>
      <return type="object">
        <type full="Composer\Repository\BasePackage|array&lt;BasePackage&gt;|null" namespace="Composer\Repository" name="BasePackage|array&lt;BasePackage&gt;|null"/>
      </return>
    </docblock>
    <parameter name="packages" byreference="false" type="array"/>
    <parameter name="constraint" byreference="false" nullable="true" type="object" default="NULL">
      <type full="Composer\Semver\Constraint\ConstraintInterface" namespace="Composer\Semver\Constraint" name="ConstraintInterface"/>
    </parameter>
    <parameter name="returnFirstMatch" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="getPackages" start="309" end="341" abstract="false" final="false" static="false" visibility="public"/>
  <method name="getPackageNames" start="348" end="402" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param description="Package pattern filter which can include &quot;*&quot; as a wildcard" type="object" variable="$packageFilter">
        <type full="Composer\Repository\string|null" namespace="Composer\Repository" name="string|null"/>
      </param>
      <return type="array" of="object">
        <type full="Composer\Repository\string" namespace="Composer\Repository" name="string"/>
      </return>
    </docblock>
    <parameter name="packageFilter" byreference="false" nullable="true" type="string" default="NULL"/>
  </method>
  <method name="getVendorNames" start="407" end="432" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <return type="object">
        <type full="Composer\Repository\list&lt;string&gt;" namespace="Composer\Repository" name="list&lt;string&gt;"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
  </method>
  <method name="loadPackageList" start="438" end="466" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="object" variable="$packageFilter">
        <type full="Composer\Repository\string|null" namespace="Composer\Repository" name="string|null"/>
      </param>
      <return type="object">
        <type full="Composer\Repository\list&lt;string&gt;" namespace="Composer\Repository" name="list&lt;string&gt;"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
    <parameter name="packageFilter" byreference="false" nullable="true" type="string" default="NULL"/>
  </method>
  <method name="loadPackages" start="468" end="534" abstract="false" final="false" static="false" visibility="public">
    <parameter name="packageNameMap" byreference="false" type="array"/>
    <parameter name="acceptableStabilities" byreference="false" type="array"/>
    <parameter name="stabilityFlags" byreference="false" type="array"/>
    <parameter name="alreadyLoaded" byreference="false" type="array" default=""/>
    <inline>
      <comment value="this call initializes loadRootServerFile which is needed for the rest below to work" line="470"/>
    </inline>
  </method>
  <method name="search" start="539" end="603" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <inheritdoc/>
    </docblock>
    <parameter name="query" byreference="false" type="string"/>
    <parameter name="mode" byreference="false" type="integer" default="0"/>
    <parameter name="type" byreference="false" nullable="true" type="string" default="NULL"/>
  </method>
  <method name="getProviders" start="605" end="643" abstract="false" final="false" static="false" visibility="public">
    <parameter name="packageName" byreference="false" type="string"/>
  </method>
  <method name="getProviderNames" start="648" end="669" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <return type="array" of="object">
        <type full="Composer\Repository\string" namespace="Composer\Repository" name="string"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
  </method>
  <method name="configurePackageTransportOptions" start="671" end="680" abstract="false" final="false" static="false" visibility="protected">
    <return type="void" nullable="false"/>
    <parameter name="package" byreference="false" type="object">
      <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
    </parameter>
  </method>
  <method name="hasProviders" start="685" end="690" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <return type="object">
        <type full="Composer\Repository\bool" namespace="Composer\Repository" name="bool"/>
      </return>
    </docblock>
    <return type="bool" nullable="false"/>
  </method>
  <method name="whatProvides" start="702" end="836" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param description="package name" type="string" variable="$name"/>
      <param description="int&gt;|null $acceptableStabilities" type="object">
        <type full="Composer\Repository\array&lt;string" namespace="Composer\Repository" name="array&lt;string"/>
      </param>
      <param description="int&gt;|null $stabilityFlags an array of package name =&gt; BasePackage::STABILITY_* value" type="object">
        <type full="Composer\Repository\array&lt;string" namespace="Composer\Repository" name="array&lt;string"/>
      </param>
      <param description="array&lt;string PackageInterface&gt;&gt; $alreadyLoaded" type="object">
        <type full="Composer\Repository\array&lt;string" namespace="Composer\Repository" name="array&lt;string"/>
      </param>
      <phpstan value="-param array&lt;string, BasePackage::STABILITY_*&gt;|null $acceptableStabilities"/>
      <phpstan value="-param array&lt;string, BasePackage::STABILITY_*&gt;|null $stabilityFlags"/>
      <return description="BasePackage&gt;" type="object">
        <type full="Composer\Repository\array&lt;string" namespace="Composer\Repository" name="array&lt;string"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
    <parameter name="name" byreference="false" type="string"/>
    <parameter name="acceptableStabilities" byreference="false" type="array" default="NULL"/>
    <parameter name="stabilityFlags" byreference="false" type="array" default="NULL"/>
    <parameter name="alreadyLoaded" byreference="false" type="array" default=""/>
    <inline>
      <comment value="load acceptable packages in the providers" line="816"/>
    </inline>
  </method>
  <method name="initialize" start="841" end="850" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description/>
      <inheritdoc/>
    </docblock>
  </method>
  <method name="addPackage" start="857" end="861" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds a new package to the repository"/>
      <param type="object" variable="$package">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </param>
    </docblock>
    <parameter name="package" byreference="false" type="object">
      <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
    </parameter>
  </method>
  <method name="loadAsyncPackages" start="873" end="970" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param description="ConstraintInterface|null&gt; $packageNames array of package name =&gt; ConstraintInterface|null - if a constraint is provided, only packages matching it will be loaded" type="object">
        <type full="Composer\Repository\array&lt;string" namespace="Composer\Repository" name="array&lt;string"/>
      </param>
      <param description="int&gt;|null $acceptableStabilities" type="object">
        <type full="Composer\Repository\array&lt;string" namespace="Composer\Repository" name="array&lt;string"/>
      </param>
      <param description="int&gt;|null $stabilityFlags an array of package name =&gt; BasePackage::STABILITY_* value" type="object">
        <type full="Composer\Repository\array&lt;string" namespace="Composer\Repository" name="array&lt;string"/>
      </param>
      <param description="array&lt;string PackageInterface&gt;&gt; $alreadyLoaded" type="object">
        <type full="Composer\Repository\array&lt;string" namespace="Composer\Repository" name="array&lt;string"/>
      </param>
      <phpstan value="-param array&lt;string, BasePackage::STABILITY_*&gt;|null $acceptableStabilities"/>
      <phpstan value="-param array&lt;string, BasePackage::STABILITY_*&gt;|null $stabilityFlags"/>
      <return description="array&lt;string, true&gt;, packages: array&lt;string, BasePackage&gt;}" type="object">
        <type full="Composer\Repository\array{namesFound:" namespace="Composer\Repository" name="array{namesFound:"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
    <parameter name="packageNames" byreference="false" type="array"/>
    <parameter name="acceptableStabilities" byreference="false" type="array" default="NULL"/>
    <parameter name="stabilityFlags" byreference="false" type="array" default="NULL"/>
    <parameter name="alreadyLoaded" byreference="false" type="array" default=""/>
    <inline>
      <comment value="load ~dev versions of the packages as well if needed" line="885"/>
      <comment value="RepositorySet should call loadMetadata, getMetadata when all promises resolved, then metadataComplete when done so we can GC the loaded json and whatnot then as needed" line="969"/>
    </inline>
  </method>
  <method name="isVersionAcceptable" start="983" end="1004" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="object" variable="$constraint">
        <type full="Composer\Repository\ConstraintInterface|null" namespace="Composer\Repository" name="ConstraintInterface|null"/>
      </param>
      <param description="package name (must be lowercased already)" type="string" variable="$name"/>
      <param description="mixed&gt; $versionData" type="object">
        <type full="Composer\Repository\array&lt;string" namespace="Composer\Repository" name="array&lt;string"/>
      </param>
      <param description="int&gt;|null $acceptableStabilities" type="object">
        <type full="Composer\Repository\array&lt;string" namespace="Composer\Repository" name="array&lt;string"/>
      </param>
      <param description="int&gt;|null $stabilityFlags an array of package name =&gt; BasePackage::STABILITY_* value" type="object">
        <type full="Composer\Repository\array&lt;string" namespace="Composer\Repository" name="array&lt;string"/>
      </param>
      <phpstan value="-param array&lt;string, BasePackage::STABILITY_*&gt;|null $acceptableStabilities"/>
      <phpstan value="-param array&lt;string, BasePackage::STABILITY_*&gt;|null $stabilityFlags"/>
      <return type="object">
        <type full="Composer\Repository\bool" namespace="Composer\Repository" name="bool"/>
      </return>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="constraint" byreference="false" nullable="true" type="object">
      <type full="Composer\Semver\Constraint\ConstraintInterface" namespace="Composer\Semver\Constraint" name="ConstraintInterface"/>
    </parameter>
    <parameter name="name" byreference="false" type="string"/>
    <parameter name="versionData" byreference="false" type="array"/>
    <parameter name="acceptableStabilities" byreference="false" type="array" default="NULL"/>
    <parameter name="stabilityFlags" byreference="false" type="array" default="NULL"/>
  </method>
  <method name="getPackagesJsonUrl" start="1009" end="1018" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <return type="string"/>
    </docblock>
    <return type="string" nullable="false"/>
  </method>
  <method name="loadRootServerFile" start="1024" end="1139" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description/>
      <param type="object" variable="$rootMaxAge">
        <type full="Composer\Repository\int|null" namespace="Composer\Repository" name="int|null"/>
      </param>
      <return description="mixed&gt;|true" type="object">
        <type full="Composer\Repository\array&lt;'providers'|'provider-includes'|'packages'|'providers-url'|'notify-batch'|'search'|'mirrors'|'providers-lazy-url'|'metadata-url'|'available-packages'|'available-package-patterns'" namespace="Composer\Repository" name="array&lt;'providers'|'provider-includes'|'packages'|'providers-url'|'notify-batch'|'search'|'mirrors'|'providers-lazy-url'|'metadata-url'|'available-packages'|'available-package-patterns'"/>
      </return>
    </docblock>
    <parameter name="rootMaxAge" byreference="false" nullable="true" type="int" default="NULL"/>
    <inline>
      <comment value="metadata-url indicates V2 repo protocol so it takes over from all the V1 types" line="1082"/>
      <comment value="V2 only has lazyProviders and possibly partial packages, but no ability to process anything else," line="1083"/>
      <comment value="V2 also supports async loading" line="1084"/>
    </inline>
  </method>
  <method name="canonicalizeUrl" start="1146" end="1157" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="string" variable="$url"/>
      <return type="string"/>
    </docblock>
    <return type="string" nullable="false"/>
    <parameter name="url" byreference="false" type="string"/>
  </method>
  <method name="loadDataFromServer" start="1162" end="1170" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <return type="array" of="object">
        <type full="Composer\Repository\mixed" namespace="Composer\Repository" name="mixed"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
  </method>
  <method name="hasPartialPackages" start="1175" end="1182" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <return type="object">
        <type full="Composer\Repository\bool" namespace="Composer\Repository" name="bool"/>
      </return>
    </docblock>
    <return type="bool" nullable="false"/>
  </method>
  <method name="loadProviderListings" start="1189" end="1212" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param description="mixed[] provider-includes?: mixed[]} $data" type="object">
        <type full="Composer\Repository\array{providers?:" namespace="Composer\Repository" name="array{providers?:"/>
      </param>
      <return type="object">
        <type full="Composer\Repository\void" namespace="Composer\Repository" name="void"/>
      </return>
    </docblock>
    <return type="void" nullable="false"/>
    <parameter name="data" byreference="false" type="{unknown}"/>
  </method>
  <method name="loadIncludes" start="1219" end="1256" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="array" variable="$data" of="object">
        <type full="Composer\Repository\mixed" namespace="Composer\Repository" name="mixed"/>
      </param>
      <return type="array" of="object">
        <type full="Composer\Repository\mixed" namespace="Composer\Repository" name="mixed"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
    <parameter name="data" byreference="false" type="array"/>
    <inline>
      <comment value="legacy repo handling" line="1223"/>
    </inline>
  </method>
  <method name="createPackages" start="1264" end="1291" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="array" variable="$packages" of="object">
        <type full="Composer\Repository\mixed" namespace="Composer\Repository" name="mixed"/>
      </param>
      <param type="object" variable="$source">
        <type full="Composer\Repository\string|null" namespace="Composer\Repository" name="string|null"/>
      </param>
      <return type="object">
        <type full="Composer\Repository\list&lt;CompletePackage|CompleteAliasPackage&gt;" namespace="Composer\Repository" name="list&lt;CompletePackage|CompleteAliasPackage&gt;"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
    <parameter name="packages" byreference="false" type="array"/>
    <parameter name="source" byreference="false" nullable="true" type="string" default="NULL"/>
  </method>
  <method name="fetchFile" start="1301" end="1399" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description/>
      <param type="string" variable="$filename"/>
      <param type="object" variable="$cacheKey">
        <type full="Composer\Repository\string|null" namespace="Composer\Repository" name="string|null"/>
      </param>
      <param type="object" variable="$sha256">
        <type full="Composer\Repository\string|null" namespace="Composer\Repository" name="string|null"/>
      </param>
      <param type="object" variable="$storeLastModifiedTime">
        <type full="Composer\Repository\bool" namespace="Composer\Repository" name="bool"/>
      </param>
      <return type="object">
        <type full="Composer\Repository\array&lt;mixed&gt;" namespace="Composer\Repository" name="array&lt;mixed&gt;"/>
      </return>
    </docblock>
    <parameter name="filename" byreference="false" type="string"/>
    <parameter name="cacheKey" byreference="false" nullable="true" type="string" default="NULL"/>
    <parameter name="sha256" byreference="false" nullable="true" type="string" default="NULL"/>
    <parameter name="storeLastModifiedTime" byreference="false" type="boolean" default="false"/>
    <inline>
      <comment value="url-encode $ signs in URLs as bad proxies choke on them" line="1308"/>
    </inline>
  </method>
  <method name="fetchFileIfLastModified" start="1408" end="1465" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="string" variable="$filename"/>
      <param type="string" variable="$cacheKey"/>
      <param type="string" variable="$lastModifiedTime"/>
      <return type="object">
        <type full="Composer\Repository\array&lt;mixed&gt;|true" namespace="Composer\Repository" name="array&lt;mixed&gt;|true"/>
      </return>
    </docblock>
    <parameter name="filename" byreference="false" type="string"/>
    <parameter name="cacheKey" byreference="false" type="string"/>
    <parameter name="lastModifiedTime" byreference="false" type="string"/>
  </method>
  <method name="asyncFetchFile" start="1472" end="1572" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="string" variable="$filename"/>
      <param type="string" variable="$cacheKey"/>
      <param type="object" variable="$lastModifiedTime">
        <type full="Composer\Repository\string|null" namespace="Composer\Repository" name="string|null"/>
      </param>
    </docblock>
    <return type="object" nullable="false">
      <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
    </return>
    <parameter name="filename" byreference="false" type="string"/>
    <parameter name="cacheKey" byreference="false" type="string"/>
    <parameter name="lastModifiedTime" byreference="false" nullable="true" type="string" default="NULL"/>
    <inline>
      <comment value="@return array&lt;mixed&gt;|true true if the response was a 304 and the cache is fresh" line="1506"/>
    </inline>
  </method>
  <method name="initializePartialPackages" start="1581" end="1597" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="This initializes the packages key of a partial packages.json that contain some packages inlined + a providers-lazy-url">This should only be called once</description>
      <return type="object">
        <type full="Composer\Repository\void" namespace="Composer\Repository" name="void"/>
      </return>
    </docblock>
    <return type="void" nullable="false"/>
    <inline>
      <comment value="wipe rootData as it is fully consumed at this point and this saves some memory" line="1595"/>
    </inline>
  </method>
  <method name="lazyProvidersRepoContains" start="1605" end="1624" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Checks if the package name is present in this lazy providers repo"/>
      <param type="string" variable="$name"/>
      <return description="true if the package name is present in availablePackages or matched by availablePackagePatterns" type="object">
        <type full="Composer\Repository\bool" namespace="Composer\Repository" name="bool"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="string"/>
  </method>
  <parent full="Composer\Repository\ArrayRepository" namespace="Composer\Repository" name="ArrayRepository">
    <implements full="Composer\Repository\RepositoryInterface" namespace="Composer\Repository" name="RepositoryInterface"/>
    <member name="packages" default="NULL" visibility="protected" static="false" line="35">
      <docblock>
        <var type="object">
          <type full="Composer\Repository\?array&lt;BasePackage&gt;" namespace="Composer\Repository" name="?array&lt;BasePackage&gt;"/>
        </var>
      </docblock>
    </member>
    <member name="packageMap" default="NULL" visibility="protected" static="false" line="40">
      <docblock>
        <description/>
        <var description="indexed by package unique name and used to cache hasPackage calls" type="object">
          <type full="Composer\Repository\?array&lt;BasePackage&gt;" namespace="Composer\Repository" name="?array&lt;BasePackage&gt;"/>
        </var>
      </docblock>
    </member>
    <constructor name="__construct" start="45" end="50" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <param type="object" variable="$packages">
          <type full="Composer\Repository\array&lt;PackageInterface&gt;" namespace="Composer\Repository" name="array&lt;PackageInterface&gt;"/>
        </param>
      </docblock>
      <parameter name="packages" byreference="false" type="array" default=""/>
    </constructor>
    <method name="getRepoName" start="52" end="55" abstract="false" final="false" static="false" visibility="public"/>
    <method name="loadPackages" start="60" end="95" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <inheritdoc/>
      </docblock>
      <parameter name="packageNameMap" byreference="false" type="array"/>
      <parameter name="acceptableStabilities" byreference="false" type="array"/>
      <parameter name="stabilityFlags" byreference="false" type="array"/>
      <parameter name="alreadyLoaded" byreference="false" type="array" default=""/>
      <inline>
        <comment value="add aliases of packages that were selected, even if the aliases did not match" line="85"/>
      </inline>
    </method>
    <method name="findPackage" start="100" end="119" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <inheritdoc/>
      </docblock>
      <parameter name="name" byreference="false" type="string"/>
      <parameter name="constraint" byreference="false" type="{unknown}"/>
    </method>
    <method name="findPackages" start="124" end="144" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <inheritdoc/>
      </docblock>
      <parameter name="name" byreference="false" type="string"/>
      <parameter name="constraint" byreference="false" type="{unknown}" default="NULL"/>
      <inline>
        <comment value="normalize name" line="126"/>
      </inline>
    </method>
    <method name="search" start="149" end="193" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <inheritdoc/>
      </docblock>
      <parameter name="query" byreference="false" type="string"/>
      <parameter name="mode" byreference="false" type="integer" default="0"/>
      <parameter name="type" byreference="false" nullable="true" type="string" default="NULL"/>
    </method>
    <method name="hasPackage" start="198" end="208" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <inheritdoc/>
      </docblock>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
    </method>
    <method name="addPackage" start="215" end="235" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Adds a new package to the repository"/>
        <return type="object">
          <type full="Composer\Repository\void" namespace="Composer\Repository" name="void"/>
        </return>
      </docblock>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
      <inline>
        <comment value="invalidate package map cache" line="233"/>
      </inline>
    </method>
    <method name="getProviders" start="240" end="261" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <inheritdoc/>
      </docblock>
      <parameter name="packageName" byreference="false" type="string"/>
    </method>
    <method name="createAliasPackage" start="269" end="280" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description/>
        <param type="string" variable="$alias"/>
        <param type="string" variable="$prettyAlias"/>
        <return type="object">
          <type full="Composer\Repository\AliasPackage|CompleteAliasPackage" namespace="Composer\Repository" name="AliasPackage|CompleteAliasPackage"/>
        </return>
      </docblock>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\BasePackage" namespace="Composer\Package" name="BasePackage"/>
      </parameter>
      <parameter name="alias" byreference="false" type="string"/>
      <parameter name="prettyAlias" byreference="false" type="string"/>
    </method>
    <method name="removePackage" start="289" end="303" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Removes package from repository."/>
        <param description="package instance" type="object" variable="$package">
          <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
        </param>
        <return type="object">
          <type full="Composer\Repository\void" namespace="Composer\Repository" name="void"/>
        </return>
      </docblock>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
    </method>
    <method name="getPackages" start="308" end="319" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <inheritdoc/>
      </docblock>
    </method>
    <method name="count" start="326" end="333" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the number of packages in this repository"/>
        <return description="Number of packages" type="int"/>
      </docblock>
      <return type="int" nullable="false"/>
    </method>
    <method name="initialize" start="340" end="343" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Initializes the packages array. Mostly meant as an extension point."/>
        <return type="object">
          <type full="Composer\Repository\void" namespace="Composer\Repository" name="void"/>
        </return>
      </docblock>
    </method>
  </parent>
  <interface full="Composer\Repository\RepositoryInterface" namespace="Composer\Repository" name="RepositoryInterface">
    <extends full="Countable" namespace="" name="Countable"/>
    <constant type="{unknown}" name="SEARCH_FULLTEXT" value="0"/>
    <constant type="{unknown}" name="SEARCH_NAME" value="1"/>
    <constant type="{unknown}" name="SEARCH_VENDOR" value="2"/>
    <method name="hasPackage" start="39" end="39" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Checks if specified package registered (installed)."/>
        <param description="package instance" type="object" variable="$package">
          <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
        </param>
        <return type="object">
          <type full="Composer\Repository\bool" namespace="Composer\Repository" name="bool"/>
        </return>
      </docblock>
      <parameter name="package" byreference="false" type="object">
        <type full="Composer\Package\PackageInterface" namespace="Composer\Package" name="PackageInterface"/>
      </parameter>
    </method>
    <method name="findPackage" start="49" end="49" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Searches for the first match of a package by name and version."/>
        <param description="package name" type="string" variable="$name"/>
        <param description="package version or version constraint to match against" type="object" variable="$constraint">
          <type full="Composer\Repository\string|ConstraintInterface" namespace="Composer\Repository" name="string|ConstraintInterface"/>
        </param>
        <return type="object">
          <type full="Composer\Repository\BasePackage|null" namespace="Composer\Repository" name="BasePackage|null"/>
        </return>
      </docblock>
      <parameter name="name" byreference="false" type="string"/>
      <parameter name="constraint" byreference="false" type="{unknown}"/>
    </method>
    <method name="findPackages" start="59" end="59" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Searches for all packages matching a name and optionally a version."/>
        <param description="package name" type="string" variable="$name"/>
        <param description="package version or version constraint to match against" type="object" variable="$constraint">
          <type full="Composer\Repository\string|ConstraintInterface" namespace="Composer\Repository" name="string|ConstraintInterface"/>
        </param>
        <return type="array" of="object">
          <type full="Composer\Repository\BasePackage" namespace="Composer\Repository" name="BasePackage"/>
        </return>
      </docblock>
      <parameter name="name" byreference="false" type="string"/>
      <parameter name="constraint" byreference="false" type="{unknown}" default="NULL"/>
    </method>
    <method name="getPackages" start="66" end="66" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns list of registered packages."/>
        <return type="array" of="object">
          <type full="Composer\Repository\BasePackage" namespace="Composer\Repository" name="BasePackage"/>
        </return>
      </docblock>
    </method>
    <method name="loadPackages" start="84" end="84" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns list of registered packages with the supplied name">- The packages returned are the packages found which match the constraints, acceptable stability and stability flags provided
- The namesFound returned are names which should be considered as canonically found in this repository, that should not be looked up in any further lower priority repositories</description>
        <param description="package names pointing to constraints" type="array" variable="$packageNameMap" of="object">
          <type full="Composer\Repository\ConstraintInterface" namespace="Composer\Repository" name="ConstraintInterface"/>
        </param>
        <param description="BasePackage::STABILITY_*&gt; $acceptableStabilities array of stability =&gt; BasePackage::STABILITY_* value" type="object">
          <type full="Composer\Repository\array&lt;string" namespace="Composer\Repository" name="array&lt;string"/>
        </param>
        <param description="BasePackage::STABILITY_*&gt; $stabilityFlags        an array of package name =&gt; BasePackage::STABILITY_* value" type="object">
          <type full="Composer\Repository\array&lt;string" namespace="Composer\Repository" name="array&lt;string"/>
        </param>
        <param description="array&lt;string PackageInterface&gt;&gt; $alreadyLoaded         an array of package name =&gt; package version =&gt; package" type="object">
          <type full="Composer\Repository\array&lt;string" namespace="Composer\Repository" name="array&lt;string"/>
        </param>
        <return type="array"/>
        <phpstan value="-param  array&lt;string, ConstraintInterface|null&gt; $packageNameMap"/>
        <phpstan value="-return array{namesFound: array&lt;string&gt;, packages: array&lt;BasePackage&gt;}"/>
      </docblock>
      <parameter name="packageNameMap" byreference="false" type="array"/>
      <parameter name="acceptableStabilities" byreference="false" type="array"/>
      <parameter name="stabilityFlags" byreference="false" type="array"/>
      <parameter name="alreadyLoaded" byreference="false" type="array" default=""/>
    </method>
    <method name="search" start="96" end="96" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Searches the repository for packages containing the query"/>
        <param description="search query, for SEARCH_NAME and SEARCH_VENDOR regular expressions metacharacters are supported by implementations, and user input should be escaped through preg_quote by callers" type="string" variable="$query"/>
        <param description="a set of SEARCH_* constants to search on, implementations should do a best effort only, default is SEARCH_FULLTEXT" type="int" variable="$mode"/>
        <param description="The type of package to search for. Defaults to all types of packages" type="object" variable="$type">
          <type full="Composer\Repository\?string" namespace="Composer\Repository" name="?string"/>
        </param>
        <return description="an array of array('name' =&gt; '...', 'description' =&gt; '...'|null, 'abandoned' =&gt; 'string'|true|unset) For SEARCH_VENDOR the name will be in &quot;vendor&quot; form" type="array" of="object">
          <type full="Composer\Repository\array" namespace="Composer\Repository" name="array"/>
        </return>
        <phpstan value="-return list&lt;array{name: string, description: ?string, abandoned?: string|true, url?: string}&gt;"/>
      </docblock>
      <parameter name="query" byreference="false" type="string"/>
      <parameter name="mode" byreference="false" type="integer" default="0"/>
      <parameter name="type" byreference="false" nullable="true" type="string" default="NULL"/>
    </method>
    <method name="getProviders" start="108" end="108" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns a list of packages providing a given package name">Packages which have the same name as $packageName should not be returned, only those that have a "provide" on it.</description>
        <param description="package name which must be provided" type="string" variable="$packageName"/>
        <return description="an array with the provider name as key and value of array('name' =&gt; '...', 'description' =&gt; '...', 'type' =&gt; '...')" type="array" of="object">
          <type full="Composer\Repository\array" namespace="Composer\Repository" name="array"/>
        </return>
        <phpstan value="-return array&lt;string, array{name: string, description: string, type: string}&gt;"/>
      </docblock>
      <parameter name="packageName" byreference="false" type="string"/>
    </method>
    <method name="getRepoName" start="117" end="117" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns a name representing this repository to the user">This is best effort and definitely can not always be very precise</description>
        <return type="string"/>
      </docblock>
    </method>
  </interface>
  <interface full="Composer\Repository\ConfigurableRepositoryInterface" namespace="Composer\Repository" name="ConfigurableRepositoryInterface">
    <method name="getRepoConfig" start="25" end="25" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return type="array" of="object">
          <type full="Composer\Repository\mixed" namespace="Composer\Repository" name="mixed"/>
        </return>
      </docblock>
    </method>
  </interface>
</class>
