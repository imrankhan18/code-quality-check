<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="MongoDB\Tests\FunctionalTestCase" namespace="MongoDB\Tests" name="FunctionalTestCase" abstract="true" final="false" start="49" end="628">
  <file path="//var/www/html/vendor/mongodb/mongodb/tests" file="FunctionalTestCase.php" realpath="/var/www/html/vendor/mongodb/mongodb/tests/FunctionalTestCase.php" size="20181" time="2022-03-23T20:18:39+00:00" unixtime="1648066719" sha1="3fcbd73e7d17c969b202da24c722ebead95802f6" relative="ar/www/html/vendor/mongodb/mongodb/tests/FunctionalTestCase.php"/>
  <extends full="MongoDB\Tests\TestCase" namespace="MongoDB\Tests" name="TestCase"/>
  <member name="manager" visibility="protected" static="false" line="52">
    <docblock>
      <var type="object">
        <type full="MongoDB\Driver\Manager" namespace="MongoDB\Driver" name="Manager"/>
      </var>
    </docblock>
  </member>
  <member name="configuredFailPoints" default="" type="array" visibility="private" static="false" line="55">
    <docblock>
      <var type="array"/>
    </docblock>
  </member>
  <method name="setUp" start="57" end="63" abstract="false" final="false" static="false" visibility="public">
    <return type="void" nullable="false"/>
  </method>
  <method name="tearDown" start="65" end="70" abstract="false" final="false" static="false" visibility="public">
    <return type="void" nullable="false"/>
  </method>
  <method name="createTestClient" start="72" end="79" abstract="false" final="false" static="true" visibility="public">
    <return type="object" nullable="false">
      <type full="MongoDB\Client" namespace="MongoDB" name="Client"/>
    </return>
    <parameter name="uri" byreference="false" nullable="true" type="string" default="NULL"/>
    <parameter name="options" byreference="false" type="array" default=""/>
    <parameter name="driverOptions" byreference="false" type="array" default=""/>
  </method>
  <method name="createTestManager" start="81" end="88" abstract="false" final="false" static="true" visibility="public">
    <return type="object" nullable="false">
      <type full="MongoDB\Driver\Manager" namespace="MongoDB\Driver" name="Manager"/>
    </return>
    <parameter name="uri" byreference="false" nullable="true" type="string" default="NULL"/>
    <parameter name="options" byreference="false" type="array" default=""/>
    <parameter name="driverOptions" byreference="false" type="array" default=""/>
  </method>
  <method name="getUri" start="90" end="149" abstract="false" final="false" static="true" visibility="public">
    <return type="string" nullable="false"/>
    <parameter name="allowMultipleMongoses" byreference="false" type="boolean" default="false"/>
    <inline>
      <comment value="Only modify URIs using the mongodb scheme" line="103"/>
      <comment value="Re-append port to last host" line="119"/>
    </inline>
  </method>
  <method name="assertCollectionCount" start="151" end="161" abstract="false" final="false" static="false" visibility="protected">
    <return type="void" nullable="false"/>
    <parameter name="namespace" byreference="false" type="{unknown}"/>
    <parameter name="count" byreference="false" type="{unknown}"/>
  </method>
  <method name="assertCollectionDoesNotExist" start="169" end="188" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Asserts that a collection with the given name does not exist on the server.">$databaseName defaults to TestCase::getDatabaseName() if unspecified.</description>
    </docblock>
    <return type="void" nullable="false"/>
    <parameter name="collectionName" byreference="false" type="string"/>
    <parameter name="databaseName" byreference="false" nullable="true" type="string" default="NULL"/>
  </method>
  <method name="assertCollectionExists" start="199" end="226" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Asserts that a collection with the given name exists on the server.">$databaseName defaults to TestCase::getDatabaseName() if unspecified.
An optional $callback may be provided, which should take a CollectionInfo
argument as its first and only parameter. If a CollectionInfo matching
the given name is found, it will be passed to the callback, which may
perform additional assertions.</description>
    </docblock>
    <return type="void" nullable="false"/>
    <parameter name="collectionName" byreference="false" type="string"/>
    <parameter name="databaseName" byreference="false" nullable="true" type="string" default="NULL"/>
    <parameter name="callback" byreference="false" nullable="true" type="callable" default="NULL"/>
  </method>
  <method name="assertCommandSucceeded" start="228" end="234" abstract="false" final="false" static="false" visibility="protected">
    <return type="void" nullable="false"/>
    <parameter name="document" byreference="false" type="{unknown}"/>
  </method>
  <method name="assertSameObjectId" start="236" end="241" abstract="false" final="false" static="false" visibility="protected">
    <return type="void" nullable="false"/>
    <parameter name="expectedObjectId" byreference="false" type="{unknown}"/>
    <parameter name="actualObjectId" byreference="false" type="{unknown}"/>
  </method>
  <method name="configureFailPoint" start="252" end="284" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Configure a fail point for the test.">The fail point will automatically be disabled during tearDown() to avoid
affecting a subsequent test.</description>
      <param description="configureFailPoint command document" type="object" variable="$command">
        <type full="MongoDB\Tests\array|stdClass" namespace="MongoDB\Tests" name="array|stdClass"/>
      </param>
      <throws description="if $command is not a configureFailPoint command" type="object">
        <type full="InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <return type="void" nullable="false"/>
    <parameter name="command" byreference="false" type="{unknown}"/>
    <parameter name="server" byreference="false" nullable="true" type="object" default="NULL">
      <type full="MongoDB\Driver\Server" namespace="MongoDB\Driver" name="Server"/>
    </parameter>
    <inline>
      <comment value="Record the fail point so it can be disabled during tearDown()" line="282"/>
    </inline>
  </method>
  <method name="createCollection" start="295" end="301" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Creates the test collection with the specified options.">If the "writeConcern" option is not specified but is supported by the
server, a majority write concern will be used. This is helpful for tests
using transactions or secondary reads.</description>
      <param type="array" variable="$options"/>
    </docblock>
    <return type="void" nullable="false"/>
    <parameter name="options" byreference="false" type="array" default=""/>
  </method>
  <method name="dropCollection" start="312" end="318" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Drops the test collection with the specified options.">If the "writeConcern" option is not specified but is supported by the
server, a majority write concern will be used. This is helpful for tests
using transactions or secondary reads.</description>
      <param type="array" variable="$options"/>
    </docblock>
    <return type="void" nullable="false"/>
    <parameter name="options" byreference="false" type="array" default=""/>
  </method>
  <method name="getFeatureCompatibilityVersion" start="320" end="340" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="readPreference" byreference="false" nullable="true" type="object" default="NULL">
      <type full="MongoDB\Driver\ReadPreference" namespace="MongoDB\Driver" name="ReadPreference"/>
    </parameter>
  </method>
  <method name="getPrimaryServer" start="342" end="345" abstract="false" final="false" static="false" visibility="protected"/>
  <method name="getServerVersion" start="347" end="360" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="readPreference" byreference="false" nullable="true" type="object" default="NULL">
      <type full="MongoDB\Driver\ReadPreference" namespace="MongoDB\Driver" name="ReadPreference"/>
    </parameter>
  </method>
  <method name="getServerStorageEngine" start="362" end="377" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="readPreference" byreference="false" nullable="true" type="object" default="NULL">
      <type full="MongoDB\Driver\ReadPreference" namespace="MongoDB\Driver" name="ReadPreference"/>
    </parameter>
  </method>
  <method name="isLoadBalanced" start="379" end="382" abstract="false" final="false" static="false" visibility="protected"/>
  <method name="isReplicaSet" start="384" end="387" abstract="false" final="false" static="false" visibility="protected"/>
  <method name="isMongos" start="389" end="392" abstract="false" final="false" static="false" visibility="protected"/>
  <method name="isServerless" start="397" end="402" abstract="false" final="false" static="true" visibility="protected">
    <docblock>
      <description compact="Return whether serverless (i.e. proxy as mongos) is being utilized."/>
    </docblock>
    <return type="bool" nullable="false"/>
  </method>
  <method name="isShardedCluster" start="404" end="418" abstract="false" final="false" static="false" visibility="protected">
    <inline>
      <comment value="Assume that load balancers are properly configured and front sharded clusters" line="412"/>
    </inline>
  </method>
  <method name="isShardedClusterUsingReplicasets" start="420" end="445" abstract="false" final="false" static="false" visibility="protected">
    <inline>
      <comment value="Assume serverless is a sharded cluster using replica sets" line="422"/>
      <comment value="Use regular expression to distinguish between standalone or replicaset:" line="439"/>
      <comment xmlns="http://xml.phpdox.net/src" value="Without a replicaset: &quot;host&quot; : &quot;localhost:4100&quot;" line="440"/>
      <comment xmlns="http://xml.phpdox.net/src" value="With a replicaset: &quot;host&quot; : &quot;dec6d8a7-9bc1-4c0e-960c-615f860b956f/localhost:4400,localhost:4401&quot;" line="441"/>
    </inline>
  </method>
  <method name="skipIfChangeStreamIsNotSupported" start="447" end="464" abstract="false" final="false" static="false" visibility="protected">
    <return type="void" nullable="false"/>
  </method>
  <method name="skipIfCausalConsistencyIsNotSupported" start="466" end="487" abstract="false" final="false" static="false" visibility="protected">
    <return type="void" nullable="false"/>
  </method>
  <method name="skipIfClientSideEncryptionIsNotSupported" start="489" end="498" abstract="false" final="false" static="false" visibility="protected">
    <return type="void" nullable="false"/>
  </method>
  <method name="skipIfGeoHaystackIndexIsNotSupported" start="500" end="505" abstract="false" final="false" static="false" visibility="protected">
    <return type="void" nullable="false"/>
  </method>
  <method name="skipIfTransactionsAreNotSupported" start="507" end="532" abstract="false" final="false" static="false" visibility="protected">
    <return type="void" nullable="false"/>
  </method>
  <method name="appendAuthenticationOptions" start="534" end="552" abstract="false" final="false" static="true" visibility="private">
    <return type="array" nullable="false"/>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="appendServerApiOption" start="554" end="561" abstract="false" final="false" static="true" visibility="private">
    <return type="array" nullable="false"/>
    <parameter name="driverOptions" byreference="false" type="array"/>
  </method>
  <method name="disableFailPoints" start="569" end="579" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Disables any fail points that were configured earlier in the test.">This tracks fail points set via configureFailPoint() and should be called
during tearDown().</description>
    </docblock>
    <return type="void" nullable="false"/>
  </method>
  <method name="getModuleInfo" start="581" end="594" abstract="false" final="false" static="false" visibility="private">
    <return type="string" nullable="true"/>
    <parameter name="row" byreference="false" type="string"/>
  </method>
  <method name="isFailCommandSupported" start="601" end="606" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Checks if the failCommand command is supported on this server version"/>
      <return type="object">
        <type full="MongoDB\Tests\bool" namespace="MongoDB\Tests" name="bool"/>
      </return>
    </docblock>
    <return type="bool" nullable="false"/>
  </method>
  <method name="isFailCommandEnabled" start="613" end="627" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Checks if the failCommand command is enabled by checking the enableTestCommands parameter"/>
      <return type="object">
        <type full="MongoDB\Tests\bool" namespace="MongoDB\Tests" name="bool"/>
      </return>
    </docblock>
    <return type="bool" nullable="false"/>
  </method>
  <extenders>
    <extender full="MongoDB\Tests\Collection\CrudSpecFunctionalTest" namespace="MongoDB\Tests\Collection" name="CrudSpecFunctionalTest"/>
    <extender full="MongoDB\Tests\Collection\CollectionFunctionalTest" namespace="MongoDB\Tests\Collection" name="CollectionFunctionalTest"/>
    <extender full="MongoDB\Tests\Collection\FunctionalTestCase" namespace="MongoDB\Tests\Collection" name="FunctionalTestCase"/>
    <extender full="MongoDB\Tests\Model\IndexInfoFunctionalTest" namespace="MongoDB\Tests\Model" name="IndexInfoFunctionalTest"/>
    <extender full="MongoDB\Tests\Model\ChangeStreamIteratorTest" namespace="MongoDB\Tests\Model" name="ChangeStreamIteratorTest"/>
    <extender full="MongoDB\Tests\SpecTests\ChangeStreamsSpecTest" namespace="MongoDB\Tests\SpecTests" name="ChangeStreamsSpecTest"/>
    <extender full="MongoDB\Tests\SpecTests\ReadWriteConcernSpecTest" namespace="MongoDB\Tests\SpecTests" name="ReadWriteConcernSpecTest"/>
    <extender full="MongoDB\Tests\SpecTests\TransactionsSpecTest" namespace="MongoDB\Tests\SpecTests" name="TransactionsSpecTest"/>
    <extender full="MongoDB\Tests\SpecTests\AtlasDataLakeSpecTest" namespace="MongoDB\Tests\SpecTests" name="AtlasDataLakeSpecTest"/>
    <extender full="MongoDB\Tests\SpecTests\RetryableWritesSpecTest" namespace="MongoDB\Tests\SpecTests" name="RetryableWritesSpecTest"/>
    <extender full="MongoDB\Tests\SpecTests\RetryableReadsSpecTest" namespace="MongoDB\Tests\SpecTests" name="RetryableReadsSpecTest"/>
    <extender full="MongoDB\Tests\SpecTests\PrimaryStepDownSpecTest" namespace="MongoDB\Tests\SpecTests" name="PrimaryStepDownSpecTest"/>
    <extender full="MongoDB\Tests\SpecTests\FunctionalTestCase" namespace="MongoDB\Tests\SpecTests" name="FunctionalTestCase"/>
    <extender full="MongoDB\Tests\SpecTests\CommandMonitoringSpecTest" namespace="MongoDB\Tests\SpecTests" name="CommandMonitoringSpecTest"/>
    <extender full="MongoDB\Tests\SpecTests\ClientSideEncryptionSpecTest" namespace="MongoDB\Tests\SpecTests" name="ClientSideEncryptionSpecTest"/>
    <extender full="MongoDB\Tests\UnifiedSpecTests\Constraint\MatchesTest" namespace="MongoDB\Tests\UnifiedSpecTests\Constraint" name="MatchesTest"/>
    <extender full="MongoDB\Tests\UnifiedSpecTests\UnifiedSpecTest" namespace="MongoDB\Tests\UnifiedSpecTests" name="UnifiedSpecTest"/>
    <extender full="MongoDB\Tests\Operation\BulkWriteFunctionalTest" namespace="MongoDB\Tests\Operation" name="BulkWriteFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\DropCollectionFunctionalTest" namespace="MongoDB\Tests\Operation" name="DropCollectionFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\ExplainFunctionalTest" namespace="MongoDB\Tests\Operation" name="ExplainFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\ListCollectionsFunctionalTest" namespace="MongoDB\Tests\Operation" name="ListCollectionsFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\FindOneFunctionalTest" namespace="MongoDB\Tests\Operation" name="FindOneFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\CountDocumentsFunctionalTest" namespace="MongoDB\Tests\Operation" name="CountDocumentsFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\DropIndexesFunctionalTest" namespace="MongoDB\Tests\Operation" name="DropIndexesFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\DropDatabaseFunctionalTest" namespace="MongoDB\Tests\Operation" name="DropDatabaseFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\ListDatabasesFunctionalTest" namespace="MongoDB\Tests\Operation" name="ListDatabasesFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\AggregateFunctionalTest" namespace="MongoDB\Tests\Operation" name="AggregateFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\CreateIndexesFunctionalTest" namespace="MongoDB\Tests\Operation" name="CreateIndexesFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\CreateCollectionFunctionalTest" namespace="MongoDB\Tests\Operation" name="CreateCollectionFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\MapReduceFunctionalTest" namespace="MongoDB\Tests\Operation" name="MapReduceFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\ListDatabaseNamesFunctionalTest" namespace="MongoDB\Tests\Operation" name="ListDatabaseNamesFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\InsertOneFunctionalTest" namespace="MongoDB\Tests\Operation" name="InsertOneFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\ListIndexesFunctionalTest" namespace="MongoDB\Tests\Operation" name="ListIndexesFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\UpdateFunctionalTest" namespace="MongoDB\Tests\Operation" name="UpdateFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\FindFunctionalTest" namespace="MongoDB\Tests\Operation" name="FindFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\CountFunctionalTest" namespace="MongoDB\Tests\Operation" name="CountFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\RenameCollectionFunctionalTest" namespace="MongoDB\Tests\Operation" name="RenameCollectionFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\WatchFunctionalTest" namespace="MongoDB\Tests\Operation" name="WatchFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\WatchTest" namespace="MongoDB\Tests\Operation" name="WatchTest"/>
    <extender full="MongoDB\Tests\Operation\DeleteFunctionalTest" namespace="MongoDB\Tests\Operation" name="DeleteFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\InsertManyFunctionalTest" namespace="MongoDB\Tests\Operation" name="InsertManyFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\DistinctFunctionalTest" namespace="MongoDB\Tests\Operation" name="DistinctFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\FindAndModifyFunctionalTest" namespace="MongoDB\Tests\Operation" name="FindAndModifyFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\DatabaseCommandFunctionalTest" namespace="MongoDB\Tests\Operation" name="DatabaseCommandFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\ListCollectionNamesFunctionalTest" namespace="MongoDB\Tests\Operation" name="ListCollectionNamesFunctionalTest"/>
    <extender full="MongoDB\Tests\Operation\FunctionalTestCase" namespace="MongoDB\Tests\Operation" name="FunctionalTestCase"/>
    <extender full="MongoDB\Tests\Operation\ModifyCollectionFunctionalTest" namespace="MongoDB\Tests\Operation" name="ModifyCollectionFunctionalTest"/>
    <extender full="MongoDB\Tests\GridFS\ReadableStreamFunctionalTest" namespace="MongoDB\Tests\GridFS" name="ReadableStreamFunctionalTest"/>
    <extender full="MongoDB\Tests\GridFS\BucketFunctionalTest" namespace="MongoDB\Tests\GridFS" name="BucketFunctionalTest"/>
    <extender full="MongoDB\Tests\GridFS\WritableStreamFunctionalTest" namespace="MongoDB\Tests\GridFS" name="WritableStreamFunctionalTest"/>
    <extender full="MongoDB\Tests\GridFS\StreamWrapperFunctionalTest" namespace="MongoDB\Tests\GridFS" name="StreamWrapperFunctionalTest"/>
    <extender full="MongoDB\Tests\GridFS\FunctionalTestCase" namespace="MongoDB\Tests\GridFS" name="FunctionalTestCase"/>
    <extender full="MongoDB\Tests\Database\DatabaseFunctionalTest" namespace="MongoDB\Tests\Database" name="DatabaseFunctionalTest"/>
    <extender full="MongoDB\Tests\Database\CollectionManagementFunctionalTest" namespace="MongoDB\Tests\Database" name="CollectionManagementFunctionalTest"/>
    <extender full="MongoDB\Tests\Database\FunctionalTestCase" namespace="MongoDB\Tests\Database" name="FunctionalTestCase"/>
    <extender full="MongoDB\Tests\ClientFunctionalTest" namespace="MongoDB\Tests" name="ClientFunctionalTest"/>
    <extender full="MongoDB\Tests\DocumentationExamplesTest" namespace="MongoDB\Tests" name="DocumentationExamplesTest"/>
  </extenders>
  <parent full="MongoDB\Tests\TestCase" namespace="MongoDB\Tests" name="TestCase">
    <extends full="PHPUnit\Framework\TestCase" namespace="PHPUnit\Framework" name="TestCase" unresolved="true"/>
    <method name="getUri" start="41" end="44" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Return the connection URI."/>
        <return type="string"/>
      </docblock>
      <return type="string" nullable="false"/>
    </method>
    <method name="assertMatchesDocument" start="55" end="78" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Asserts that a document has expected values for some fields.">Only fields in the expected document will be checked. The actual document
may contain additional fields.</description>
        <param type="object" variable="$expectedDocument">
          <type full="MongoDB\Tests\array|object" namespace="MongoDB\Tests" name="array|object"/>
        </param>
        <param type="object" variable="$actualDocument">
          <type full="MongoDB\Tests\array|object" namespace="MongoDB\Tests" name="array|object"/>
        </param>
      </docblock>
      <return type="void" nullable="false"/>
      <parameter name="expectedDocument" byreference="false" type="{unknown}"/>
      <parameter name="actualDocument" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Avoid unsetting fields while we're iterating on the ArrayObject to" line="62"/>
        <comment xmlns="http://xml.phpdox.net/src" value="* work around https://bugs.php.net/bug.php?id=70246" line="63"/>
      </inline>
    </method>
    <method name="assertSameDocument" start="89" end="95" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Asserts that a document has expected values for all fields.">The actual document will be compared directly with the expected document
and may not contain extra fields.</description>
        <param type="object" variable="$expectedDocument">
          <type full="MongoDB\Tests\array|object" namespace="MongoDB\Tests" name="array|object"/>
        </param>
        <param type="object" variable="$actualDocument">
          <type full="MongoDB\Tests\array|object" namespace="MongoDB\Tests" name="array|object"/>
        </param>
      </docblock>
      <return type="void" nullable="false"/>
      <parameter name="expectedDocument" byreference="false" type="{unknown}"/>
      <parameter name="actualDocument" byreference="false" type="{unknown}"/>
    </method>
    <method name="assertSameDocuments" start="97" end="115" abstract="false" final="false" static="false" visibility="public">
      <return type="void" nullable="false"/>
      <parameter name="expectedDocuments" byreference="false" type="array"/>
      <parameter name="actualDocuments" byreference="false" type="{unknown}"/>
    </method>
    <method name="dataDescription" start="120" end="125" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Compatibility method as PHPUnit 9 no longer includes this method."/>
      </docblock>
      <return type="string" nullable="false"/>
    </method>
    <method name="provideInvalidArrayValues" start="127" end="130" abstract="false" final="false" static="false" visibility="public"/>
    <method name="provideInvalidDocumentValues" start="132" end="135" abstract="false" final="false" static="false" visibility="public"/>
    <method name="assertDeprecated" start="137" end="152" abstract="false" final="false" static="false" visibility="protected">
      <return type="void" nullable="false"/>
      <parameter name="execution" byreference="false" type="callable"/>
    </method>
    <method name="getCollectionName" start="159" end="164" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Return the test collection name."/>
        <return type="string"/>
      </docblock>
      <return type="string" nullable="false"/>
    </method>
    <method name="getDatabaseName" start="171" end="174" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Return the test database name."/>
        <return type="string"/>
      </docblock>
      <return type="string" nullable="false"/>
    </method>
    <method name="getInvalidArrayValues" start="183" end="186" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Return a list of invalid array values."/>
        <param type="boolean" variable="$includeNull"/>
        <return type="array"/>
      </docblock>
      <return type="array" nullable="false"/>
      <parameter name="includeNull" byreference="false" type="boolean" default="false"/>
    </method>
    <method name="getInvalidBooleanValues" start="195" end="198" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Return a list of invalid boolean values."/>
        <param type="boolean" variable="$includeNull"/>
        <return type="array"/>
      </docblock>
      <return type="array" nullable="false"/>
      <parameter name="includeNull" byreference="false" type="boolean" default="false"/>
    </method>
    <method name="getInvalidDocumentValues" start="207" end="210" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Return a list of invalid document values."/>
        <param type="boolean" variable="$includeNull"/>
        <return type="array"/>
      </docblock>
      <return type="array" nullable="false"/>
      <parameter name="includeNull" byreference="false" type="boolean" default="false"/>
    </method>
    <method name="getInvalidIntegerValues" start="219" end="222" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Return a list of invalid integer values."/>
        <param type="boolean" variable="$includeNull"/>
        <return type="array"/>
      </docblock>
      <return type="array" nullable="false"/>
      <parameter name="includeNull" byreference="false" type="boolean" default="false"/>
    </method>
    <method name="getInvalidReadConcernValues" start="231" end="234" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Return a list of invalid ReadPreference values."/>
        <param type="boolean" variable="$includeNull"/>
        <return type="array"/>
      </docblock>
      <return type="array" nullable="false"/>
      <parameter name="includeNull" byreference="false" type="boolean" default="false"/>
    </method>
    <method name="getInvalidReadPreferenceValues" start="243" end="246" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Return a list of invalid ReadPreference values."/>
        <param type="boolean" variable="$includeNull"/>
        <return type="array"/>
      </docblock>
      <return type="array" nullable="false"/>
      <parameter name="includeNull" byreference="false" type="boolean" default="false"/>
    </method>
    <method name="getInvalidSessionValues" start="255" end="258" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Return a list of invalid Session values."/>
        <param type="boolean" variable="$includeNull"/>
        <return type="array"/>
      </docblock>
      <return type="array" nullable="false"/>
      <parameter name="includeNull" byreference="false" type="boolean" default="false"/>
    </method>
    <method name="getInvalidStringValues" start="267" end="270" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Return a list of invalid string values."/>
        <param type="boolean" variable="$includeNull"/>
        <return type="array"/>
      </docblock>
      <return type="array" nullable="false"/>
      <parameter name="includeNull" byreference="false" type="boolean" default="false"/>
    </method>
    <method name="getInvalidWriteConcernValues" start="279" end="282" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Return a list of invalid WriteConcern values."/>
        <param type="boolean" variable="$includeNull"/>
        <return type="array"/>
      </docblock>
      <return type="array" nullable="false"/>
      <parameter name="includeNull" byreference="false" type="boolean" default="false"/>
    </method>
    <method name="getNamespace" start="289" end="292" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Return the test namespace."/>
        <return type="string"/>
      </docblock>
      <return type="string" nullable="false"/>
    </method>
    <method name="wrapValuesForDataProvider" start="300" end="305" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Wrap a list of values for use as a single-argument data provider."/>
        <param description="List of values" type="array" variable="$values"/>
        <return type="array"/>
      </docblock>
      <return type="array" nullable="false"/>
      <parameter name="values" byreference="false" type="array"/>
    </method>
  </parent>
</class>
