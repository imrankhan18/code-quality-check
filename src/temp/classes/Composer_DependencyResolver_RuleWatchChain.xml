<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Composer\DependencyResolver\RuleWatchChain" namespace="Composer\DependencyResolver" name="RuleWatchChain" abstract="false" final="false" start="24" end="54">
  <file path="//var/www/html/vendor/composer/composer/src/Composer/DependencyResolver" file="RuleWatchChain.php" realpath="/var/www/html/vendor/composer/composer/src/Composer/DependencyResolver/RuleWatchChain.php" size="1510" time="2022-04-13T14:43:00+00:00" unixtime="1649860980" sha1="27129ed32805d4c7014a29e9812410c0d2f7df56" relative="ar/www/html/vendor/composer/composer/src/Composer/DependencyResolver/RuleWatchChain.php"/>
  <docblock>
    <description compact="An extension of SplDoublyLinkedList with seek and removal of current element">SplDoublyLinkedList only allows deleting a particular offset and has no
method to set the internal iterator to a particular offset.</description>
    <author value="Nils Adermann &lt;naderman@naderman.de&gt;"/>
    <extends value="\SplDoublyLinkedList&lt;RuleWatchNode&gt;"/>
  </docblock>
  <extends full="SplDoublyLinkedList" namespace="" name="SplDoublyLinkedList"/>
  <method name="seek" start="32" end="36" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Moves the internal iterator to the specified offset"/>
      <param description="The offset to seek to." type="int" variable="$offset"/>
      <return type="object">
        <type full="Composer\DependencyResolver\void" namespace="Composer\DependencyResolver" name="void"/>
      </return>
    </docblock>
    <return type="void" nullable="false"/>
    <parameter name="offset" byreference="false" type="int"/>
  </method>
  <method name="remove" start="48" end="53" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Removes the current element from the list">As SplDoublyLinkedList only allows deleting a particular offset and
incorrectly sets the internal iterator if you delete the current value
this method sets the internal iterator back to the following element
using the seek method.</description>
      <return type="object">
        <type full="Composer\DependencyResolver\void" namespace="Composer\DependencyResolver" name="void"/>
      </return>
    </docblock>
    <return type="void" nullable="false"/>
  </method>
  <parent full="SplDoublyLinkedList" namespace="" name="SplDoublyLinkedList">
    <implements full="Iterator" namespace="" name="Iterator"/>
    <constructor name="__construct" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Constructs a new doubly linked list"/>
      <return type="void"/>
    </docblock>
  </constructor>
    <method name="add" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Add/insert a new value at the specified index"/>
      <return type="void"/>
    </docblock>
    <parameter name="index" optional="false" byreference="false" type="object" class="mixed"/>
    <parameter name="newval" optional="false" byreference="false" type="object" class="mixed"/>
  </method>
    <method name="bottom" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Peeks at the node from the beginning of the doubly linked list"/>
      <return type="mixed"/>
    </docblock>
  </method>
    <method name="count" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Counts the number of elements in the doubly linked list"/>
      <return type="int"/>
    </docblock>
  </method>
    <method name="current" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Return current array entry"/>
      <return type="mixed"/>
    </docblock>
  </method>
    <method name="getIteratorMode" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Returns the mode of iteration"/>
      <return type="int"/>
    </docblock>
  </method>
    <method name="isEmpty" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Checks whether the doubly linked list is empty"/>
      <return type="bool"/>
    </docblock>
  </method>
    <method name="key" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Return current node index"/>
      <return type="mixed"/>
    </docblock>
  </method>
    <method name="next" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Move to next entry"/>
      <return type="void"/>
    </docblock>
  </method>
    <method name="offsetExists" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Returns whether the requested $index exists"/>
      <return type="bool"/>
    </docblock>
    <parameter name="index" optional="false" byreference="false" type="object" class="mixed"/>
  </method>
    <method name="offsetGet" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Returns the value at the specified $index"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="index" optional="false" byreference="false" type="object" class="mixed"/>
  </method>
    <method name="offsetSet" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Sets the value at the specified $index to $newval"/>
      <return type="void"/>
    </docblock>
    <parameter name="index" optional="false" byreference="false" type="object" class="mixed"/>
    <parameter name="newval" optional="false" byreference="false" type="object" class="mixed"/>
  </method>
    <method name="offsetUnset" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Unsets the value at the specified $index"/>
      <return type="void"/>
    </docblock>
    <parameter name="index" optional="false" byreference="false" type="object" class="mixed"/>
  </method>
    <method name="pop" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Pops a node from the end of the doubly linked list"/>
      <return type="mixed"/>
    </docblock>
  </method>
    <method name="prev" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Move to previous entry"/>
      <return type="void"/>
    </docblock>
  </method>
    <method name="push" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Pushes an element at the end of the doubly linked list"/>
      <return type="void"/>
    </docblock>
    <parameter name="value" optional="false" byreference="false" type="object" class="mixed"/>
  </method>
    <method name="rewind" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Rewind iterator back to the start"/>
      <return type="void"/>
    </docblock>
  </method>
    <method name="serialize" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Serializes the storage"/>
      <return type="string"/>
    </docblock>
  </method>
    <method name="setIteratorMode" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Sets the mode of iteration"/>
      <return type="void"/>
    </docblock>
    <parameter name="mode" optional="false" byreference="false" type="int"/>
  </method>
    <method name="shift" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Shifts a node from the beginning of the doubly linked list"/>
      <return type="mixed"/>
    </docblock>
  </method>
    <method name="top" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Peeks at the node from the end of the doubly linked list"/>
      <return type="mixed"/>
    </docblock>
  </method>
    <method name="unserialize" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Unserializes the storage"/>
      <return type="void"/>
    </docblock>
    <parameter name="serialized" optional="false" byreference="false" type="string"/>
  </method>
    <method name="unshift" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Prepends the doubly linked list with an element"/>
      <return type="void"/>
    </docblock>
    <parameter name="value" optional="false" byreference="false" type="object" class="mixed"/>
  </method>
    <method name="valid" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Check whether the doubly linked list contains more nodes"/>
      <return type="bool"/>
    </docblock>
  </method>
  </parent>
  <interface full="Iterator" namespace="" name="Iterator">
    <extends full="Traversable" namespace="" name="Traversable"/>
    <method name="current" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Return the current element"/>
      <return type="mixed"/>
    </docblock>
  </method>
    <method name="key" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Return the key of the current element"/>
      <return type="scalar"/>
    </docblock>
  </method>
    <method name="next" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Move forward to next element">Moves the current position to the next element.</description>
      <return type="void"/>
    </docblock>
  </method>
    <method name="rewind" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Rewind the Iterator to the first element">Rewinds back to the first element of the Iterator.</description>
      <return type="void"/>
    </docblock>
  </method>
    <method name="valid" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Checks if current position is valid"/>
      <return type="bool"/>
    </docblock>
  </method>
  </interface>
</class>
