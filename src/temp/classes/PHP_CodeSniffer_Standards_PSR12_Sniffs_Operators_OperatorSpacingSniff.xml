<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PHP_CodeSniffer\Standards\PSR12\Sniffs\Operators\OperatorSpacingSniff" namespace="PHP_CodeSniffer\Standards\PSR12\Sniffs\Operators" name="OperatorSpacingSniff" abstract="false" final="false" start="16" end="112">
  <file path="//var/www/html/vendor/squizlabs/php_codesniffer/src/Standards/PSR12/Sniffs/Operators" file="OperatorSpacingSniff.php" realpath="/var/www/html/vendor/squizlabs/php_codesniffer/src/Standards/PSR12/Sniffs/Operators/OperatorSpacingSniff.php" size="3532" time="2021-12-12T21:44:58+00:00" unixtime="1639345498" sha1="904d4309b735096fa9ea48fbb0516b2faca64325" relative="ar/www/html/vendor/squizlabs/php_codesniffer/src/Standards/PSR12/Sniffs/Operators/OperatorSpacingSniff.php"/>
  <extends full="PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\OperatorSpacingSniff" namespace="PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace" name="OperatorSpacingSniff"/>
  <method name="register" start="25" end="40" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns an array of tokens this test wants to listen for."/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="process" start="52" end="109" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Processes this sniff, when one of its tokens is encountered."/>
      <param description="The current file being checked." type="object" variable="$phpcsFile">
        <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
      </param>
      <param description="The position of the current token in" type="int" variable="$stackPtr">the stack passed in $tokens.</param>
      <return type="object">
        <type full="PHP_CodeSniffer\Standards\PSR12\Sniffs\Operators\void" namespace="PHP_CodeSniffer\Standards\PSR12\Sniffs\Operators" name="void"/>
      </return>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
    </parameter>
    <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Skip short ternary." line="65"/>
      <comment value="Skip operator with comment on previous line." line="72"/>
    </inline>
  </method>
  <parent full="PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\OperatorSpacingSniff" namespace="PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace" name="OperatorSpacingSniff">
    <implements full="PHP_CodeSniffer\Sniffs\Sniff" namespace="PHP_CodeSniffer\Sniffs" name="Sniff"/>
    <member name="supportedTokenizers" default="" type="array" visibility="public" static="false" line="24">
      <docblock>
        <description compact="A list of tokenizers this sniff supports."/>
        <var type="array"/>
      </docblock>
    </member>
    <member name="ignoreNewlines" default="false" type="boolean" visibility="public" static="false" line="34">
      <docblock>
        <description compact="Allow newlines instead of spaces."/>
        <var type="boolean"/>
      </docblock>
    </member>
    <member name="ignoreSpacingBeforeAssignments" default="true" type="boolean" visibility="public" static="false" line="43">
      <docblock>
        <description compact="Don't check spacing for assignment operators.">This allows multiple assignment statements to be aligned.</description>
        <var type="boolean"/>
      </docblock>
    </member>
    <method name="register" start="58" end="118" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns an array of tokens this test wants to listen for."/>
        <return type="array"/>
      </docblock>
      <inline>
        <comment value="First we setup an array of all the tokens that can come before" line="60"/>
        <comment xmlns="http://xml.phpdox.net/src" value="a T_MINUS or T_PLUS token to indicate that the token is not being" line="61"/>
        <comment xmlns="http://xml.phpdox.net/src" value="used as an operator." line="62"/>
        <comment value="Trying to operate on a negative value; eg. ($var * -1)." line="66"/>
        <comment value="Trying to compare a negative value; eg. ($var === -1)." line="69"/>
        <comment value="Trying to compare a negative value; eg. ($var || -1 === $b)." line="72"/>
        <comment value="Trying to assign a negative value; eg. ($var = -1)." line="75"/>
        <comment value="Returning/printing a negative value; eg. (return -1)." line="78"/>
        <comment value="Trying to use a negative value; eg. myFunction($var, -2)." line="88"/>
        <comment value="Casting a negative value; eg. (array) -$a." line="102"/>
        <comment value="These are the tokens the sniff is looking for." line="105"/>
      </inline>
    </method>
    <method name="process" start="130" end="313" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Processes this sniff, when one of its tokens is encountered."/>
        <param description="The current file being checked." type="object" variable="$phpcsFile">
          <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
        </param>
        <param description="The position of the current token in" type="int" variable="$stackPtr">the stack passed in $tokens.</param>
        <return type="object">
          <type full="PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\void" namespace="PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace" name="void"/>
        </return>
      </docblock>
      <parameter name="phpcsFile" byreference="false" type="object">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </parameter>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="end if" line="204"/>
        <comment value="end if" line="254"/>
        <comment value="end if" line="311"/>
      </inline>
    </method>
    <method name="isOperator" start="325" end="378" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Checks if an operator is actually a different type of token in the current context."/>
        <param description="The current file being checked." type="object" variable="$phpcsFile">
          <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
        </param>
        <param description="The position of the operator in" type="int" variable="$stackPtr">the stack.</param>
        <return type="boolean"/>
      </docblock>
      <parameter name="phpcsFile" byreference="false" type="object">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </parameter>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Skip default values in function declarations." line="329"/>
        <comment value="Skip declare statements." line="330"/>
        <comment value="end if" line="374"/>
      </inline>
    </method>
  </parent>
  <interface full="PHP_CodeSniffer\Sniffs\Sniff" namespace="PHP_CodeSniffer\Sniffs" name="Sniff">
    <method name="register" start="40" end="40" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Registers the tokens that this sniff wants to listen for.">An example return value for a sniff that wants to listen for whitespace
and any comments would be:

&lt;code&gt;
   return array(
           T_WHITESPACE,
           T_DOC_COMMENT,
           T_COMMENT,
          );
&lt;/code&gt;</description>
        <return type="array" of="object">
          <type full="PHP_CodeSniffer\Sniffs\mixed" namespace="PHP_CodeSniffer\Sniffs" name="mixed"/>
        </return>
        <see value="Tokens.php"/>
      </docblock>
    </method>
    <method name="process" start="77" end="77" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Called when one of the token types that this sniff is listening for is found.">The stackPtr variable indicates where in the stack the token was found.
A sniff can acquire information this token, along with all the other
tokens within the stack by first acquiring the token stack:

&lt;code&gt;
   $tokens = $phpcsFile-&gt;getTokens();
   echo 'Encountered a '.$tokens[$stackPtr]['type'].' token';
   echo 'token information: ';
   print_r($tokens[$stackPtr]);
&lt;/code&gt;

If the sniff discovers an anomaly in the code, they can raise an error
by calling addError() on the \PHP_CodeSniffer\Files\File object, specifying an error
message and the position of the offending token:

&lt;code&gt;
   $phpcsFile-&gt;addError('Encountered an error', $stackPtr);
&lt;/code&gt;</description>
        <param description="The PHP_CodeSniffer file where the" type="object" variable="$phpcsFile">token was found.<type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/></param>
        <param description="The position in the PHP_CodeSniffer" type="int" variable="$stackPtr">file's token stack where the token
                                              was found.</param>
        <return description="Optionally returns a stack pointer. The sniff will not be" type="object">called again on the current file until the returned stack
                 pointer is reached. Return (count($tokens) + 1) to skip
                 the rest of the file.<type full="PHP_CodeSniffer\Sniffs\void|int" namespace="PHP_CodeSniffer\Sniffs" name="void|int"/></return>
      </docblock>
      <parameter name="phpcsFile" byreference="false" type="object">
        <type full="PHP_CodeSniffer\Files\File" namespace="PHP_CodeSniffer\Files" name="File"/>
      </parameter>
      <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    </method>
  </interface>
</class>
