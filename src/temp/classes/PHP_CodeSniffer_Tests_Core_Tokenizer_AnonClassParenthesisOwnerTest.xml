<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PHP_CodeSniffer\Tests\Core\Tokenizer\AnonClassParenthesisOwnerTest" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="AnonClassParenthesisOwnerTest" abstract="false" final="false" start="14" end="144">
  <file path="//var/www/html/vendor/squizlabs/php_codesniffer/tests/Core/Tokenizer" file="AnonClassParenthesisOwnerTest.php" realpath="/var/www/html/vendor/squizlabs/php_codesniffer/tests/Core/Tokenizer/AnonClassParenthesisOwnerTest.php" size="5590" time="2021-12-12T21:44:58+00:00" unixtime="1639345498" sha1="20f0f4d6b5db061c190f2d609a75269551a00103" relative="ar/www/html/vendor/squizlabs/php_codesniffer/tests/Core/Tokenizer/AnonClassParenthesisOwnerTest.php"/>
  <extends full="PHP_CodeSniffer\Tests\Core\AbstractMethodUnitTest" namespace="PHP_CodeSniffer\Tests\Core" name="AbstractMethodUnitTest"/>
  <method name="testAnonClassNoParentheses" start="28" end="37" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test that anonymous class tokens without parenthesis do not get assigned a parenthesis owner."/>
      <param description="The comment which prefaces the target token in the test file." type="string" variable="$testMarker"/>
      <dataprovider value="dataAnonClassNoParentheses"/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
    <parameter name="testMarker" byreference="false" type="{unknown}"/>
  </method>
  <method name="testAnonClassNoParenthesesNextOpenClose" start="51" end="64" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test that the next open/close parenthesis after an anonymous class without parenthesis do not get assigned the anonymous class as a parenthesis owner."/>
      <param description="The comment which prefaces the target token in the test file." type="string" variable="$testMarker"/>
      <dataprovider value="dataAnonClassNoParentheses"/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
    <parameter name="testMarker" byreference="false" type="{unknown}"/>
  </method>
  <method name="dataAnonClassNoParentheses" start="75" end="82" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Data provider."/>
      <see value="testAnonClassNoParentheses()"/>
      <see value="testAnonClassNoParenthesesNextOpenClose()"/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="testAnonClassWithParentheses" start="96" end="124" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test that anonymous class tokens with parenthesis get assigned a parenthesis owner, opener and closer; and that the opener/closer get the anonymous class assigned as owner."/>
      <param description="The comment which prefaces the target token in the test file." type="string" variable="$testMarker"/>
      <dataprovider value="dataAnonClassWithParentheses"/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::processAdditional"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
    <parameter name="testMarker" byreference="false" type="{unknown}"/>
  </method>
  <method name="dataAnonClassWithParentheses" start="134" end="141" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Data provider."/>
      <see value="testAnonClassWithParentheses()"/>
      <return type="array"/>
    </docblock>
  </method>
  <parent full="PHP_CodeSniffer\Tests\Core\AbstractMethodUnitTest" namespace="PHP_CodeSniffer\Tests\Core" name="AbstractMethodUnitTest">
    <extends full="PHPUnit\Framework\TestCase" namespace="PHPUnit\Framework" name="TestCase" unresolved="true"/>
    <member name="fileExtension" default="'inc'" type="string" visibility="protected" static="true" line="28">
      <docblock>
        <description compact="The file extension of the test case file (without leading dot).">This allows child classes to overrule the default `inc` with, for instance,
`js` or `css` when applicable.</description>
        <var type="string"/>
      </docblock>
    </member>
    <member name="phpcsFile" visibility="protected" static="true" line="35">
      <docblock>
        <description compact="The \PHP_CodeSniffer\Files\File object containing the parsed contents of the test case file."/>
        <var type="object">
          <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
        </var>
      </docblock>
    </member>
    <method name="setUpBeforeClass" start="46" end="65" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Initialize &amp; tokenize \PHP_CodeSniffer\Files\File with code from the test case file.">The test case file for a unit test class has to be in the same directory
directory and use the same file name as the test class, using the .inc extension.</description>
        <return type="object">
          <type full="PHP_CodeSniffer\Tests\Core\void" namespace="PHP_CodeSniffer\Tests\Core" name="void"/>
        </return>
      </docblock>
      <inline>
        <comment value="Default to a file with the same name as the test class. Extension is property based." line="53"/>
        <comment value="Make sure the file gets parsed correctly based on the file type." line="58"/>
      </inline>
    </method>
    <method name="tearDownAfterClass" start="73" end="77" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Clean up after finished test."/>
        <return type="object">
          <type full="PHP_CodeSniffer\Tests\Core\void" namespace="PHP_CodeSniffer\Tests\Core" name="void"/>
        </return>
      </docblock>
    </method>
    <method name="getTargetToken" start="92" end="137" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the token pointer for a target token based on a specific comment found on the line before.">Note: the test delimiter comment MUST start with "/* test" to allow this function to
distinguish between comments used *in* a test and test delimiters.</description>
        <param description="The delimiter comment to look for." type="string" variable="$commentString"/>
        <param description="The type of token(s) to look for." type="object" variable="$tokenType">
          <type full="PHP_CodeSniffer\Tests\Core\int|string|array" namespace="PHP_CodeSniffer\Tests\Core" name="int|string|array"/>
        </param>
        <param description="Optional. The token content for the target token." type="string" variable="$tokenContent"/>
        <return type="int"/>
      </docblock>
      <parameter name="commentString" byreference="false" type="{unknown}"/>
      <parameter name="tokenType" byreference="false" type="{unknown}"/>
      <parameter name="tokenContent" byreference="false" type="{unknown}" default="NULL"/>
      <inline>
        <comment value="Limit the token finding to between this and the next delimiter comment." line="106"/>
      </inline>
    </method>
  </parent>
</class>
