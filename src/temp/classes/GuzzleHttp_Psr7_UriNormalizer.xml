<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="GuzzleHttp\Psr7\UriNormalizer" namespace="GuzzleHttp\Psr7" name="UriNormalizer" abstract="false" final="true" start="16" end="220">
  <file path="//var/www/html/vendor/guzzlehttp/psr7/src" file="UriNormalizer.php" realpath="/var/www/html/vendor/guzzlehttp/psr7/src/UriNormalizer.php" size="8419" time="2022-03-20T21:55:58+00:00" unixtime="1647813358" sha1="095c331359933c033463b8e82d2d9575e3e4bb42" relative="ar/www/html/vendor/guzzlehttp/psr7/src/UriNormalizer.php"/>
  <docblock>
    <description compact="Provides methods to normalize and compare URIs."/>
    <author value="Tobias Schultze"/>
    <link value="https://tools.ietf.org/html/rfc3986#section-6"/>
  </docblock>
  <constant type="expression" name="PRESERVING_NORMALIZATIONS" value="self::CAPITALIZE_PERCENT_ENCODING | self::DECODE_UNRESERVED_CHARACTERS | self::CONVERT_EMPTY_PATH | self::REMOVE_DEFAULT_HOST | self::REMOVE_DEFAULT_PORT | self::REMOVE_DOT_SEGMENT">
    <docblock>
      <description compact="Default normalizations which only include the ones that preserve semantics."/>
    </docblock>
  </constant>
  <constant type="integer" name="CAPITALIZE_PERCENT_ENCODING" value="1">
    <docblock>
      <description compact="All letters within a percent-encoding triplet (e.g., &quot;%3A&quot;) are case-insensitive, and should be capitalized.">Example: http://example.org/a%c2%b1b → http://example.org/a%C2%B1b</description>
    </docblock>
  </constant>
  <constant type="integer" name="DECODE_UNRESERVED_CHARACTERS" value="2">
    <docblock>
      <description compact="Decodes percent-encoded octets of unreserved characters.">For consistency, percent-encoded octets in the ranges of ALPHA (%41–%5A and %61–%7A), DIGIT (%30–%39),
hyphen (%2D), period (%2E), underscore (%5F), or tilde (%7E) should not be created by URI producers and,
when found in a URI, should be decoded to their corresponding unreserved characters by URI normalizers.

Example: http://example.org/%7Eusern%61me/ → http://example.org/~username/</description>
    </docblock>
  </constant>
  <constant type="integer" name="CONVERT_EMPTY_PATH" value="4">
    <docblock>
      <description compact="Converts the empty path to &quot;/&quot; for http and https URIs.">Example: http://example.org → http://example.org/</description>
    </docblock>
  </constant>
  <constant type="integer" name="REMOVE_DEFAULT_HOST" value="8">
    <docblock>
      <description compact="Removes the default host of the given URI scheme from the URI.">Only the "file" scheme defines the default host "localhost".
All of `file:/myfile`, `file:///myfile`, and `file://localhost/myfile`
are equivalent according to RFC 3986. The first format is not accepted
by PHPs stream functions and thus already normalized implicitly to the
second format in the Uri class. See `GuzzleHttp\Psr7\Uri::composeComponents`.

Example: file://localhost/myfile → file:///myfile</description>
    </docblock>
  </constant>
  <constant type="integer" name="REMOVE_DEFAULT_PORT" value="16">
    <docblock>
      <description compact="Removes the default port of the given URI scheme from the URI.">Example: http://example.org:80/ → http://example.org/</description>
    </docblock>
  </constant>
  <constant type="integer" name="REMOVE_DOT_SEGMENTS" value="32">
    <docblock>
      <description compact="Removes unnecessary dot-segments.">Dot-segments in relative-path references are not removed as it would
change the semantics of the URI reference.

Example: http://example.org/../a/b/../c/./d.html → http://example.org/a/c/d.html</description>
    </docblock>
  </constant>
  <constant type="integer" name="REMOVE_DUPLICATE_SLASHES" value="64">
    <docblock>
      <description compact="Paths which include two or more adjacent slashes are converted to one.">Webservers usually ignore duplicate slashes and treat those URIs equivalent.
But in theory those URIs do not need to be equivalent. So this normalization
may change the semantics. Encoded slashes (%2F) are not removed.

Example: http://example.org//foo///bar.html → http://example.org/foo/bar.html</description>
    </docblock>
  </constant>
  <constant type="integer" name="SORT_QUERY_PARAMETERS" value="128">
    <docblock>
      <description compact="Sort query parameters with their values in alphabetical order.">However, the order of parameters in a URI may be significant (this is not defined by the standard).
So this normalization is not safe and may change the semantics of the URI.

Example: ?lang=en&amp;article=fred → ?article=fred&amp;lang=en

Note: The sorting is neither locale nor Unicode aware (the URI query does not get decoded at all) as the
purpose is to be able to compare URIs in a reproducible way, not to have the params sorted perfectly.</description>
    </docblock>
  </constant>
  <method name="normalize" start="124" end="163" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a normalized URI.">The scheme and host component are already normalized to lowercase per PSR-7 UriInterface.
This methods adds additional normalizations that can be configured with the $flags parameter.

PSR-7 UriInterface cannot distinguish between an empty component and a missing component as
getQuery(), getFragment() etc. always return a string. This means the URIs "/?#" and "/" are
treated equivalent which is not necessarily true according to RFC 3986. But that difference
is highly uncommon in reality. So this potential normalization is implied in PSR-7 as well.</description>
      <param description="The URI to normalize" type="object" variable="$uri">
        <type full="Psr\Http\Message\UriInterface" namespace="Psr\Http\Message" name="UriInterface"/>
      </param>
      <param description="A bitmask of normalizations to apply, see constants" type="int" variable="$flags"/>
      <link value="https://tools.ietf.org/html/rfc3986#section-6.2"/>
    </docblock>
    <return type="object" nullable="false">
      <type full="Psr\Http\Message\UriInterface" namespace="Psr\Http\Message" name="UriInterface"/>
    </return>
    <parameter name="uri" byreference="false" type="object">
      <type full="Psr\Http\Message\UriInterface" namespace="Psr\Http\Message" name="UriInterface"/>
    </parameter>
    <parameter name="flags" byreference="false" type="{unknown}" default="" constant="self::PRESERVING_NORMALIZATIONS"/>
  </method>
  <method name="isEquivalent" start="179" end="182" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Whether two URIs can be considered equivalent.">Both URIs are normalized automatically before comparison with the given $normalizations bitmask. The method also
accepts relative URI references and returns true when they are equivalent. This of course assumes they will be
resolved against the same base URI. If this is not the case, determination of equivalence or difference of
relative references does not mean anything.</description>
      <param description="An URI to compare" type="object" variable="$uri1">
        <type full="Psr\Http\Message\UriInterface" namespace="Psr\Http\Message" name="UriInterface"/>
      </param>
      <param description="An URI to compare" type="object" variable="$uri2">
        <type full="Psr\Http\Message\UriInterface" namespace="Psr\Http\Message" name="UriInterface"/>
      </param>
      <param description="A bitmask of normalizations to apply, see constants" type="int" variable="$normalizations"/>
      <link value="https://tools.ietf.org/html/rfc3986#section-6.1"/>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="uri1" byreference="false" type="object">
      <type full="Psr\Http\Message\UriInterface" namespace="Psr\Http\Message" name="UriInterface"/>
    </parameter>
    <parameter name="uri2" byreference="false" type="object">
      <type full="Psr\Http\Message\UriInterface" namespace="Psr\Http\Message" name="UriInterface"/>
    </parameter>
    <parameter name="normalizations" byreference="false" type="{unknown}" default="" constant="self::PRESERVING_NORMALIZATIONS"/>
  </method>
  <method name="capitalizePercentEncoding" start="184" end="198" abstract="false" final="false" static="true" visibility="private">
    <return type="object" nullable="false">
      <type full="Psr\Http\Message\UriInterface" namespace="Psr\Http\Message" name="UriInterface"/>
    </return>
    <parameter name="uri" byreference="false" type="object">
      <type full="Psr\Http\Message\UriInterface" namespace="Psr\Http\Message" name="UriInterface"/>
    </parameter>
  </method>
  <method name="decodeUnreservedCharacters" start="200" end="214" abstract="false" final="false" static="true" visibility="private">
    <return type="object" nullable="false">
      <type full="Psr\Http\Message\UriInterface" namespace="Psr\Http\Message" name="UriInterface"/>
    </return>
    <parameter name="uri" byreference="false" type="object">
      <type full="Psr\Http\Message\UriInterface" namespace="Psr\Http\Message" name="UriInterface"/>
    </parameter>
  </method>
  <constructor name="__construct" start="216" end="219" abstract="false" final="false" static="false" visibility="private">
    <inline>
      <comment value="cannot be instantiated" line="218"/>
    </inline>
  </constructor>
</class>
