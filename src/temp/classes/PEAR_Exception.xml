<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PEAR_Exception" namespace="" name="PEAR_Exception" abstract="false" final="false" start="96" end="388">
  <file path="//usr/local/lib/php/PEAR" file="Exception.php" realpath="/usr/local/lib/php/PEAR/Exception.php" size="13933" time="2020-02-26T12:11:53+00:00" unixtime="1582719113" sha1="5759bb77b783b5a5a75e6d70ceb48f85156f2217" relative="sr/local/lib/php/PEAR/Exception.php"/>
  <docblock>
    <description compact="Base PEAR_Exception Class">1) Features:

- Nestable exceptions (throw new PEAR_Exception($msg, $prev_exception))
- Definable triggers, shot when exceptions occur
- Pretty and informative error messages
- Added more context info available (like class, method or cause)
- cause can be a PEAR_Exception or an array of mixed
  PEAR_Exceptions/PEAR_ErrorStack warnings
- callbacks for specific exception classes and their children

2) Ideas:

- Maybe a way to define a 'template' for the output

3) Inherited properties from PHP Exception Class:

protected $message
protected $code
protected $line
protected $file
private   $trace

4) Inherited methods from PHP Exception Class:

__clone
__construct
getMessage
getCode
getFile
getLine
getTraceSafe
getTraceSafeAsString
__toString

5) Usage example

&lt;code&gt;
 require_once 'PEAR/Exception.php';

 class Test {
    function foo() {
        throw new PEAR_Exception('Error Message', ERROR_CODE);
    }
 }

 function myLogger($pear_exception) {
    echo $pear_exception-&gt;getMessage();
 }
 // each time a exception is thrown the 'myLogger' will be called
 // (its use is completely optional)
 PEAR_Exception::addObserver('myLogger');
 $test = new Test;
 try {
    $test-&gt;foo();
 } catch (PEAR_Exception $e) {
    print $e;
 }
&lt;/code&gt;</description>
    <category value="pear"/>
    <package value="PEAR"/>
    <author value="Tomas V.V.Cox &lt;cox@idecnet.com&gt;"/>
    <author value="Hans Lellelid &lt;hans@velum.net&gt;"/>
    <author value="Bertrand Mansion &lt;bmansion@mamasam.com&gt;"/>
    <author value="Greg Beaver &lt;cellog@php.net&gt;"/>
    <copyright value="1997-2009 The Authors"/>
    <license name="http://opensource.org/licenses/bsd-license.php New BSD License"/>
    <version value="Release: 1.10.10"/>
    <link value="http://pear.php.net/package/PEAR"/>
    <since value="Class available since Release 1.3.3"/>
  </docblock>
  <extends full="Exception" namespace="" name="Exception"/>
  <constant type="integer" name="OBSERVER_PRINT" value="2"/>
  <constant type="integer" name="OBSERVER_TRIGGER" value="4"/>
  <constant type="integer" name="OBSERVER_DIE" value="8"/>
  <member name="cause" visibility="protected" static="false" line="101"/>
  <member name="_observers" default="" type="array" visibility="private" static="true" line="102"/>
  <member name="_uniqueid" default="0" type="integer" visibility="private" static="true" line="103"/>
  <member name="_trace" visibility="private" static="false" line="104"/>
  <constructor name="__construct" start="120" end="145" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Supported signatures:  - PEAR_Exception(string $message);  - PEAR_Exception(string $message, int $code);  - PEAR_Exception(string $message, Exception $cause);  - PEAR_Exception(string $message, Exception $cause, int $code);  - PEAR_Exception(string $message, PEAR_Error $cause);  - PEAR_Exception(string $message, PEAR_Error $cause, int $code);  - PEAR_Exception(string $message, array $causes);  - PEAR_Exception(string $message, array $causes, int $code);"/>
      <param description="exception message" type="string"/>
      <param description="exception cause" type="object">
        <type full="int|Exception|PEAR_Error|array|null" namespace="" name="int|Exception|PEAR_Error|array|null"/>
      </param>
      <param description="exception code or null" type="object">
        <type full="int|null" namespace="" name="int|null"/>
      </param>
    </docblock>
    <parameter name="message" byreference="false" type="{unknown}"/>
    <parameter name="p2" byreference="false" type="{unknown}" default="NULL"/>
    <parameter name="p3" byreference="false" type="{unknown}" default="NULL"/>
  </constructor>
  <method name="addObserver" start="155" end="158" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <param description="- A valid php callback, see php func is_callable()" type="mixed" variable="$callback">- A PEAR_Exception::OBSERVER_* constant
                        - An array(const PEAR_Exception::OBSERVER_*,
                          mixed $options)</param>
      <param description="The name of the observer. Use this if you want" type="string" variable="$label">to remove it later with removeObserver()</param>
    </docblock>
    <parameter name="callback" byreference="false" type="{unknown}"/>
    <parameter name="label" byreference="false" type="string" default="'default'"/>
  </method>
  <method name="removeObserver" start="160" end="163" abstract="false" final="false" static="true" visibility="public">
    <parameter name="label" byreference="false" type="string" default="'default'"/>
  </method>
  <method name="getUniqueId" start="168" end="171" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <return description="unique identifier for an observer" type="int"/>
    </docblock>
  </method>
  <method name="signal" start="173" end="198" abstract="false" final="false" static="false" visibility="private"/>
  <method name="getErrorData" start="214" end="217" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return specific error information that can be used for more detailed error messages or translation.">This method may be overridden in child exception classes in order
to add functionality not present in PEAR_Exception and is a placeholder
to define API

The returned array must be an associative array of parameter =&gt; value like so:
&lt;pre&gt;
array('name' =&gt; $name, 'context' =&gt; array(...))
&lt;/pre&gt;</description>
      <return type="array"/>
    </docblock>
  </method>
  <method name="getCause" start="224" end="227" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the exception that caused this exception to be thrown"/>
      <access value="public"/>
      <return description="The context of the exception" type="object">
        <type full="Exception|array" namespace="" name="Exception|array"/>
      </return>
    </docblock>
  </method>
  <method name="getCauseMessage" start="233" end="288" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Function must be public to call on caused exceptions"/>
      <param type="array"/>
    </docblock>
    <parameter name="causes" byreference="true" type="{unknown}"/>
  </method>
  <method name="getTraceSafe" start="290" end="300" abstract="false" final="false" static="false" visibility="public"/>
  <method name="getErrorClass" start="302" end="306" abstract="false" final="false" static="false" visibility="public"/>
  <method name="getErrorMethod" start="308" end="312" abstract="false" final="false" static="false" visibility="public"/>
  <method name="__toString" start="314" end="320" abstract="false" final="false" static="false" visibility="public"/>
  <method name="toHtml" start="322" end="374" abstract="false" final="false" static="false" visibility="public"/>
  <method name="toText" start="376" end="387" abstract="false" final="false" static="false" visibility="public"/>
  <parent full="Exception" namespace="" name="Exception">
    <member name="message" static="false" visibility="protected">
    <default>null</default>
    <docblock>
      <description compact="The exception message"/>
      <var type="string"/>
    </docblock>
  </member>
    <member name="code" static="false" visibility="protected">
    <default>null</default>
    <docblock>
      <description compact="The exception code"/>
      <var type="int"/>
    </docblock>
  </member>
    <member name="file" static="false" visibility="protected">
    <default>null</default>
    <docblock>
      <description compact="The filename where the exception was created"/>
      <var type="string"/>
    </docblock>
  </member>
    <member name="line" static="false" visibility="protected">
    <default>null</default>
    <docblock>
      <description compact="The line where the exception was created"/>
      <var type="int"/>
    </docblock>
  </member>
    <constructor name="__construct" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Construct the exception"/>
      <return type="void"/>
    </docblock>
    <parameter name="message" optional="true" byreference="false" type="string"/>
    <parameter name="code" optional="true" byreference="false" type="int"/>
    <parameter name="previous" optional="true" byreference="false" type="object" class="Throwable"/>
  </constructor>
    <method name="getMessage" abstract="false" static="false" visibility="public" final="true">
    <docblock>
      <description compact="Gets the Exception message"/>
      <return type="string"/>
    </docblock>
  </method>
    <method name="getPrevious" abstract="false" static="false" visibility="public" final="true">
    <docblock>
      <description compact="Returns previous Exception"/>
      <return type="Throwable"/>
    </docblock>
  </method>
    <method name="getCode" abstract="false" static="false" visibility="public" final="true">
    <docblock>
      <description compact="Gets the Exception code"/>
      <return type="mixed"/>
    </docblock>
  </method>
    <method name="getFile" abstract="false" static="false" visibility="public" final="true">
    <docblock>
      <description compact="Gets the file in which the exception was created"/>
      <return type="string"/>
    </docblock>
  </method>
    <method name="getLine" abstract="false" static="false" visibility="public" final="true">
    <docblock>
      <description compact="Gets the line in which the exception was created"/>
      <return type="int"/>
    </docblock>
  </method>
    <method name="getTrace" abstract="false" static="false" visibility="public" final="true">
    <docblock>
      <description compact="Gets the stack trace"/>
      <return type="array"/>
    </docblock>
  </method>
    <method name="getTraceAsString" abstract="false" static="false" visibility="public" final="true">
    <docblock>
      <description compact="Gets the stack trace as a string"/>
      <return type="string"/>
    </docblock>
  </method>
    <method name="__toString" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="String representation of the exception"/>
      <return type="string"/>
    </docblock>
  </method>
  </parent>
</class>
