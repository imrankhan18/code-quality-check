<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PHP_CodeSniffer\Tokenizers\JS" namespace="PHP_CodeSniffer\Tokenizers" name="JS" abstract="false" final="false" start="16" end="1256">
  <file path="//var/www/html/vendor/squizlabs/php_codesniffer/src/Tokenizers" file="JS.php" realpath="/var/www/html/vendor/squizlabs/php_codesniffer/src/Tokenizers/JS.php" size="50179" time="2021-12-12T21:44:58+00:00" unixtime="1639345498" sha1="7f209697bcfe61b21ff399292b883019016b0bd3" relative="ar/www/html/vendor/squizlabs/php_codesniffer/src/Tokenizers/JS.php"/>
  <extends full="PHP_CodeSniffer\Tokenizers\Tokenizer" namespace="PHP_CodeSniffer\Tokenizers" name="Tokenizer"/>
  <member name="scopeOpeners" default="" type="array" visibility="public" static="false" line="29">
    <docblock>
      <description compact="A list of tokens that are allowed to open a scope.">This array also contains information about what kind of token the scope
opener uses to open and close the scope, if the token strictly requires
an opener, if the token can share a scope closer, and who it can be shared
with. An example of a token that shares a scope closer is a CASE scope.</description>
      <var type="array"/>
    </docblock>
  </member>
  <member name="endScopeTokens" default="" type="array" visibility="public" static="false" line="142">
    <docblock>
      <description compact="A list of tokens that end the scope.">This array is just a unique collection of the end tokens
from the _scopeOpeners array. The data is duplicated here to
save time during parsing of the file.</description>
      <var type="array"/>
    </docblock>
  </member>
  <member name="tokenValues" default="" type="array" visibility="protected" static="false" line="152">
    <docblock>
      <description compact="A list of special JS tokens and their types."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="stringTokens" default="" type="array" visibility="protected" static="false" line="232">
    <docblock>
      <description compact="A list string delimiters."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="commentTokens" default="" type="array" visibility="protected" static="false" line="242">
    <docblock>
      <description compact="A list tokens that start and end comments."/>
      <var type="array"/>
    </docblock>
  </member>
  <constructor name="__construct" start="261" end="269" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Initialise the tokenizer.">Pre-checks the content to see if it looks minified.</description>
      <param description="The content to tokenize," type="string" variable="$content"/>
      <param description="The config data for the run." type="object" variable="$config">
        <type full="\PHP_CodeSniffer\Config" namespace="\PHP_CodeSniffer" name="Config"/>
      </param>
      <param description="The EOL char used in the content." type="string" variable="$eolChar"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tokenizers\void" namespace="PHP_CodeSniffer\Tokenizers" name="void"/>
      </return>
      <throws description="If the file appears to be minified." type="object">
        <type full="\PHP_CodeSniffer\Exceptions\TokenizerException" namespace="\PHP_CodeSniffer\Exceptions" name="TokenizerException"/>
      </throws>
    </docblock>
    <parameter name="content" byreference="false" type="{unknown}"/>
    <parameter name="config" byreference="false" type="object">
      <type full="PHP_CodeSniffer\Config" namespace="PHP_CodeSniffer" name="Config"/>
    </parameter>
    <parameter name="eolChar" byreference="false" type="string" default="'\n'"/>
  </constructor>
  <method name="tokenize" start="279" end="900" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Creates an array of tokens when given some JS code."/>
      <param description="The string to tokenize." type="string" variable="$string"/>
      <return type="array"/>
    </docblock>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Convert newlines to single characters for ease of" line="308"/>
      <comment value="processing. We will change them back later." line="309"/>
      <comment value="end for" line="701"/>
      <comment value="end if" line="730"/>
      <comment value="Now that we have done some basic tokenizing, we need to" line="738"/>
      <comment xmlns="http://xml.phpdox.net/src" value="modify the tokens to join some together and split some apart" line="739"/>
      <comment xmlns="http://xml.phpdox.net/src" value="so they match what the PHP tokenizer does." line="740"/>
      <comment value="end for" line="892"/>
    </inline>
  </method>
  <method name="getRegexToken" start="915" end="1042" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tokenizes a regular expression if one is found.">If a regular expression is not found, NULL is returned.</description>
      <param description="The index of the possible regex start character." type="string" variable="$char"/>
      <param description="The complete content of the string being tokenized." type="string" variable="$string"/>
      <param description="An array of characters being tokenized." type="string" variable="$chars"/>
      <param description="The current array of tokens found in the string." type="string" variable="$tokens"/>
      <return description="string&gt;|null" type="object">
        <type full="PHP_CodeSniffer\Tokenizers\array&lt;string" namespace="PHP_CodeSniffer\Tokenizers" name="array&lt;string"/>
      </return>
    </docblock>
    <parameter name="char" byreference="false" type="{unknown}"/>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="chars" byreference="false" type="{unknown}"/>
    <parameter name="tokens" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Find the last non-whitespace token that was added" line="948"/>
      <comment value="to the tokens array." line="949"/>
      <comment value="This is probably a regular expression, so look for the end of it." line="961"/>
      <comment value="This is a regular expression, so join all the tokens together." line="1028"/>
    </inline>
  </method>
  <method name="processAdditional" start="1052" end="1253" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Performs additional processing after main tokenizing.">This additional processing looks for properties, closures, labels and objects.</description>
      <return type="object">
        <type full="PHP_CodeSniffer\Tokenizers\void" namespace="PHP_CodeSniffer\Tokenizers" name="void"/>
      </return>
    </docblock>
    <inline>
      <comment value="end for" line="1247"/>
    </inline>
  </method>
  <parent full="PHP_CodeSniffer\Tokenizers\Tokenizer" namespace="PHP_CodeSniffer\Tokenizers" name="Tokenizer">
    <member name="config" default="NULL" visibility="protected" static="false" line="23">
      <docblock>
        <description compact="The config data for the run."/>
        <var type="object">
          <type full="\PHP_CodeSniffer\Config" namespace="\PHP_CodeSniffer" name="Config"/>
        </var>
      </docblock>
    </member>
    <member name="eolChar" default="" type="array" visibility="protected" static="false" line="30">
      <docblock>
        <description compact="The EOL char used in the content."/>
        <var type="string"/>
      </docblock>
    </member>
    <member name="tokens" default="" type="array" visibility="protected" static="false" line="37">
      <docblock>
        <description compact="A token-based representation of the content."/>
        <var type="array"/>
      </docblock>
    </member>
    <member name="numTokens" default="0" type="integer" visibility="protected" static="false" line="44">
      <docblock>
        <description compact="The number of tokens in the tokens array."/>
        <var type="integer"/>
      </docblock>
    </member>
    <member name="scopeOpeners" default="" type="array" visibility="public" static="false" line="51">
      <docblock>
        <description compact="A list of tokens that are allowed to open a scope."/>
        <var type="array"/>
      </docblock>
    </member>
    <member name="endScopeTokens" default="" type="array" visibility="public" static="false" line="58">
      <docblock>
        <description compact="A list of tokens that end the scope."/>
        <var type="array"/>
      </docblock>
    </member>
    <member name="knownLengths" default="" type="array" visibility="public" static="false" line="65">
      <docblock>
        <description compact="Known lengths of tokens."/>
        <var description="int&gt;" type="object">
          <type full="PHP_CodeSniffer\Tokenizers\array&lt;int" namespace="PHP_CodeSniffer\Tokenizers" name="array&lt;int"/>
        </var>
      </docblock>
    </member>
    <member name="ignoredLines" default="" type="array" visibility="public" static="false" line="72">
      <docblock>
        <description compact="A list of lines being ignored due to error suppression comments."/>
        <var type="array"/>
      </docblock>
    </member>
    <constructor name="__construct" start="85" end="105" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Initialise and run the tokenizer."/>
        <param description="The content to tokenize," type="string" variable="$content"/>
        <param description="| null $config  The config data for the run." type="object">
          <type full="\PHP_CodeSniffer\Config" namespace="\PHP_CodeSniffer" name="Config"/>
        </param>
        <param description="The EOL char used in the content." type="string" variable="$eolChar"/>
        <return type="object">
          <type full="PHP_CodeSniffer\Tokenizers\void" namespace="PHP_CodeSniffer\Tokenizers" name="void"/>
        </return>
        <throws description="If the file appears to be minified." type="object">
          <type full="\PHP_CodeSniffer\Exceptions\TokenizerException" namespace="\PHP_CodeSniffer\Exceptions" name="TokenizerException"/>
        </throws>
      </docblock>
      <parameter name="content" byreference="false" type="{unknown}"/>
      <parameter name="config" byreference="false" type="{unknown}"/>
      <parameter name="eolChar" byreference="false" type="string" default="'\n'"/>
      <inline>
        <comment value="Allow the tokenizer to do additional processing if required." line="102"/>
      </inline>
    </constructor>
    <method name="isMinifiedContent" start="116" end="129" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Checks the content to see if it looks minified."/>
        <param description="The content to tokenize." type="string" variable="$content"/>
        <param description="The EOL char used in the content." type="string" variable="$eolChar"/>
        <return type="boolean"/>
      </docblock>
      <parameter name="content" byreference="false" type="{unknown}"/>
      <parameter name="eolChar" byreference="false" type="string" default="'\n'"/>
      <inline>
        <comment value="Minified files often have a very large number of characters per line" line="118"/>
        <comment value="and cause issues when tokenizing." line="119"/>
      </inline>
    </method>
    <method name="getTokens" start="137" end="141" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Gets the array of tokens."/>
        <return type="array"/>
      </docblock>
    </method>
    <method name="tokenize" start="151" end="151" abstract="true" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Creates an array of tokens when given some content."/>
        <param description="The string to tokenize." type="string" variable="$string"/>
        <return type="array"/>
      </docblock>
      <parameter name="string" byreference="false" type="{unknown}"/>
    </method>
    <method name="processAdditional" start="159" end="159" abstract="true" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Performs additional processing after main tokenizing."/>
        <return type="object">
          <type full="PHP_CodeSniffer\Tokenizers\void" namespace="PHP_CodeSniffer\Tokenizers" name="void"/>
        </return>
      </docblock>
    </method>
    <method name="replaceTabsInToken" start="583" end="655" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Replaces tabs in original token content with spaces.">Each tab can represent between 1 and $config-&gt;tabWidth spaces,
so this cannot be a straight string replace. The original content
is placed into an orig_content index and the new token length is also
set in the length index.</description>
        <param description="The token to replace tabs inside." type="array" variable="$token"/>
        <param description="The character to use to represent the start of a tab." type="string" variable="$prefix"/>
        <param description="The character to use to represent the end of a tab." type="string" variable="$padding"/>
        <param description="The number of spaces each tab represents." type="int" variable="$tabWidth"/>
        <return type="object">
          <type full="PHP_CodeSniffer\Tokenizers\void" namespace="PHP_CodeSniffer\Tokenizers" name="void"/>
        </return>
      </docblock>
      <parameter name="token" byreference="true" type="{unknown}"/>
      <parameter name="prefix" byreference="false" type="string" default="' '"/>
      <parameter name="padding" byreference="false" type="string" default="' '"/>
      <parameter name="tabWidth" byreference="false" type="{unknown}" default="NULL"/>
      <inline>
        <comment value="end if" line="649"/>
      </inline>
    </method>
  </parent>
</class>
