<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Symfony\Component\Console\EventListener\ErrorListener" namespace="Symfony\Component\Console\EventListener" name="ErrorListener" abstract="false" final="false" start="25" end="95">
  <file path="//var/www/html/vendor/symfony/console/EventListener" file="ErrorListener.php" realpath="/var/www/html/vendor/symfony/console/EventListener/ErrorListener.php" size="2819" time="2022-04-12T16:02:29+00:00" unixtime="1649779349" sha1="aade9af29820bae6cbc218ea19b307c0071c6b12" relative="ar/www/html/vendor/symfony/console/EventListener/ErrorListener.php"/>
  <docblock>
    <description/>
    <author value="James Halsall &lt;james.t.halsall@googlemail.com&gt;"/>
    <author value="Robin Chalas &lt;robin.chalas@gmail.com&gt;"/>
  </docblock>
  <implements full="Symfony\Component\EventDispatcher\EventSubscriberInterface" namespace="Symfony\Component\EventDispatcher" name="EventSubscriberInterface"/>
  <member name="logger" visibility="private" static="false" line="27"/>
  <constructor name="__construct" start="29" end="32" abstract="false" final="false" static="false" visibility="public">
    <parameter name="logger" byreference="false" type="object" default="NULL">
      <type full="Psr\Log\LoggerInterface" namespace="Psr\Log" name="LoggerInterface"/>
    </parameter>
  </constructor>
  <method name="onConsoleError" start="34" end="49" abstract="false" final="false" static="false" visibility="public">
    <parameter name="event" byreference="false" type="object">
      <type full="Symfony\Component\Console\Event\ConsoleErrorEvent" namespace="Symfony\Component\Console\Event" name="ConsoleErrorEvent"/>
    </parameter>
  </method>
  <method name="onConsoleTerminate" start="51" end="70" abstract="false" final="false" static="false" visibility="public">
    <parameter name="event" byreference="false" type="object">
      <type full="Symfony\Component\Console\Event\ConsoleTerminateEvent" namespace="Symfony\Component\Console\Event" name="ConsoleTerminateEvent"/>
    </parameter>
  </method>
  <method name="getSubscribedEvents" start="72" end="78" abstract="false" final="false" static="true" visibility="public"/>
  <method name="getInputString" start="80" end="94" abstract="false" final="false" static="true" visibility="private">
    <return type="string" nullable="true"/>
    <parameter name="event" byreference="false" type="object">
      <type full="Symfony\Component\Console\Event\ConsoleEvent" namespace="Symfony\Component\Console\Event" name="ConsoleEvent"/>
    </parameter>
  </method>
  <interface full="Symfony\Component\EventDispatcher\EventSubscriberInterface" namespace="Symfony\Component\EventDispatcher" name="EventSubscriberInterface">
    <method name="getSubscribedEvents" start="48" end="48" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Returns an array of event names this subscriber wants to listen to.">The array keys are event names and the value can be:

 * The method name to call (priority defaults to 0)
 * An array composed of the method name to call and the priority
 * An array of arrays composed of the method names to call and respective
   priorities, or 0 if unset

For instance:

 * ['eventName' =&gt; 'methodName']
 * ['eventName' =&gt; ['methodName', $priority]]
 * ['eventName' =&gt; [['methodName1', $priority], ['methodName2']]]

The code must not depend on runtime state as it will only be called at compile time.
All logic depending on runtime state must be put into the individual methods handling the events.</description>
        <return description="string|array{0: string, 1: int}|list&lt;array{0: string, 1?: int}&gt;&gt;" type="object">
          <type full="Symfony\Component\EventDispatcher\array&lt;string" namespace="Symfony\Component\EventDispatcher" name="array&lt;string"/>
        </return>
      </docblock>
    </method>
  </interface>
</class>
