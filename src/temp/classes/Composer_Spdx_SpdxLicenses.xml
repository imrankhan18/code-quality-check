<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Composer\Spdx\SpdxLicenses" namespace="Composer\Spdx" name="SpdxLicenses" abstract="false" final="false" start="14" end="357">
  <file path="//var/www/html/vendor/composer/spdx-licenses/src" file="SpdxLicenses.php" realpath="/var/www/html/vendor/composer/spdx-licenses/src/SpdxLicenses.php" size="9847" time="2021-11-18T10:14:14+00:00" unixtime="1637230454" sha1="db8fe67f36c32752f113f8e8f9d194de80c154d0" relative="ar/www/html/vendor/composer/spdx-licenses/src/SpdxLicenses.php"/>
  <constant type="string" name="LICENSES_FILE" value="'spdx-licenses.json'">
    <docblock>
      <var type="string"/>
    </docblock>
  </constant>
  <constant type="string" name="EXCEPTIONS_FILE" value="'spdx-exceptions.json'">
    <docblock>
      <var type="string"/>
    </docblock>
  </constant>
  <member name="licenses" visibility="private" static="false" line="35">
    <docblock>
      <description compact="Contains all the licenses.">The array is indexed by license identifiers, which contain
a numerically indexed array with license details.

 [ lowercased license identifier =&gt;
     [ 0 =&gt; identifier (string), 1 =&gt; full name (string), 2 =&gt; osi certified (bool), 3 =&gt; deprecated (bool) ]
   , ...
 ]</description>
      <var description="array{0: string, 1: string, 2: bool, 3: bool}&gt;" type="object">
        <type full="Composer\Spdx\array&lt;string" namespace="Composer\Spdx" name="array&lt;string"/>
      </var>
    </docblock>
  </member>
  <member name="licensesExpression" visibility="private" static="false" line="40">
    <docblock>
      <description/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="exceptions" visibility="private" static="false" line="55">
    <docblock>
      <description compact="Contains all the license exceptions.">The array is indexed by license exception identifiers, which contain
a numerically indexed array with license exception details.

 [ lowercased exception identifier =&gt;
     [ 0 =&gt; exception identifier (string), 1 =&gt; full name (string) ]
   , ...
 ]</description>
      <var description="array{0: string, 1: string}&gt;" type="object">
        <type full="Composer\Spdx\array&lt;string" namespace="Composer\Spdx" name="array&lt;string"/>
      </var>
    </docblock>
  </member>
  <member name="exceptionsExpression" visibility="private" static="false" line="60">
    <docblock>
      <description/>
      <var type="string"/>
    </docblock>
  </member>
  <constructor name="__construct" start="62" end="66" abstract="false" final="false" static="false" visibility="public"/>
  <method name="getLicenseByIdentifier" start="80" end="96" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns license metadata by license identifier.">This function adds a link to the full license text to the license metadata.
The array returned is in the form of:

 [ 0 =&gt; full name (string), 1 =&gt; osi certified, 2 =&gt; link to license text (string), 3 =&gt; deprecation status (bool) ]</description>
      <param type="string" variable="$identifier"/>
      <return description="string, 1: bool, 2: string, 3: bool}|null" type="object">
        <type full="Composer\Spdx\array{0:" namespace="Composer\Spdx" name="array{0:"/>
      </return>
    </docblock>
    <parameter name="identifier" byreference="false" type="{unknown}"/>
  </method>
  <method name="getLicenses" start="103" end="106" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns all licenses information, keyed by the lowercased license identifier."/>
      <return description="string, 1: string, 2: bool, 3: bool}[] Each item is [ 0 =&gt; identifier (string), 1 =&gt; full name (string), 2 =&gt; osi certified (bool), 3 =&gt; deprecated (bool) ]" type="object">
        <type full="Composer\Spdx\array{0:" namespace="Composer\Spdx" name="array{0:"/>
      </return>
    </docblock>
  </method>
  <method name="getExceptionByIdentifier" start="120" end="134" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns license exception metadata by license exception identifier.">This function adds a link to the full license exception text to the license exception metadata.
The array returned is in the form of:

 [ 0 =&gt; full name (string), 1 =&gt; link to license text (string) ]</description>
      <param type="string" variable="$identifier"/>
      <return description="string, 1: string}|null" type="object">
        <type full="Composer\Spdx\array{0:" namespace="Composer\Spdx" name="array{0:"/>
      </return>
    </docblock>
    <parameter name="identifier" byreference="false" type="{unknown}"/>
  </method>
  <method name="getIdentifierByName" start="143" end="158" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the short identifier of a license (or license exception) by full name."/>
      <param type="string" variable="$name"/>
      <return type="object">
        <type full="Composer\Spdx\string|null" namespace="Composer\Spdx" name="string|null"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="isOsiApprovedByIdentifier" start="167" end="170" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the OSI Approved status for a license by identifier."/>
      <param type="string" variable="$identifier"/>
      <return type="object">
        <type full="Composer\Spdx\bool" namespace="Composer\Spdx" name="bool"/>
      </return>
    </docblock>
    <parameter name="identifier" byreference="false" type="{unknown}"/>
  </method>
  <method name="isDeprecatedByIdentifier" start="179" end="182" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the deprecation status for a license by identifier."/>
      <param type="string" variable="$identifier"/>
      <return type="object">
        <type full="Composer\Spdx\bool" namespace="Composer\Spdx" name="bool"/>
      </return>
    </docblock>
    <parameter name="identifier" byreference="false" type="{unknown}"/>
  </method>
  <method name="validate" start="191" end="209" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="array" variable="$license" of="object">
        <type full="Composer\Spdx\string[]|stri" namespace="Composer\Spdx" name="string[]|stri"/>
      </param>
      <throws type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <return type="object">
        <type full="Composer\Spdx\bool" namespace="Composer\Spdx" name="bool"/>
      </return>
    </docblock>
    <parameter name="license" byreference="false" type="{unknown}"/>
  </method>
  <method name="getResourcesDir" start="214" end="217" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="loadLicenses" start="222" end="237" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <return type="object">
        <type full="Composer\Spdx\void" namespace="Composer\Spdx" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="loadExceptions" start="242" end="257" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <return type="object">
        <type full="Composer\Spdx\void" namespace="Composer\Spdx" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="getLicensesExpression" start="262" end="272" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="getExceptionsExpression" start="277" end="287" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="isValidLicenseString" start="296" end="356" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="string" variable="$license"/>
      <throws type="object">
        <type full="\RuntimeException" namespace="" name="RuntimeException"/>
      </throws>
      <return type="object">
        <type full="Composer\Spdx\bool" namespace="Composer\Spdx" name="bool"/>
      </return>
    </docblock>
    <parameter name="license" byreference="false" type="{unknown}"/>
  </method>
</class>
