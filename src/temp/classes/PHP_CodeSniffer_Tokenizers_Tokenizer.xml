<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PHP_CodeSniffer\Tokenizers\Tokenizer" namespace="PHP_CodeSniffer\Tokenizers" name="Tokenizer" abstract="true" final="false" start="15" end="1732">
  <file path="//var/www/html/vendor/squizlabs/php_codesniffer/src/Tokenizers" file="Tokenizer.php" realpath="/var/www/html/vendor/squizlabs/php_codesniffer/src/Tokenizers/Tokenizer.php" size="79709" time="2021-12-12T21:44:58+00:00" unixtime="1639345498" sha1="37a796b21ae25d315156ec6c2ab063d3b764e695" relative="ar/www/html/vendor/squizlabs/php_codesniffer/src/Tokenizers/Tokenizer.php"/>
  <member name="config" default="NULL" visibility="protected" static="false" line="23">
    <docblock>
      <description compact="The config data for the run."/>
      <var type="object">
        <type full="\PHP_CodeSniffer\Config" namespace="\PHP_CodeSniffer" name="Config"/>
      </var>
    </docblock>
  </member>
  <member name="eolChar" default="" type="array" visibility="protected" static="false" line="30">
    <docblock>
      <description compact="The EOL char used in the content."/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="tokens" default="" type="array" visibility="protected" static="false" line="37">
    <docblock>
      <description compact="A token-based representation of the content."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="numTokens" default="0" type="integer" visibility="protected" static="false" line="44">
    <docblock>
      <description compact="The number of tokens in the tokens array."/>
      <var type="integer"/>
    </docblock>
  </member>
  <member name="scopeOpeners" default="" type="array" visibility="public" static="false" line="51">
    <docblock>
      <description compact="A list of tokens that are allowed to open a scope."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="endScopeTokens" default="" type="array" visibility="public" static="false" line="58">
    <docblock>
      <description compact="A list of tokens that end the scope."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="knownLengths" default="" type="array" visibility="public" static="false" line="65">
    <docblock>
      <description compact="Known lengths of tokens."/>
      <var description="int&gt;" type="object">
        <type full="PHP_CodeSniffer\Tokenizers\array&lt;int" namespace="PHP_CodeSniffer\Tokenizers" name="array&lt;int"/>
      </var>
    </docblock>
  </member>
  <member name="ignoredLines" default="" type="array" visibility="public" static="false" line="72">
    <docblock>
      <description compact="A list of lines being ignored due to error suppression comments."/>
      <var type="array"/>
    </docblock>
  </member>
  <constructor name="__construct" start="85" end="105" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Initialise and run the tokenizer."/>
      <param description="The content to tokenize," type="string" variable="$content"/>
      <param description="| null $config  The config data for the run." type="object">
        <type full="\PHP_CodeSniffer\Config" namespace="\PHP_CodeSniffer" name="Config"/>
      </param>
      <param description="The EOL char used in the content." type="string" variable="$eolChar"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tokenizers\void" namespace="PHP_CodeSniffer\Tokenizers" name="void"/>
      </return>
      <throws description="If the file appears to be minified." type="object">
        <type full="\PHP_CodeSniffer\Exceptions\TokenizerException" namespace="\PHP_CodeSniffer\Exceptions" name="TokenizerException"/>
      </throws>
    </docblock>
    <parameter name="content" byreference="false" type="{unknown}"/>
    <parameter name="config" byreference="false" type="{unknown}"/>
    <parameter name="eolChar" byreference="false" type="string" default="'\n'"/>
    <inline>
      <comment value="Allow the tokenizer to do additional processing if required." line="102"/>
    </inline>
  </constructor>
  <method name="isMinifiedContent" start="116" end="129" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Checks the content to see if it looks minified."/>
      <param description="The content to tokenize." type="string" variable="$content"/>
      <param description="The EOL char used in the content." type="string" variable="$eolChar"/>
      <return type="boolean"/>
    </docblock>
    <parameter name="content" byreference="false" type="{unknown}"/>
    <parameter name="eolChar" byreference="false" type="string" default="'\n'"/>
    <inline>
      <comment value="Minified files often have a very large number of characters per line" line="118"/>
      <comment value="and cause issues when tokenizing." line="119"/>
    </inline>
  </method>
  <method name="getTokens" start="137" end="141" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the array of tokens."/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="tokenize" start="151" end="151" abstract="true" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Creates an array of tokens when given some content."/>
      <param description="The string to tokenize." type="string" variable="$string"/>
      <return type="array"/>
    </docblock>
    <parameter name="string" byreference="false" type="{unknown}"/>
  </method>
  <method name="processAdditional" start="159" end="159" abstract="true" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Performs additional processing after main tokenizing."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tokenizers\void" namespace="PHP_CodeSniffer\Tokenizers" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="createPositionMap" start="170" end="565" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Sets token position information.">Can also convert tabs into spaces. Each tab can represent between
1 and $width spaces, so this cannot be a straight string replace.</description>
      <return type="object">
        <type full="PHP_CodeSniffer\Tokenizers\void" namespace="PHP_CodeSniffer\Tokenizers" name="void"/>
      </return>
    </docblock>
    <inline>
      <comment value="end for" line="557"/>
      <comment value="If annotations are being ignored, we clear out all the ignore rules" line="559"/>
      <comment value="but leave the annotations tokenized as normal." line="560"/>
    </inline>
  </method>
  <method name="replaceTabsInToken" start="583" end="655" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Replaces tabs in original token content with spaces.">Each tab can represent between 1 and $config-&gt;tabWidth spaces,
so this cannot be a straight string replace. The original content
is placed into an orig_content index and the new token length is also
set in the length index.</description>
      <param description="The token to replace tabs inside." type="array" variable="$token"/>
      <param description="The character to use to represent the start of a tab." type="string" variable="$prefix"/>
      <param description="The character to use to represent the end of a tab." type="string" variable="$padding"/>
      <param description="The number of spaces each tab represents." type="int" variable="$tabWidth"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tokenizers\void" namespace="PHP_CodeSniffer\Tokenizers" name="void"/>
      </return>
    </docblock>
    <parameter name="token" byreference="true" type="{unknown}"/>
    <parameter name="prefix" byreference="false" type="string" default="' '"/>
    <parameter name="padding" byreference="false" type="string" default="' '"/>
    <parameter name="tabWidth" byreference="false" type="{unknown}" default="NULL"/>
    <inline>
      <comment value="end if" line="649"/>
    </inline>
  </method>
  <method name="createTokenMap" start="663" end="840" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Creates a map of brackets positions."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tokenizers\void" namespace="PHP_CodeSniffer\Tokenizers" name="void"/>
      </return>
    </docblock>
    <inline>
      <comment value="end for" line="827"/>
      <comment value="Cleanup for any openers that we didn't find closers for." line="829"/>
      <comment value="This typically means there was a syntax error breaking things." line="830"/>
    </inline>
  </method>
  <method name="createParenthesisNestingMap" start="848" end="877" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Creates a map for the parenthesis tokens that surround other tokens."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tokenizers\void" namespace="PHP_CodeSniffer\Tokenizers" name="void"/>
      </return>
    </docblock>
    <inline>
      <comment value="end for" line="875"/>
    </inline>
  </method>
  <method name="createScopeMap" start="886" end="917" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Creates a scope map of tokens that open scopes."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tokenizers\void" namespace="PHP_CodeSniffer\Tokenizers" name="void"/>
      </return>
      <see value="recurseScopeMap()"/>
    </docblock>
    <inline>
      <comment value="end for" line="911"/>
    </inline>
  </method>
  <method name="recurseScopeMap" start="931" end="1485" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Recurses though the scope openers to build a scope map."/>
      <param description="The position in the stack of the token that" type="int" variable="$stackPtr">opened the scope (eg. an IF token or FOR token).</param>
      <param description="How many scope levels down we are." type="int" variable="$depth"/>
      <param description="How many curly braces we are ignoring." type="int" variable="$ignore"/>
      <return description="The position in the stack that closed the scope." type="int"/>
      <throws description="If the nesting level gets too deep." type="object">
        <type full="\PHP_CodeSniffer\Exceptions\TokenizerException" namespace="\PHP_CodeSniffer\Exceptions" name="TokenizerException"/>
      </throws>
    </docblock>
    <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    <parameter name="depth" byreference="false" type="integer" default="1"/>
    <parameter name="ignore" byreference="true" type="integer" default="0"/>
    <inline>
      <comment value="We will need this to restore the value if we end up" line="942"/>
      <comment value="returning a token ID that causes our calling function to go back" line="943"/>
      <comment value="over already ignored braces." line="944"/>
      <comment value="If the start token for this scope opener is the same as" line="947"/>
      <comment value="the scope token, we have already found our opener." line="948"/>
      <comment value="end for" line="1481"/>
    </inline>
  </method>
  <method name="createLevelMap" start="1498" end="1729" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Constructs the level map.">The level map adds a 'level' index to each token which indicates the
depth that a token within a set of scope blocks. It also adds a
'conditions' index which is an array of the scope conditions that opened
each of the scopes - position 0 being the first scope opener.</description>
      <return type="object">
        <type full="PHP_CodeSniffer\Tokenizers\void" namespace="PHP_CodeSniffer\Tokenizers" name="void"/>
      </return>
    </docblock>
    <inline>
      <comment value="end for" line="1723"/>
    </inline>
  </method>
  <extenders>
    <extender full="PHP_CodeSniffer\Tokenizers\PHP" namespace="PHP_CodeSniffer\Tokenizers" name="PHP"/>
    <extender full="PHP_CodeSniffer\Tokenizers\JS" namespace="PHP_CodeSniffer\Tokenizers" name="JS"/>
    <extender full="PHP_CodeSniffer\Tokenizers\CSS" namespace="PHP_CodeSniffer\Tokenizers" name="CSS"/>
  </extenders>
</class>
