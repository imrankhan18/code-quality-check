<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PHP_CodeSniffer\Tests\Core\Tokenizer\NamedFunctionCallArgumentsTest" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="NamedFunctionCallArgumentsTest" abstract="false" final="false" start="15" end="882">
  <file path="//var/www/html/vendor/squizlabs/php_codesniffer/tests/Core/Tokenizer" file="NamedFunctionCallArgumentsTest.php" realpath="/var/www/html/vendor/squizlabs/php_codesniffer/tests/Core/Tokenizer/NamedFunctionCallArgumentsTest.php" size="26983" time="2021-12-12T21:44:58+00:00" unixtime="1639345498" sha1="cd610be85168f8c4d6747748b5f1fee4bc520dd6" relative="ar/www/html/vendor/squizlabs/php_codesniffer/tests/Core/Tokenizer/NamedFunctionCallArgumentsTest.php"/>
  <extends full="PHP_CodeSniffer\Tests\Core\AbstractMethodUnitTest" namespace="PHP_CodeSniffer\Tests\Core" name="AbstractMethodUnitTest"/>
  <method name="testNamedFunctionCallArguments" start="31" end="69" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify that parameter labels are tokenized as T_PARAM_NAME and that the colon after it is tokenized as a T_COLON."/>
      <param description="The comment prefacing the target token." type="string" variable="$testMarker"/>
      <param description="The token content for each parameter label to look for." type="array" variable="$parameters"/>
      <dataprovider value="dataNamedFunctionCallArguments"/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::tokenize"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
    <parameter name="testMarker" byreference="false" type="{unknown}"/>
    <parameter name="parameters" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="end foreach" line="67"/>
    </inline>
  </method>
  <method name="dataNamedFunctionCallArguments" start="79" end="258" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Data provider."/>
      <see value="testNamedFunctionCallArguments()"/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="testOtherTstringInFunctionCall" start="272" end="289" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify that other T_STRING tokens within a function call are still tokenized as T_STRING."/>
      <param description="The comment prefacing the target token." type="string" variable="$testMarker"/>
      <param description="The token content to look for." type="string" variable="$content"/>
      <dataprovider value="dataOtherTstringInFunctionCall"/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::tokenize"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
    <parameter name="testMarker" byreference="false" type="{unknown}"/>
    <parameter name="content" byreference="false" type="{unknown}"/>
  </method>
  <method name="dataOtherTstringInFunctionCall" start="299" end="320" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Data provider."/>
      <see value="testOtherTstringInFunctionCall()"/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="testMixedPositionalAndNamedArgsWithTernary" start="331" end="372" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify whether the colons are tokenized correctly when a ternary is used in a mixed positional and named arguments function call."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::tokenize"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
    <inline>
      <comment value="Get the next non-empty token." line="337"/>
      <comment value="Get the next non-empty token." line="353"/>
    </inline>
  </method>
  <method name="testNamedArgWithTernary" start="383" end="469" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify whether the colons are tokenized correctly when a ternary is used in a named arguments function call."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::tokenize"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
    <inline>
      <comment value="First argument." line="387"/>
      <comment value="Get the next non-empty token." line="393"/>
      <comment value="Get the next non-empty token." line="414"/>
      <comment value="Second argument." line="428"/>
      <comment value="Get the next non-empty token." line="434"/>
      <comment value="Get the next non-empty token." line="455"/>
    </inline>
  </method>
  <method name="testTernaryWithFunctionCallsInThenElse" start="480" end="550" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify whether the colons are tokenized correctly when named arguments function calls are used in a ternary."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::tokenize"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
    <inline>
      <comment value="Then." line="484"/>
      <comment value="Get the next non-empty token." line="490"/>
      <comment value="Get the next non-empty token." line="511"/>
      <comment value="Else." line="525"/>
      <comment value="Get the next non-empty token." line="531"/>
    </inline>
  </method>
  <method name="testTernaryWithConstantsInThenElse" start="560" end="580" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify whether the colons are tokenized correctly when constants are used in a ternary."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::tokenize"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
    <inline>
      <comment value="Get the next non-empty token." line="566"/>
    </inline>
  </method>
  <method name="testSwitchStatement" start="590" end="642" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify whether the colons are tokenized correctly in a switch statement."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::tokenize"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
    <inline>
      <comment value="Get the next non-empty token." line="596"/>
      <comment value="Get the next non-empty token." line="612"/>
      <comment value="Get the next non-empty token." line="628"/>
    </inline>
  </method>
  <method name="testParseErrorVariableLabel" start="652" end="688" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify that a variable parameter label (parse error) is still tokenized as T_VARIABLE."/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::tokenize"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
    <inline>
      <comment value="Get the next non-empty token." line="669"/>
    </inline>
  </method>
  <method name="testReservedKeywordsAsName" start="704" end="739" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify that reserved keywords used as a parameter label are tokenized as T_PARAM_NAME and that the colon after it is tokenized as a T_COLON."/>
      <param description="The comment prefacing the target token." type="string" variable="$testMarker"/>
      <param description="The token codes to look for." type="array" variable="$tokenTypes"/>
      <param description="The token content to look for." type="string" variable="$tokenContent"/>
      <dataprovider value="dataReservedKeywordsAsName"/>
      <covers value="PHP_CodeSniffer\Tokenizers\PHP::tokenize"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\Tokenizer\void" namespace="PHP_CodeSniffer\Tests\Core\Tokenizer" name="void"/>
      </return>
    </docblock>
    <parameter name="testMarker" byreference="false" type="{unknown}"/>
    <parameter name="tokenTypes" byreference="false" type="{unknown}"/>
    <parameter name="tokenContent" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Get the next non-empty token." line="720"/>
    </inline>
  </method>
  <method name="dataReservedKeywordsAsName" start="749" end="879" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Data provider."/>
      <see value="testReservedKeywordsAsName()"/>
      <return type="array"/>
    </docblock>
    <inline>
      <comment value="end foreach" line="875"/>
    </inline>
  </method>
  <parent full="PHP_CodeSniffer\Tests\Core\AbstractMethodUnitTest" namespace="PHP_CodeSniffer\Tests\Core" name="AbstractMethodUnitTest">
    <extends full="PHPUnit\Framework\TestCase" namespace="PHPUnit\Framework" name="TestCase" unresolved="true"/>
    <member name="fileExtension" default="'inc'" type="string" visibility="protected" static="true" line="28">
      <docblock>
        <description compact="The file extension of the test case file (without leading dot).">This allows child classes to overrule the default `inc` with, for instance,
`js` or `css` when applicable.</description>
        <var type="string"/>
      </docblock>
    </member>
    <member name="phpcsFile" visibility="protected" static="true" line="35">
      <docblock>
        <description compact="The \PHP_CodeSniffer\Files\File object containing the parsed contents of the test case file."/>
        <var type="object">
          <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
        </var>
      </docblock>
    </member>
    <method name="setUpBeforeClass" start="46" end="65" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Initialize &amp; tokenize \PHP_CodeSniffer\Files\File with code from the test case file.">The test case file for a unit test class has to be in the same directory
directory and use the same file name as the test class, using the .inc extension.</description>
        <return type="object">
          <type full="PHP_CodeSniffer\Tests\Core\void" namespace="PHP_CodeSniffer\Tests\Core" name="void"/>
        </return>
      </docblock>
      <inline>
        <comment value="Default to a file with the same name as the test class. Extension is property based." line="53"/>
        <comment value="Make sure the file gets parsed correctly based on the file type." line="58"/>
      </inline>
    </method>
    <method name="tearDownAfterClass" start="73" end="77" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Clean up after finished test."/>
        <return type="object">
          <type full="PHP_CodeSniffer\Tests\Core\void" namespace="PHP_CodeSniffer\Tests\Core" name="void"/>
        </return>
      </docblock>
    </method>
    <method name="getTargetToken" start="92" end="137" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the token pointer for a target token based on a specific comment found on the line before.">Note: the test delimiter comment MUST start with "/* test" to allow this function to
distinguish between comments used *in* a test and test delimiters.</description>
        <param description="The delimiter comment to look for." type="string" variable="$commentString"/>
        <param description="The type of token(s) to look for." type="object" variable="$tokenType">
          <type full="PHP_CodeSniffer\Tests\Core\int|string|array" namespace="PHP_CodeSniffer\Tests\Core" name="int|string|array"/>
        </param>
        <param description="Optional. The token content for the target token." type="string" variable="$tokenContent"/>
        <return type="int"/>
      </docblock>
      <parameter name="commentString" byreference="false" type="{unknown}"/>
      <parameter name="tokenType" byreference="false" type="{unknown}"/>
      <parameter name="tokenContent" byreference="false" type="{unknown}" default="NULL"/>
      <inline>
        <comment value="Limit the token finding to between this and the next delimiter comment." line="106"/>
      </inline>
    </method>
  </parent>
</class>
