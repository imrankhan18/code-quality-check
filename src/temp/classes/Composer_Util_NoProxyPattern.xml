<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Composer\Util\NoProxyPattern" namespace="Composer\Util" name="NoProxyPattern" abstract="false" final="false" start="21" end="453">
  <file path="//var/www/html/vendor/composer/composer/src/Composer/Util" file="NoProxyPattern.php" realpath="/var/www/html/vendor/composer/composer/src/Composer/Util/NoProxyPattern.php" size="11742" time="2022-04-13T14:43:00+00:00" unixtime="1649860980" sha1="d66b09c795ffd2d2511ad15a0b697903aad84804" relative="ar/www/html/vendor/composer/composer/src/Composer/Util/NoProxyPattern.php"/>
  <docblock>
    <description compact="Tests URLs against NO_PROXY patterns"/>
  </docblock>
  <member name="hostNames" default="" type="array" visibility="protected" static="false" line="26">
    <docblock>
      <description/>
      <var type="array" of="object">
        <type full="Composer\Util\string" namespace="Composer\Util" name="string"/>
      </var>
    </docblock>
  </member>
  <member name="rules" default="" type="array" visibility="protected" static="false" line="31">
    <docblock>
      <description/>
      <var type="array" of="object">
        <type full="Composer\Util\(null|object)" namespace="Composer\Util" name="(null|object)"/>
      </var>
    </docblock>
  </member>
  <member name="noproxy" visibility="protected" static="false" line="36">
    <docblock>
      <description/>
      <var type="object">
        <type full="Composer\Util\bool" namespace="Composer\Util" name="bool"/>
      </var>
    </docblock>
  </member>
  <constructor name="__construct" start="41" end="45" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param description="NO_PROXY pattern" type="string" variable="$pattern"/>
    </docblock>
    <parameter name="pattern" byreference="false" type="string"/>
  </constructor>
  <method name="test" start="54" end="71" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if a URL matches the NO_PROXY pattern"/>
      <param type="string" variable="$url"/>
      <return type="object">
        <type full="Composer\Util\bool" namespace="Composer\Util" name="bool"/>
      </return>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="url" byreference="false" type="string"/>
  </method>
  <method name="getUrlData" start="80" end="107" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Returns false is the url cannot be parsed, otherwise a data object"/>
      <param type="string" variable="$url"/>
      <return type="object">
        <type full="Composer\Util\bool|stdClass" namespace="Composer\Util" name="bool|stdClass"/>
      </return>
    </docblock>
    <parameter name="url" byreference="false" type="string"/>
  </method>
  <method name="match" start="118" end="147" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Returns true if the url is matched by a rule"/>
      <param type="int" variable="$index"/>
      <param type="string" variable="$hostName"/>
      <param type="object" variable="$url">
        <type full="stdClass" namespace="" name="stdClass"/>
      </param>
      <return type="object">
        <type full="Composer\Util\bool" namespace="Composer\Util" name="bool"/>
      </return>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="index" byreference="false" type="int"/>
    <parameter name="hostName" byreference="false" type="string"/>
    <parameter name="url" byreference="false" type="object">
      <type full="stdClass" namespace="" name="stdClass"/>
    </parameter>
  </method>
  <method name="matchRange" start="157" end="179" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Returns true if the target ip is in the network range"/>
      <param type="object" variable="$network">
        <type full="stdClass" namespace="" name="stdClass"/>
      </param>
      <param type="object" variable="$target">
        <type full="stdClass" namespace="" name="stdClass"/>
      </param>
      <return type="object">
        <type full="Composer\Util\bool" namespace="Composer\Util" name="bool"/>
      </return>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="network" byreference="false" type="object">
      <type full="stdClass" namespace="" name="stdClass"/>
    </parameter>
    <parameter name="target" byreference="false" type="object">
      <type full="stdClass" namespace="" name="stdClass"/>
    </parameter>
  </method>
  <method name="getRule" start="189" end="205" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Finds or creates rule data for a hostname"/>
      <param type="int" variable="$index"/>
      <param type="string" variable="$hostName"/>
      <return description="Null if the hostname is invalid" type="object">
        <type full="Composer\Util\null|stdClass" namespace="Composer\Util" name="null|stdClass"/>
      </return>
    </docblock>
    <return type="object" nullable="true">
      <type full="stdClass" namespace="" name="stdClass"/>
    </return>
    <parameter name="index" byreference="false" type="int"/>
    <parameter name="hostName" byreference="false" type="string"/>
  </method>
  <method name="ipCheckData" start="216" end="253" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Creates an object containing IP data if the host is an IP address"/>
      <param type="string" variable="$host"/>
      <param description="Set by method if IP address found" type="object" variable="$ipdata">
        <type full="Composer\Util\null|stdClass" namespace="Composer\Util" name="null|stdClass"/>
      </param>
      <param description="Whether a CIDR prefix-length is expected" type="object" variable="$allowPrefix">
        <type full="Composer\Util\bool" namespace="Composer\Util" name="bool"/>
      </param>
      <return description="False if the host contains invalid data" type="object">
        <type full="Composer\Util\bool" namespace="Composer\Util" name="bool"/>
      </return>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="host" byreference="false" type="string"/>
    <parameter name="ipdata" byreference="true" nullable="true" type="object">
      <type full="stdClass" namespace="" name="stdClass"/>
    </parameter>
    <parameter name="allowPrefix" byreference="false" type="boolean" default="false"/>
    <inline>
      <comment value="Check for a CIDR prefix-length" line="223"/>
      <comment value="See if this is an ip address" line="234"/>
    </inline>
  </method>
  <method name="ipGetAddr" start="265" end="272" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Returns an array of the IP in_addr and its byte size">IPv4 addresses are always mapped to IPv6, which simplifies handling
and comparison.</description>
      <param type="string" variable="$host"/>
      <return description="in_addr, size" type="array" of="object">
        <type full="Composer\Util\mixed" namespace="Composer\Util" name="mixed"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
    <parameter name="host" byreference="false" type="string"/>
  </method>
  <method name="ipGetMask" start="282" end="297" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Returns the binary network mask mapped to IPv6"/>
      <param description="CIDR prefix-length" type="int" variable="$prefix"/>
      <param description="Byte size of in_addr" type="int" variable="$size"/>
      <return type="string"/>
    </docblock>
    <return type="string" nullable="false"/>
    <parameter name="prefix" byreference="false" type="int"/>
    <parameter name="size" byreference="false" type="int"/>
  </method>
  <method name="ipGetNetwork" start="308" end="328" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Calculates and returns the network and mask"/>
      <param description="IP in_addr" type="string" variable="$rangeIp"/>
      <param description="Byte size of in_addr" type="int" variable="$size"/>
      <param description="CIDR prefix-length" type="int" variable="$prefix"/>
      <return description="network in_addr, binary mask" type="array" of="object">
        <type full="Composer\Util\string" namespace="Composer\Util" name="string"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
    <parameter name="rangeIp" byreference="false" type="string"/>
    <parameter name="size" byreference="false" type="int"/>
    <parameter name="prefix" byreference="false" type="int"/>
    <inline>
      <comment value="Get the network from the address and mask" line="312"/>
    </inline>
  </method>
  <method name="ipMapTo6" start="338" end="346" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Maps an IPv4 address to IPv6"/>
      <param description="in_addr" type="string" variable="$binary"/>
      <param description="Byte size of in_addr" type="int" variable="$size"/>
      <return description="Mapped or existing in_addr" type="string"/>
    </docblock>
    <return type="string" nullable="false"/>
    <parameter name="binary" byreference="false" type="string"/>
    <parameter name="size" byreference="false" type="int"/>
  </method>
  <method name="makeData" start="357" end="365" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Creates a rule data object"/>
      <param type="string" variable="$host"/>
      <param type="int" variable="$port"/>
      <param type="object" variable="$ipdata">
        <type full="Composer\Util\null|stdClass" namespace="Composer\Util" name="null|stdClass"/>
      </param>
      <return type="object">
        <type full="stdClass" namespace="" name="stdClass"/>
      </return>
    </docblock>
    <return type="object" nullable="false">
      <type full="stdClass" namespace="" name="stdClass"/>
    </return>
    <parameter name="host" byreference="false" type="string"/>
    <parameter name="port" byreference="false" type="int"/>
    <parameter name="ipdata" byreference="false" nullable="true" type="object">
      <type full="stdClass" namespace="" name="stdClass"/>
    </parameter>
  </method>
  <method name="makeIpData" start="376" end="383" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Creates an ip data object"/>
      <param description="in_addr" type="string" variable="$ip"/>
      <param description="Byte size of in_addr" type="int" variable="$size"/>
      <param description="Network mask" type="object" variable="$netmask">
        <type full="Composer\Util\null|string" namespace="Composer\Util" name="null|string"/>
      </param>
      <return type="object">
        <type full="stdClass" namespace="" name="stdClass"/>
      </return>
    </docblock>
    <return type="object" nullable="false">
      <type full="stdClass" namespace="" name="stdClass"/>
    </return>
    <parameter name="ip" byreference="false" type="string"/>
    <parameter name="size" byreference="false" type="int"/>
    <parameter name="netmask" byreference="false" nullable="true" type="string"/>
  </method>
  <method name="splitHostPort" start="392" end="431" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Splits the hostname into host and port components"/>
      <param type="string" variable="$hostName"/>
      <return description="host, port, if there was error" type="array" of="object">
        <type full="Composer\Util\mixed" namespace="Composer\Util" name="mixed"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
    <parameter name="hostName" byreference="false" type="string"/>
    <inline>
      <comment value="host, port, err" line="394"/>
      <comment value="Check for square-bracket notation" line="399"/>
    </inline>
  </method>
  <method name="validateInt" start="442" end="452" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Wrapper around filter_var FILTER_VALIDATE_INT"/>
      <param type="string" variable="$int"/>
      <param type="int" variable="$min"/>
      <param type="int" variable="$max"/>
      <return type="object">
        <type full="Composer\Util\bool" namespace="Composer\Util" name="bool"/>
      </return>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="int" byreference="false" type="string"/>
    <parameter name="min" byreference="false" type="int"/>
    <parameter name="max" byreference="false" type="int"/>
  </method>
</class>
