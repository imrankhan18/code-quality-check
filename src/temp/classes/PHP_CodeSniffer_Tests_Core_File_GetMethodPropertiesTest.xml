<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PHP_CodeSniffer\Tests\Core\File\GetMethodPropertiesTest" namespace="PHP_CodeSniffer\Tests\Core\File" name="GetMethodPropertiesTest" abstract="false" final="false" start="14" end="749">
  <file path="//var/www/html/vendor/squizlabs/php_codesniffer/tests/Core/File" file="GetMethodPropertiesTest.php" realpath="/var/www/html/vendor/squizlabs/php_codesniffer/tests/Core/File/GetMethodPropertiesTest.php" size="22260" time="2021-12-12T21:44:58+00:00" unixtime="1639345498" sha1="90e8fdc9ae901e20367e5c2e83d47f83d3028fa6" relative="ar/www/html/vendor/squizlabs/php_codesniffer/tests/Core/File/GetMethodPropertiesTest.php"/>
  <extends full="PHP_CodeSniffer\Tests\Core\AbstractMethodUnitTest" namespace="PHP_CodeSniffer\Tests\Core" name="AbstractMethodUnitTest"/>
  <method name="testBasicFunction" start="23" end="38" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test a basic function."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testReturnFunction" start="46" end="61" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test a function with a return type."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testNestedClosure" start="69" end="84" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test a closure used as a function argument."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testBasicMethod" start="92" end="107" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test a basic method."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPrivateStaticMethod" start="115" end="130" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test a private static method."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testFinalMethod" start="138" end="153" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test a basic final method."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testProtectedReturnMethod" start="161" end="176" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test a protected method with a return type."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPublicReturnMethod" start="184" end="199" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test a public method with a return type."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testNullableReturnMethod" start="207" end="222" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test a public method with a nullable return type."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testMessyNullableReturnMethod" start="230" end="245" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test a public method with a nullable return type."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testReturnNamespace" start="253" end="268" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test a method with a namespaced return type."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testReturnMultilineNamespace" start="276" end="291" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test a method with a messy namespaces return type."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testAbstractMethod" start="299" end="314" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test a basic abstract method."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testAbstractReturnMethod" start="322" end="337" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test an abstract method with a return type."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testInterfaceMethod" start="345" end="360" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test a basic interface method."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testArrowFunction" start="368" end="383" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test a static arrow function."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testReturnTypeStatic" start="391" end="406" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test a function with return type &quot;static&quot;."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8MixedTypeHint" start="414" end="429" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test a function with return type &quot;mixed&quot;."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8MixedTypeHintNullable" start="437" end="452" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test a function with return type &quot;mixed&quot; and nullability."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testNamespaceOperatorTypeHint" start="460" end="475" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test a function with return type using the namespace operator."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8UnionTypesSimple" start="483" end="498" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 union type declaration."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8UnionTypesTwoClasses" start="506" end="521" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 union type declaration with two classes."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8UnionTypesAllBaseTypes" start="529" end="544" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 union type declaration with all base types."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8UnionTypesAllPseudoTypes" start="552" end="567" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 union type declaration with all pseudo types."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8UnionTypesNullable" start="575" end="590" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 union type declaration with (illegal) nullability."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8PseudoTypeNull" start="598" end="613" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 type declaration with (illegal) single type null."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8PseudoTypeFalse" start="621" end="636" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 type declaration with (illegal) single type false."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8PseudoTypeFalseAndBool" start="644" end="659" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 type declaration with (illegal) type false combined with type bool."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8ObjectAndClass" start="667" end="682" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 type declaration with (illegal) type object combined with a class name."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8PseudoTypeIterableAndArray" start="690" end="705" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 type declaration with (illegal) type iterable combined with array/Traversable."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="testPHP8DuplicateTypeInUnionWhitespaceAndComment" start="713" end="728" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Verify recognition of PHP8 type declaration with (illegal) duplicate types."/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="getMethodPropertiesTestHelper" start="739" end="746" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Test helper."/>
      <param description="The comment which preceeds the test." type="string" variable="$commentString"/>
      <param description="The expected function output." type="array" variable="$expected"/>
      <return type="object">
        <type full="PHP_CodeSniffer\Tests\Core\File\void" namespace="PHP_CodeSniffer\Tests\Core\File" name="void"/>
      </return>
    </docblock>
    <parameter name="commentString" byreference="false" type="{unknown}"/>
    <parameter name="expected" byreference="false" type="{unknown}"/>
  </method>
  <parent full="PHP_CodeSniffer\Tests\Core\AbstractMethodUnitTest" namespace="PHP_CodeSniffer\Tests\Core" name="AbstractMethodUnitTest">
    <extends full="PHPUnit\Framework\TestCase" namespace="PHPUnit\Framework" name="TestCase" unresolved="true"/>
    <member name="fileExtension" default="'inc'" type="string" visibility="protected" static="true" line="28">
      <docblock>
        <description compact="The file extension of the test case file (without leading dot).">This allows child classes to overrule the default `inc` with, for instance,
`js` or `css` when applicable.</description>
        <var type="string"/>
      </docblock>
    </member>
    <member name="phpcsFile" visibility="protected" static="true" line="35">
      <docblock>
        <description compact="The \PHP_CodeSniffer\Files\File object containing the parsed contents of the test case file."/>
        <var type="object">
          <type full="\PHP_CodeSniffer\Files\File" namespace="\PHP_CodeSniffer\Files" name="File"/>
        </var>
      </docblock>
    </member>
    <method name="setUpBeforeClass" start="46" end="65" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Initialize &amp; tokenize \PHP_CodeSniffer\Files\File with code from the test case file.">The test case file for a unit test class has to be in the same directory
directory and use the same file name as the test class, using the .inc extension.</description>
        <return type="object">
          <type full="PHP_CodeSniffer\Tests\Core\void" namespace="PHP_CodeSniffer\Tests\Core" name="void"/>
        </return>
      </docblock>
      <inline>
        <comment value="Default to a file with the same name as the test class. Extension is property based." line="53"/>
        <comment value="Make sure the file gets parsed correctly based on the file type." line="58"/>
      </inline>
    </method>
    <method name="tearDownAfterClass" start="73" end="77" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Clean up after finished test."/>
        <return type="object">
          <type full="PHP_CodeSniffer\Tests\Core\void" namespace="PHP_CodeSniffer\Tests\Core" name="void"/>
        </return>
      </docblock>
    </method>
    <method name="getTargetToken" start="92" end="137" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the token pointer for a target token based on a specific comment found on the line before.">Note: the test delimiter comment MUST start with "/* test" to allow this function to
distinguish between comments used *in* a test and test delimiters.</description>
        <param description="The delimiter comment to look for." type="string" variable="$commentString"/>
        <param description="The type of token(s) to look for." type="object" variable="$tokenType">
          <type full="PHP_CodeSniffer\Tests\Core\int|string|array" namespace="PHP_CodeSniffer\Tests\Core" name="int|string|array"/>
        </param>
        <param description="Optional. The token content for the target token." type="string" variable="$tokenContent"/>
        <return type="int"/>
      </docblock>
      <parameter name="commentString" byreference="false" type="{unknown}"/>
      <parameter name="tokenType" byreference="false" type="{unknown}"/>
      <parameter name="tokenContent" byreference="false" type="{unknown}" default="NULL"/>
      <inline>
        <comment value="Limit the token finding to between this and the next delimiter comment." line="106"/>
      </inline>
    </method>
  </parent>
</class>
