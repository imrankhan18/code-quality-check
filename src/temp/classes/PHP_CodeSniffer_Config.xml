<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PHP_CodeSniffer\Config" namespace="PHP_CodeSniffer" name="Config" abstract="false" final="false" start="75" end="1704">
  <file path="//var/www/html/vendor/squizlabs/php_codesniffer/src" file="Config.php" realpath="/var/www/html/vendor/squizlabs/php_codesniffer/src/Config.php" size="66077" time="2021-12-12T21:44:58+00:00" unixtime="1639345498" sha1="72bb2bc47e4c5ad2b335b057ad84d302b7647603" relative="ar/www/html/vendor/squizlabs/php_codesniffer/src/Config.php"/>
  <docblock>
    <description compact="Stores the configuration used to run PHPCS and PHPCBF."/>
    <property value="string[] $files           The files and directories to check."/>
    <property value="string[] $standards       The standards being used for checking."/>
    <property value="int      $verbosity       How verbose the output should be. 0: no unnecessary output 1: basic output for files being checked 2: ruleset and file parsing output 3: sniff execution output"/>
    <property value="bool     $interactive     Enable interactive checking mode."/>
    <property value="bool     $parallel        Check files in parallel."/>
    <property value="bool     $cache           Enable the use of the file cache."/>
    <property value="bool     $cacheFile       A file where the cache data should be written"/>
    <property value="bool     $colors          Display colours in output."/>
    <property value="bool     $explain         Explain the coding standards."/>
    <property value="bool     $local           Process local files in directories only (no recursion)."/>
    <property value="bool     $showSources     Show sniff source codes in report output."/>
    <property value="bool     $showProgress    Show basic progress information while running."/>
    <property value="bool     $quiet           Quiet mode; disables progress and verbose output."/>
    <property value="bool     $annotations     Process phpcs: annotations."/>
    <property value="int      $tabWidth        How many spaces each tab is worth."/>
    <property value="string   $encoding        The encoding of the files being checked."/>
    <property value="string[] $sniffs          The sniffs that should be used for checking. If empty, all sniffs in the supplied standards will be used."/>
    <property value="string[] $exclude         The sniffs that should be excluded from checking. If empty, all sniffs in the supplied standards will be used."/>
    <property value="string[] $ignored         Regular expressions used to ignore files and folders during checking."/>
    <property value="string   $reportFile      A file where the report output should be written."/>
    <property value="string   $generator       The documentation generator to use."/>
    <property value="string   $filter          The filter to use for the run."/>
    <property value="string[] $bootstrap       One of more files to include before the run begins."/>
    <property value="int      $reportWidth     The maximum number of columns that reports should use for output. Set to &quot;auto&quot; for have this value changed to the width of the terminal."/>
    <property value="int      $errorSeverity   The minimum severity an error must have to be displayed."/>
    <property value="int      $warningSeverity The minimum severity a warning must have to be displayed."/>
    <property value="bool     $recordErrors    Record the content of error messages as well as error counts."/>
    <property value="string   $suffix          A suffix to add to fixed files."/>
    <property value="string   $basepath        A file system location to strip from the paths of files shown in reports."/>
    <property value="bool     $stdin           Read content from STDIN instead of supplied files."/>
    <property value="string   $stdinContent    Content passed directly to PHPCS on STDIN."/>
    <property value="string   $stdinPath       The path to use for content passed on STDIN."/>
    <property value="array&lt;string, string&gt;      $extensions File extensions that should be checked, and what tokenizer to use. E.g., array('inc' =&gt; 'PHP');"/>
    <property value="array&lt;string, string|null&gt; $reports    The reports to use for printing output after the run. The format of the array is: array( 'reportName1' =&gt; 'outputFile', 'reportName2' =&gt; null, ); If the array value is NULL, the report will be written to the screen."/>
    <property value="string[] $unknown Any arguments gathered on the command line that are unknown to us. E.g., using `phpcs -c` will give array('c');"/>
  </docblock>
  <constant type="string" name="VERSION" value="'3.6.2'">
    <docblock>
      <description compact="The current version."/>
      <var type="string"/>
    </docblock>
  </constant>
  <constant type="string" name="STABILITY" value="'stable'">
    <docblock>
      <description compact="Package stability; either stable, beta or alpha."/>
      <var type="string"/>
    </docblock>
  </constant>
  <member name="settings" default="" type="array" visibility="private" static="false" line="104">
    <docblock>
      <description compact="An array of settings that PHPCS and PHPCBF accept.">This array is not meant to be accessed directly. Instead, use the settings
as if they are class member vars so the __get() and __set() magic methods
can be used to validate the values. For example, to set the verbosity level to
level 2, use $this-&gt;verbosity = 2; instead of accessing this property directly.

Each of these settings is described in the class comment property list.</description>
      <var description="mixed&gt;" type="object">
        <type full="PHP_CodeSniffer\array&lt;string" namespace="PHP_CodeSniffer" name="array&lt;string"/>
      </var>
    </docblock>
  </member>
  <member name="dieOnUnknownArg" visibility="public" static="false" line="151">
    <docblock>
      <description compact="Whether or not to kill the process when an unknown command line arg is found.">If FALSE, arguments that are not command line options or file/directory paths
will be ignored and execution will continue. These values will be stored in
$this-&gt;unknown.</description>
      <var type="boolean"/>
    </docblock>
  </member>
  <member name="cliArgs" default="" type="array" visibility="private" static="false" line="158">
    <docblock>
      <description compact="The current command line arguments we are processing."/>
      <var type="array" of="object">
        <type full="PHP_CodeSniffer\string" namespace="PHP_CodeSniffer" name="string"/>
      </var>
    </docblock>
  </member>
  <member name="overriddenDefaults" default="" type="array" visibility="private" static="true" line="165">
    <docblock>
      <description compact="Command line values that the user has supplied directly."/>
      <var description="TRUE&gt;" type="object">
        <type full="PHP_CodeSniffer\array&lt;string" namespace="PHP_CodeSniffer" name="array&lt;string"/>
      </var>
    </docblock>
  </member>
  <member name="configData" default="NULL" visibility="private" static="true" line="172">
    <docblock>
      <description compact="Config file data that has been loaded for the run."/>
      <var description="string&gt;" type="object">
        <type full="PHP_CodeSniffer\array&lt;string" namespace="PHP_CodeSniffer" name="array&lt;string"/>
      </var>
    </docblock>
  </member>
  <member name="configDataFile" default="NULL" visibility="private" static="true" line="179">
    <docblock>
      <description compact="The full path to the config data file that has been loaded."/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="executablePaths" default="" type="array" visibility="private" static="true" line="186">
    <docblock>
      <description compact="Automatically discovered executable utility paths."/>
      <var description="string&gt;" type="object">
        <type full="PHP_CodeSniffer\array&lt;string" namespace="PHP_CodeSniffer" name="array&lt;string"/>
      </var>
    </docblock>
  </member>
  <method name="__get" start="197" end="205" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the value of an inaccessible property."/>
      <param description="The name of the property." type="string" variable="$name"/>
      <return type="mixed"/>
      <throws description="If the setting name is invalid." type="object">
        <type full="\PHP_CodeSniffer\Exceptions\RuntimeException" namespace="\PHP_CodeSniffer\Exceptions" name="RuntimeException"/>
      </throws>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="__set" start="217" end="260" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the value of an inaccessible property."/>
      <param description="The name of the property." type="string" variable="$name"/>
      <param description="The value of the property." type="mixed" variable="$value"/>
      <return type="object">
        <type full="PHP_CodeSniffer\void" namespace="PHP_CodeSniffer" name="void"/>
      </return>
      <throws description="If the setting name is invalid." type="object">
        <type full="\PHP_CodeSniffer\Exceptions\RuntimeException" namespace="\PHP_CodeSniffer\Exceptions" name="RuntimeException"/>
      </throws>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="end switch" line="256"/>
    </inline>
  </method>
  <method name="__isset" start="270" end="274" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check if the value of an inaccessible property is set."/>
      <param description="The name of the property." type="string" variable="$name"/>
      <return type="object">
        <type full="PHP_CodeSniffer\bool" namespace="PHP_CodeSniffer" name="bool"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="__unset" start="284" end="288" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Unset the value of an inaccessible property."/>
      <param description="The name of the property." type="string" variable="$name"/>
      <return type="object">
        <type full="PHP_CodeSniffer\void" namespace="PHP_CodeSniffer" name="void"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="getSettings" start="296" end="300" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the array of all config settings."/>
      <return description="mixed&gt;" type="object">
        <type full="PHP_CodeSniffer\array&lt;string" namespace="PHP_CodeSniffer" name="array&lt;string"/>
      </return>
    </docblock>
  </method>
  <method name="setSettings" start="310" end="314" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the array of all config settings."/>
      <param description="mixed&gt; $settings The array of config settings." type="object">
        <type full="PHP_CodeSniffer\array&lt;string" namespace="PHP_CodeSniffer" name="array&lt;string"/>
      </param>
      <return type="object">
        <type full="PHP_CodeSniffer\void" namespace="PHP_CodeSniffer" name="void"/>
      </return>
    </docblock>
    <parameter name="settings" byreference="false" type="{unknown}"/>
  </method>
  <constructor name="__construct" start="326" end="406" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Creates a Config object and populates it with command line values."/>
      <param description="An array of values gathered from CLI args." type="array" variable="$cliArgs"/>
      <param description="Whether or not to kill the process when an" type="object" variable="$dieOnUnknownArg">unknown command line arg is found.<type full="PHP_CodeSniffer\bool" namespace="PHP_CodeSniffer" name="bool"/></param>
      <return type="object">
        <type full="PHP_CodeSniffer\void" namespace="PHP_CodeSniffer" name="void"/>
      </return>
    </docblock>
    <parameter name="cliArgs" byreference="false" type="array" default=""/>
    <parameter name="dieOnUnknownArg" byreference="false" type="boolean" default="true"/>
    <inline>
      <comment value="end if" line="368"/>
      <comment value="Check for content on STDIN." line="378"/>
      <comment value="end if" line="402"/>
    </inline>
  </constructor>
  <method name="setCommandLineValues" start="416" end="457" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the command line values."/>
      <param description="An array of command line arguments to set." type="array" variable="$args"/>
      <return type="object">
        <type full="PHP_CodeSniffer\void" namespace="PHP_CodeSniffer" name="void"/>
      </return>
    </docblock>
    <parameter name="args" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="end for" line="455"/>
    </inline>
  </method>
  <method name="restoreDefaults" start="465" end="584" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Restore default values for all possible command line arguments."/>
      <return type="object">
        <type full="PHP_CodeSniffer\void" namespace="PHP_CodeSniffer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="processShortArgument" start="596" end="689" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Processes a short (-e) command line argument."/>
      <param description="The command line argument." type="string" variable="$arg"/>
      <param description="The position of the argument on the command line." type="int" variable="$pos"/>
      <return type="object">
        <type full="PHP_CodeSniffer\void" namespace="PHP_CodeSniffer" name="void"/>
      </return>
      <throws type="object">
        <type full="\PHP_CodeSniffer\Exceptions\DeepExitException" namespace="\PHP_CodeSniffer\Exceptions" name="DeepExitException"/>
      </throws>
    </docblock>
    <parameter name="arg" byreference="false" type="{unknown}"/>
    <parameter name="pos" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="end switch" line="687"/>
    </inline>
  </method>
  <method name="processLongArgument" start="701" end="1225" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Processes a long (--example) command line argument."/>
      <param description="The command line argument." type="string" variable="$arg"/>
      <param description="The position of the argument on the command line." type="int" variable="$pos"/>
      <return type="object">
        <type full="PHP_CodeSniffer\void" namespace="PHP_CodeSniffer" name="void"/>
      </return>
      <throws type="object">
        <type full="\PHP_CodeSniffer\Exceptions\DeepExitException" namespace="\PHP_CodeSniffer\Exceptions" name="DeepExitException"/>
      </throws>
    </docblock>
    <parameter name="arg" byreference="false" type="{unknown}"/>
    <parameter name="pos" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="end switch" line="1223"/>
    </inline>
  </method>
  <method name="processUnknownArgument" start="1239" end="1254" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Processes an unknown command line argument.">Assumes all unknown arguments are files and folders to check.</description>
      <param description="The command line argument." type="string" variable="$arg"/>
      <param description="The position of the argument on the command line." type="int" variable="$pos"/>
      <return type="object">
        <type full="PHP_CodeSniffer\void" namespace="PHP_CodeSniffer" name="void"/>
      </return>
      <throws type="object">
        <type full="\PHP_CodeSniffer\Exceptions\DeepExitException" namespace="\PHP_CodeSniffer\Exceptions" name="DeepExitException"/>
      </throws>
    </docblock>
    <parameter name="arg" byreference="false" type="{unknown}"/>
    <parameter name="pos" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="We don't know about any additional switches; just files." line="1241"/>
    </inline>
  </method>
  <method name="processFilePath" start="1265" end="1290" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Processes a file path and add it to the file list."/>
      <param description="The path to the file to add." type="string" variable="$path"/>
      <return type="object">
        <type full="PHP_CodeSniffer\void" namespace="PHP_CodeSniffer" name="void"/>
      </return>
      <throws type="object">
        <type full="\PHP_CodeSniffer\Exceptions\DeepExitException" namespace="\PHP_CodeSniffer\Exceptions" name="DeepExitException"/>
      </throws>
    </docblock>
    <parameter name="path" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="If we are processing STDIN, don't record any files to check." line="1267"/>
    </inline>
  </method>
  <method name="printUsage" start="1298" end="1310" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Prints out the usage information for this script."/>
      <return type="object">
        <type full="PHP_CodeSniffer\void" namespace="PHP_CodeSniffer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="printShortUsage" start="1321" end="1337" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Prints out the short usage information for this script."/>
      <param description="If TRUE, the usage string is returned" type="object" variable="$return">instead of output to screen.<type full="PHP_CodeSniffer\bool" namespace="PHP_CodeSniffer" name="bool"/></param>
      <return type="object">
        <type full="PHP_CodeSniffer\string|void" namespace="PHP_CodeSniffer" name="string|void"/>
      </return>
    </docblock>
    <parameter name="return" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="printPHPCSUsage" start="1345" end="1413" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Prints out the usage information for PHPCS."/>
      <return type="object">
        <type full="PHP_CodeSniffer\void" namespace="PHP_CodeSniffer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="printPHPCBFUsage" start="1421" end="1467" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Prints out the usage information for PHPCBF."/>
      <return type="object">
        <type full="PHP_CodeSniffer\void" namespace="PHP_CodeSniffer" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="getConfigData" start="1479" end="1493" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get a single config value."/>
      <param description="The name of the config value." type="string" variable="$key"/>
      <return type="object">
        <type full="PHP_CodeSniffer\string|null" namespace="PHP_CodeSniffer" name="string|null"/>
      </return>
      <see value="setConfigData()"/>
      <see value="getAllConfigData()"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="getExecutablePath" start="1504" end="1534" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get the path to an executable utility."/>
      <param description="The name of the executable utility." type="string" variable="$name"/>
      <return type="object">
        <type full="PHP_CodeSniffer\string|null" namespace="PHP_CodeSniffer" name="string|null"/>
      </return>
      <see value="getConfigData()"/>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="setConfigData" start="1552" end="1623" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Set a single config value."/>
      <param description="The name of the config value." type="string" variable="$key"/>
      <param description="The value to set. If null, the config" type="object" variable="$value">entry is deleted, reverting it to the
                          default value.<type full="PHP_CodeSniffer\string|null" namespace="PHP_CodeSniffer" name="string|null"/></param>
      <param description="Set this config data temporarily for this" type="boolean" variable="$temp">script run. This will not write the config
                          data to the config file.</param>
      <return type="object">
        <type full="PHP_CodeSniffer\bool" namespace="PHP_CodeSniffer" name="bool"/>
      </return>
      <see value="getConfigData()"/>
      <throws description="If the config file can not be written." type="object">
        <type full="\PHP_CodeSniffer\Exceptions\DeepExitException" namespace="\PHP_CodeSniffer\Exceptions" name="DeepExitException"/>
      </throws>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="temp" byreference="false" type="boolean" default="false"/>
    <inline>
      <comment value="end if" line="1585"/>
      <comment value="If the installed paths are being set, make sure all known" line="1612"/>
      <comment value="standards paths are added to the autoloader." line="1613"/>
    </inline>
  </method>
  <method name="getAllConfigData" start="1633" end="1670" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get all config data."/>
      <return description="string&gt;" type="object">
        <type full="PHP_CodeSniffer\array&lt;string" namespace="PHP_CodeSniffer" name="array&lt;string"/>
      </return>
      <see value="getConfigData()"/>
      <throws description="If the config file could not be read." type="object">
        <type full="\PHP_CodeSniffer\Exceptions\DeepExitException" namespace="\PHP_CodeSniffer\Exceptions" name="DeepExitException"/>
      </throws>
    </docblock>
  </method>
  <method name="printConfigData" start="1680" end="1701" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Prints out the gathered config data."/>
      <param description="The config data to print." type="array" variable="$data"/>
      <return type="object">
        <type full="PHP_CodeSniffer\void" namespace="PHP_CodeSniffer" name="void"/>
      </return>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
  </method>
</class>
