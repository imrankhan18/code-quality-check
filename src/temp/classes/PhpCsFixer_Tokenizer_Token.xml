<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PhpCsFixer\Tokenizer\Token" namespace="PhpCsFixer\Tokenizer" name="Token" abstract="false" final="true" start="23" end="503">
  <file path="//var/www/html/vendor/friendsofphp/php-cs-fixer/src/Tokenizer" file="Token.php" realpath="/var/www/html/vendor/friendsofphp/php-cs-fixer/src/Tokenizer/Token.php" size="15240" time="2022-03-18T17:20:59+00:00" unixtime="1647624059" sha1="2d661bd63a4304c9d4f58ed7962309051e1c0518" relative="ar/www/html/vendor/friendsofphp/php-cs-fixer/src/Tokenizer/Token.php"/>
  <docblock>
    <description compact="Representation of single token.">As a token prototype you should understand a single element generated by token_get_all.</description>
    <author value="Dariusz RumiÅ„ski &lt;dariusz.ruminski@gmail.com&gt;"/>
  </docblock>
  <member name="content" visibility="private" static="false" line="30">
    <docblock>
      <description compact="Content of token prototype."/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="id" visibility="private" static="false" line="37">
    <docblock>
      <description compact="ID of token prototype, if available."/>
      <var type="object">
        <type full="PhpCsFixer\Tokenizer\null|int" namespace="PhpCsFixer\Tokenizer" name="null|int"/>
      </var>
    </docblock>
  </member>
  <member name="isArray" visibility="private" static="false" line="42">
    <docblock>
      <description compact="If token prototype is an array."/>
    </docblock>
  </member>
  <member name="changed" default="false" type="boolean" visibility="private" static="false" line="47">
    <docblock>
      <description compact="Flag is token was changed."/>
    </docblock>
  </member>
  <constructor name="__construct" start="52" end="82" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param description="token prototype" type="object" variable="$token">
        <type full="PhpCsFixer\Tokenizer\array|string" namespace="PhpCsFixer\Tokenizer" name="array|string"/>
      </param>
    </docblock>
    <parameter name="token" byreference="false" type="{unknown}"/>
  </constructor>
  <method name="getCastTokenKinds" start="87" end="92" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <return type="array" of="object">
        <type full="PhpCsFixer\Tokenizer\int" namespace="PhpCsFixer\Tokenizer" name="int"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
  </method>
  <method name="getClassyTokenKinds" start="99" end="112" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get classy tokens kinds: T_CLASS, T_INTERFACE and T_TRAIT."/>
      <return type="array" of="object">
        <type full="PhpCsFixer\Tokenizer\int" namespace="PhpCsFixer\Tokenizer" name="int"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
  </method>
  <method name="getObjectOperatorKinds" start="119" end="131" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get object operator tokens kinds: T_OBJECT_OPERATOR and (if available) T_NULLSAFE_OBJECT_OPERATOR."/>
      <return type="array" of="object">
        <type full="PhpCsFixer\Tokenizer\int" namespace="PhpCsFixer\Tokenizer" name="int"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
  </method>
  <method name="equals" start="141" end="194" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check if token is equals to given one.">If tokens are arrays, then only keys defined in parameter token are checked.</description>
      <param description="token or it's prototype" type="object" variable="$other">
        <type full="PhpCsFixer\Tokenizer\array|string|Token" namespace="PhpCsFixer\Tokenizer" name="array|string|Token"/>
      </param>
      <param description="perform a case sensitive comparison" type="object" variable="$caseSensitive">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </param>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="other" byreference="false" type="{unknown}"/>
    <parameter name="caseSensitive" byreference="false" type="boolean" default="true"/>
    <inline>
      <comment value="detect unknown keys" line="190"/>
    </inline>
  </method>
  <method name="equalsAny" start="202" end="211" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check if token is equals to one of given."/>
      <param description="array of tokens or token prototypes" type="array" variable="$others"/>
      <param description="perform a case sensitive comparison" type="object" variable="$caseSensitive">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </param>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="others" byreference="false" type="array"/>
    <parameter name="caseSensitive" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="isKeyCaseSensitive" start="221" end="228" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="A helper method used to find out whether a certain input token has to be case-sensitively matched."/>
      <param description="bool&gt;|bool $caseSensitive global case sensitiveness or an array of booleans, whose keys should match" type="object">the ones used in $others. If any is missing, the default case-sensitive
                                            comparison is used<type full="PhpCsFixer\Tokenizer\array&lt;int" namespace="PhpCsFixer\Tokenizer" name="array&lt;int"/></param>
      <param description="the key of the token that has to be looked up" type="int" variable="$key"/>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="caseSensitive" byreference="false" type="{unknown}"/>
    <parameter name="key" byreference="false" type="int"/>
  </method>
  <method name="getPrototype" start="233" end="243" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return description="token prototype" type="object">
        <type full="PhpCsFixer\Tokenizer\array|string" namespace="PhpCsFixer\Tokenizer" name="array|string"/>
      </return>
    </docblock>
  </method>
  <method name="getContent" start="250" end="253" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get token's content.">It shall be used only for getting the content of token, not for checking it against excepted value.</description>
    </docblock>
    <return type="string" nullable="false"/>
  </method>
  <method name="getId" start="260" end="263" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get token's id.">It shall be used only for getting the internal id of token, not for checking it against excepted value.</description>
    </docblock>
    <return type="int" nullable="true"/>
  </method>
  <method name="getName" start="272" end="279" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get token's name.">It shall be used only for getting the name of token, not for checking it against excepted value.</description>
      <return description="token name" type="object">
        <type full="PhpCsFixer\Tokenizer\null|string" namespace="PhpCsFixer\Tokenizer" name="null|string"/>
      </return>
    </docblock>
    <return type="string" nullable="true"/>
  </method>
  <method name="getNameForId" start="288" end="297" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get token's name.">It shall be used only for getting the name of token, not for checking it against excepted value.</description>
      <return description="token name" type="object">
        <type full="PhpCsFixer\Tokenizer\null|string" namespace="PhpCsFixer\Tokenizer" name="null|string"/>
      </return>
    </docblock>
    <return type="string" nullable="true"/>
    <parameter name="id" byreference="false" type="int"/>
  </method>
  <method name="getKeywords" start="304" end="334" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Generate array containing all keywords that exists in PHP version in use."/>
      <return description="int&gt;" type="object">
        <type full="PhpCsFixer\Tokenizer\array&lt;int" namespace="PhpCsFixer\Tokenizer" name="array&lt;int"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
  </method>
  <method name="getMagicConstants" start="343" end="352" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Generate array containing all predefined constants that exists in PHP version in use."/>
      <see value="https://php.net/manual/en/language.constants.predefined.php"/>
      <return description="int&gt;" type="object">
        <type full="PhpCsFixer\Tokenizer\array&lt;int" namespace="PhpCsFixer\Tokenizer" name="array&lt;int"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
  </method>
  <method name="isArray" start="359" end="362" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check if token prototype is an array."/>
      <return description="is array" type="object">
        <type full="PhpCsFixer\Tokenizer\bool" namespace="PhpCsFixer\Tokenizer" name="bool"/>
      </return>
    </docblock>
    <return type="bool" nullable="false"/>
  </method>
  <method name="isCast" start="367" end="370" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check if token is one of type cast tokens."/>
    </docblock>
    <return type="bool" nullable="false"/>
  </method>
  <method name="isClassy" start="375" end="378" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check if token is one of classy tokens: T_CLASS, T_INTERFACE, T_TRAIT or T_ENUM."/>
    </docblock>
    <return type="bool" nullable="false"/>
  </method>
  <method name="isComment" start="383" end="388" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check if token is one of comment tokens: T_COMMENT or T_DOC_COMMENT."/>
    </docblock>
    <return type="bool" nullable="false"/>
  </method>
  <method name="isObjectOperator" start="393" end="396" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check if token is one of object operator tokens: T_OBJECT_OPERATOR or T_NULLSAFE_OBJECT_OPERATOR."/>
    </docblock>
    <return type="bool" nullable="false"/>
  </method>
  <method name="isGivenKind" start="403" end="406" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check if token is one of given kind."/>
      <param description="kind or array of kinds" type="array" variable="$possibleKind" of="object">
        <type full="PhpCsFixer\Tokenizer\int|int" namespace="PhpCsFixer\Tokenizer" name="int|int"/>
      </param>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="possibleKind" byreference="false" type="{unknown}"/>
  </method>
  <method name="isKeyword" start="411" end="416" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check if token is a keyword."/>
    </docblock>
    <return type="bool" nullable="false"/>
  </method>
  <method name="isNativeConstant" start="421" end="426" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check if token is a native PHP constant: true, false or null."/>
    </docblock>
    <return type="bool" nullable="false"/>
  </method>
  <method name="isMagicConstant" start="433" end="438" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns if the token is of a Magic constants type."/>
      <see value="https://php.net/manual/en/language.constants.predefined.php"/>
    </docblock>
    <return type="bool" nullable="false"/>
  </method>
  <method name="isWhitespace" start="445" end="456" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check if token is whitespace."/>
      <param description="whitespace characters, default is &quot; \t\n\r\0\x0B&quot;" type="object" variable="$whitespaces">
        <type full="PhpCsFixer\Tokenizer\null|string" namespace="PhpCsFixer\Tokenizer" name="null|string"/>
      </param>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="whitespaces" byreference="false" nullable="true" type="string" default="&quot; \t\n\r\0\x0B&quot;"/>
  </method>
  <method name="toArray" start="458" end="467" abstract="false" final="false" static="false" visibility="public">
    <return type="array" nullable="false"/>
  </method>
  <method name="toJson" start="469" end="484" abstract="false" final="false" static="false" visibility="public">
    <return type="string" nullable="false"/>
  </method>
  <method name="getTokenKindsForNames" start="491" end="502" abstract="false" final="false" static="true" visibility="private">
    <docblock>
      <description/>
      <param type="array" variable="$tokenNames" of="object">
        <type full="PhpCsFixer\Tokenizer\string" namespace="PhpCsFixer\Tokenizer" name="string"/>
      </param>
      <return description="int&gt;" type="object">
        <type full="PhpCsFixer\Tokenizer\array&lt;int" namespace="PhpCsFixer\Tokenizer" name="array&lt;int"/>
      </return>
    </docblock>
    <return type="array" nullable="false"/>
    <parameter name="tokenNames" byreference="false" type="array"/>
  </method>
</class>
