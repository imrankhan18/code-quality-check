<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PhpCsFixer\Tokenizer\Transformer\SquareBraceTransformer" namespace="PhpCsFixer\Tokenizer\Transformer" name="SquareBraceTransformer" abstract="false" final="true" start="33" end="199">
  <file path="//var/www/html/vendor/friendsofphp/php-cs-fixer/src/Tokenizer/Transformer" file="SquareBraceTransformer.php" realpath="/var/www/html/vendor/friendsofphp/php-cs-fixer/src/Tokenizer/Transformer/SquareBraceTransformer.php" size="6161" time="2022-03-18T17:20:59+00:00" unixtime="1647624059" sha1="01d449460b8dfe6b5754d140db08e37a2513565f" relative="ar/www/html/vendor/friendsofphp/php-cs-fixer/src/Tokenizer/Transformer/SquareBraceTransformer.php"/>
  <docblock>
    <description compact="Transform discriminate overloaded square braces tokens.">Performed transformations:
- in `[1, 2, 3]` into CT::T_ARRAY_SQUARE_BRACE_OPEN and CT::T_ARRAY_SQUARE_BRACE_CLOSE,
- in `[$a, &amp;$b, [$c]] = array(1, 2, array(3))` into CT::T_DESTRUCTURING_SQUARE_BRACE_OPEN and CT::T_DESTRUCTURING_SQUARE_BRACE_CLOSE.</description>
    <author value="Dariusz RumiÅ„ski &lt;dariusz.ruminski@gmail.com&gt;"/>
    <internal/>
  </docblock>
  <extends full="PhpCsFixer\Tokenizer\AbstractTransformer" namespace="PhpCsFixer\Tokenizer" name="AbstractTransformer"/>
  <method name="getPriority" start="38" end="42" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritdoc}"/>
    </docblock>
    <return type="int" nullable="false"/>
    <inline>
      <comment value="must run after CurlyBraceTransformer and AttributeTransformer" line="40"/>
    </inline>
  </method>
  <method name="getRequiredPhpVersionId" start="47" end="53" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritdoc}"/>
    </docblock>
    <return type="int" nullable="false"/>
    <inline>
      <comment value="Short array syntax was introduced in PHP 5.4, but the fixer is smart" line="49"/>
      <comment value="enough to handle it even before 5.4." line="50"/>
      <comment value="Same for array destructing syntax sugar `[` introduced in PHP 7.1." line="51"/>
    </inline>
  </method>
  <method name="process" start="58" end="69" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritdoc}"/>
    </docblock>
    <return type="void" nullable="false"/>
    <parameter name="tokens" byreference="false" type="object">
      <type full="PhpCsFixer\Tokenizer\Tokens" namespace="PhpCsFixer\Tokenizer" name="Tokens"/>
    </parameter>
    <parameter name="token" byreference="false" type="object">
      <type full="PhpCsFixer\Tokenizer\Token" namespace="PhpCsFixer\Tokenizer" name="Token"/>
    </parameter>
    <parameter name="index" byreference="false" type="int"/>
  </method>
  <method name="getCustomTokens" start="74" end="82" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritdoc}"/>
    </docblock>
    <return type="array" nullable="false"/>
  </method>
  <method name="transformIntoArraySquareBrace" start="84" end="90" abstract="false" final="false" static="false" visibility="private">
    <return type="void" nullable="false"/>
    <parameter name="tokens" byreference="false" type="object">
      <type full="PhpCsFixer\Tokenizer\Tokens" namespace="PhpCsFixer\Tokenizer" name="Tokens"/>
    </parameter>
    <parameter name="index" byreference="false" type="int"/>
  </method>
  <method name="transformIntoDestructuringSquareBrace" start="92" end="111" abstract="false" final="false" static="false" visibility="private">
    <return type="void" nullable="false"/>
    <parameter name="tokens" byreference="false" type="object">
      <type full="PhpCsFixer\Tokenizer\Tokens" namespace="PhpCsFixer\Tokenizer" name="Tokens"/>
    </parameter>
    <parameter name="index" byreference="false" type="int"/>
  </method>
  <method name="isShortArray" start="116" end="148" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Check if token under given index is short array opening."/>
    </docblock>
    <return type="bool" nullable="false"/>
    <parameter name="tokens" byreference="false" type="object">
      <type full="PhpCsFixer\Tokenizer\Tokens" namespace="PhpCsFixer\Tokenizer" name="Tokens"/>
    </parameter>
    <parameter name="index" byreference="false" type="int"/>
  </method>
  <method name="isArrayDestructing" start="150" end="198" abstract="false" final="false" static="false" visibility="private">
    <return type="bool" nullable="false"/>
    <parameter name="tokens" byreference="false" type="object">
      <type full="PhpCsFixer\Tokenizer\Tokens" namespace="PhpCsFixer\Tokenizer" name="Tokens"/>
    </parameter>
    <parameter name="index" byreference="false" type="int"/>
  </method>
  <parent full="PhpCsFixer\Tokenizer\AbstractTransformer" namespace="PhpCsFixer\Tokenizer" name="AbstractTransformer">
    <implements full="PhpCsFixer\Tokenizer\TransformerInterface" namespace="PhpCsFixer\Tokenizer" name="TransformerInterface"/>
    <method name="getName" start="29" end="35" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="{@inheritdoc}"/>
      </docblock>
      <return type="string" nullable="false"/>
    </method>
    <method name="getPriority" start="40" end="43" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="{@inheritdoc}"/>
      </docblock>
      <return type="int" nullable="false"/>
    </method>
    <method name="getCustomTokens" start="48" end="48" abstract="true" final="false" static="false" visibility="public">
      <docblock>
        <description compact="{@inheritdoc}"/>
      </docblock>
      <return type="array" nullable="false"/>
    </method>
  </parent>
  <interface full="PhpCsFixer\Tokenizer\TransformerInterface" namespace="PhpCsFixer\Tokenizer" name="TransformerInterface">
    <method name="getCustomTokens" start="36" end="36" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get tokens created by Transformer."/>
        <return type="array" of="object">
          <type full="PhpCsFixer\Tokenizer\int" namespace="PhpCsFixer\Tokenizer" name="int"/>
        </return>
      </docblock>
      <return type="array" nullable="false"/>
    </method>
    <method name="getName" start="45" end="45" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the name of the transformer.">The name must be all lowercase and without any spaces.</description>
        <return description="The name of the fixer" type="string"/>
      </docblock>
      <return type="string" nullable="false"/>
    </method>
    <method name="getPriority" start="52" end="52" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the priority of the transformer.">The default priority is 0 and higher priorities are executed first.</description>
      </docblock>
      <return type="int" nullable="false"/>
    </method>
    <method name="getRequiredPhpVersionId" start="62" end="62" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return minimal required PHP version id to transform the code.">Custom Token kinds from Transformers are always registered, but sometimes
there is no need to analyse the Tokens if for sure we cannot find examined
token kind, e.g. transforming `T_FUNCTION` in `&lt;?php use function Foo\\bar;`
code.</description>
      </docblock>
      <return type="int" nullable="false"/>
    </method>
    <method name="process" start="67" end="67" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Process Token to transform it into custom token when needed."/>
      </docblock>
      <return type="void" nullable="false"/>
      <parameter name="tokens" byreference="false" type="object">
        <type full="PhpCsFixer\Tokenizer\Tokens" namespace="PhpCsFixer\Tokenizer" name="Tokens"/>
      </parameter>
      <parameter name="token" byreference="false" type="object">
        <type full="PhpCsFixer\Tokenizer\Token" namespace="PhpCsFixer\Tokenizer" name="Token"/>
      </parameter>
      <parameter name="index" byreference="false" type="int"/>
    </method>
  </interface>
</class>
