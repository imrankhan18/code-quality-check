<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="GuzzleHttp\Promise\Create" namespace="GuzzleHttp\Promise" name="Create" abstract="false" final="true" start="5" end="84">
  <file path="//var/www/html/vendor/guzzlehttp/promises/src" file="Create.php" realpath="/var/www/html/vendor/guzzlehttp/promises/src/Create.php" size="2112" time="2021-10-22T20:56:57+00:00" unixtime="1634936217" sha1="f24b17fc6b752814c88dd9783745b593cbf04cee" relative="ar/www/html/vendor/guzzlehttp/promises/src/Create.php"/>
  <method name="promiseFor" start="14" end="30" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Creates a promise for a value if the value is not a promise."/>
      <param description="Promise or value." type="mixed" variable="$value"/>
      <return type="object">
        <type full="GuzzleHttp\Promise\PromiseInterface" namespace="GuzzleHttp\Promise" name="PromiseInterface"/>
      </return>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Return a Guzzle promise that shadows the given promise." line="20"/>
    </inline>
  </method>
  <method name="rejectionFor" start="40" end="47" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Creates a rejected promise for a reason if the reason is not a promise.">If the provided reason is a promise, then it is returned as-is.</description>
      <param description="Promise or reason." type="mixed" variable="$reason"/>
      <return type="object">
        <type full="GuzzleHttp\Promise\PromiseInterface" namespace="GuzzleHttp\Promise" name="PromiseInterface"/>
      </return>
    </docblock>
    <parameter name="reason" byreference="false" type="{unknown}"/>
  </method>
  <method name="exceptionFor" start="56" end="63" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Create an exception for a rejected promise value."/>
      <param type="mixed" variable="$reason"/>
      <return type="object">
        <type full="\Exception|\Throwable" namespace="\Exception|" name="Throwable"/>
      </return>
    </docblock>
    <parameter name="reason" byreference="false" type="{unknown}"/>
  </method>
  <method name="iterFor" start="72" end="83" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns an iterator for the given value."/>
      <param type="mixed" variable="$value"/>
      <return type="object">
        <type full="\Iterator" namespace="" name="Iterator"/>
      </return>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
</class>
