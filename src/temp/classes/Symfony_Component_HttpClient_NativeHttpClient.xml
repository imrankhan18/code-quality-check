<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Symfony\Component\HttpClient\NativeHttpClient" namespace="Symfony\Component\HttpClient" name="NativeHttpClient" abstract="false" final="true" start="34" end="468">
  <file path="//var/www/html/vendor/symfony/http-client" file="NativeHttpClient.php" realpath="/var/www/html/vendor/symfony/http-client/NativeHttpClient.php" size="19696" time="2022-04-12T16:02:29+00:00" unixtime="1649779349" sha1="d84f1196e9e4162a164cc62fa0cc0d6c5ceb2243" relative="ar/www/html/vendor/symfony/http-client/NativeHttpClient.php"/>
  <docblock>
    <description compact="A portable implementation of the HttpClientInterface contracts based on PHP stream wrappers.">PHP stream wrappers are able to fetch response bodies concurrently,
but each request is opened synchronously.</description>
    <author value="Nicolas Grekas &lt;p@tchwork.com&gt;"/>
  </docblock>
  <implements full="Symfony\Contracts\HttpClient\HttpClientInterface" namespace="Symfony\Contracts\HttpClient" name="HttpClientInterface"/>
  <implements full="Psr\Log\LoggerAwareInterface" namespace="Psr\Log" name="LoggerAwareInterface"/>
  <implements full="Symfony\Contracts\Service\ResetInterface" namespace="Symfony\Contracts\Service" name="ResetInterface"/>
  <uses full="Symfony\Component\HttpClient\HttpClientTrait" namespace="Symfony\Component\HttpClient" name="HttpClientTrait" start="36" end="36"/>
  <uses full="Psr\Log\LoggerAwareTrait" namespace="Psr\Log" name="LoggerAwareTrait" start="37" end="37"/>
  <member name="defaultOptions" default="" type="{unknown}" constant="self::OPTIONS_DEFAULTS" visibility="private" static="false" line="39"/>
  <member name="emptyDefaults" default="" type="{unknown}" constant="self::OPTIONS_DEFAULTS" visibility="private" static="true" line="40"/>
  <member name="multi" visibility="private" static="false" line="43">
    <docblock>
      <var type="object">
        <type full="Symfony\Component\HttpClient\Internal\NativeClientState" namespace="Symfony\Component\HttpClient\Internal" name="NativeClientState"/>
      </var>
    </docblock>
  </member>
  <constructor name="__construct" start="51" end="61" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param description="Default request's options" type="array" variable="$defaultOptions"/>
      <param description="The maximum number of connections to open" type="int" variable="$maxHostConnections"/>
      <see value="HttpClientInterface::OPTIONS_DEFAULTS for available options"/>
    </docblock>
    <parameter name="defaultOptions" byreference="false" type="array" default=""/>
    <parameter name="maxHostConnections" byreference="false" type="integer" default="6"/>
  </constructor>
  <method name="request" start="68" end="261" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <see value="HttpClientInterface::OPTIONS_DEFAULTS for available options {@inheritdoc}"/>
    </docblock>
    <return type="object" nullable="false">
      <type full="Symfony\Contracts\HttpClient\ResponseInterface" namespace="Symfony\Contracts\HttpClient" name="ResponseInterface"/>
    </return>
    <parameter name="method" byreference="false" type="string"/>
    <parameter name="url" byreference="false" type="string"/>
    <parameter name="options" byreference="false" type="array" default=""/>
    <inline>
      <comment value="Always register a notification callback to compute live stats about the response" line="168"/>
    </inline>
  </method>
  <method name="stream" start="266" end="275" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="{@inheritdoc}"/>
    </docblock>
    <return type="object" nullable="false">
      <type full="Symfony\Contracts\HttpClient\ResponseStreamInterface" namespace="Symfony\Contracts\HttpClient" name="ResponseStreamInterface"/>
    </return>
    <parameter name="responses" byreference="false" type="{unknown}"/>
    <parameter name="timeout" byreference="false" type="float" default="NULL"/>
  </method>
  <method name="reset" start="277" end="280" abstract="false" final="false" static="false" visibility="public"/>
  <method name="getBodyAsString" start="282" end="303" abstract="false" final="false" static="true" visibility="private">
    <return type="string" nullable="false"/>
    <parameter name="body" byreference="false" type="{unknown}"/>
  </method>
  <method name="parseHostPort" start="308" end="318" abstract="false" final="false" static="true" visibility="private">
    <docblock>
      <description compact="Extracts the host and the port from the URL."/>
    </docblock>
    <return type="array" nullable="false"/>
    <parameter name="url" byreference="false" type="array"/>
    <parameter name="info" byreference="true" type="array"/>
  </method>
  <method name="dnsResolve" start="323" end="348" abstract="false" final="false" static="true" visibility="private">
    <docblock>
      <description compact="Resolves the IP of the host using the local DNS cache if possible."/>
    </docblock>
    <return type="string" nullable="false"/>
    <parameter name="host" byreference="false" type="{unknown}"/>
    <parameter name="multi" byreference="false" type="object">
      <type full="Symfony\Component\HttpClient\Internal\NativeClientState" namespace="Symfony\Component\HttpClient\Internal" name="NativeClientState"/>
    </parameter>
    <parameter name="info" byreference="true" type="array"/>
    <parameter name="onProgress" byreference="false" nullable="true" type="object">
      <type full="Closure" namespace="" name="Closure"/>
    </parameter>
  </method>
  <method name="createRedirectResolver" start="353" end="431" abstract="false" final="false" static="true" visibility="private">
    <docblock>
      <description compact="Handles redirects - the native logic is too buggy to be used."/>
    </docblock>
    <return type="object" nullable="false">
      <type full="Closure" namespace="" name="Closure"/>
    </return>
    <parameter name="options" byreference="false" type="array"/>
    <parameter name="host" byreference="false" type="string"/>
    <parameter name="proxy" byreference="false" nullable="true" type="array"/>
    <parameter name="info" byreference="true" type="array"/>
    <parameter name="onProgress" byreference="false" nullable="true" type="object">
      <type full="Closure" namespace="" name="Closure"/>
    </parameter>
  </method>
  <method name="configureHeadersAndProxy" start="433" end="467" abstract="false" final="false" static="true" visibility="private">
    <return type="bool" nullable="false"/>
    <parameter name="context" byreference="false" type="{unknown}"/>
    <parameter name="host" byreference="false" type="string"/>
    <parameter name="requestHeaders" byreference="false" type="array"/>
    <parameter name="proxy" byreference="false" nullable="true" type="array"/>
    <parameter name="isSsl" byreference="false" type="bool"/>
    <inline>
      <comment value="Matching &quot;no_proxy&quot; should follow the behavior of curl" line="442"/>
    </inline>
  </method>
  <interface full="Symfony\Contracts\HttpClient\HttpClientInterface" namespace="Symfony\Contracts\HttpClient" name="HttpClientInterface">
    <constant type="{unknown}" name="OPTIONS_DEFAULTS" value=""/>
    <method name="request" start="86" end="86" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Requests an HTTP resource.">Responses MUST be lazy, but their status code MUST be
checked even if none of their public methods are called.

Implementations are not required to support all options described above; they can also
support more custom options; but in any case, they MUST throw a TransportExceptionInterface
when an unsupported option is passed.</description>
        <throws description="When an unsupported option is passed" type="object">
          <type full="Symfony\Contracts\HttpClient\Exception\TransportExceptionInterface" namespace="Symfony\Contracts\HttpClient\Exception" name="TransportExceptionInterface"/>
        </throws>
      </docblock>
      <return type="object" nullable="false">
        <type full="Symfony\Contracts\HttpClient\ResponseInterface" namespace="Symfony\Contracts\HttpClient" name="ResponseInterface"/>
      </return>
      <parameter name="method" byreference="false" type="string"/>
      <parameter name="url" byreference="false" type="string"/>
      <parameter name="options" byreference="false" type="array" default=""/>
    </method>
    <method name="stream" start="94" end="94" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Yields responses chunk by chunk as they complete."/>
        <param description="ResponseInterface&gt; $responses One or more responses created by the current HTTP client" type="object">
          <type full="Symfony\Contracts\HttpClient\ResponseInterface|iterable&lt;array-key" namespace="Symfony\Contracts\HttpClient" name="ResponseInterface|iterable&lt;array-key"/>
        </param>
        <param description="The idle timeout before yielding timeout chunks" type="object" variable="$timeout">
          <type full="Symfony\Contracts\HttpClient\float|null" namespace="Symfony\Contracts\HttpClient" name="float|null"/>
        </param>
      </docblock>
      <return type="object" nullable="false">
        <type full="Symfony\Contracts\HttpClient\ResponseStreamInterface" namespace="Symfony\Contracts\HttpClient" name="ResponseStreamInterface"/>
      </return>
      <parameter name="responses" byreference="false" type="{unknown}"/>
      <parameter name="timeout" byreference="false" type="float" default="NULL"/>
    </method>
  </interface>
  <interface full="Psr\Log\LoggerAwareInterface" namespace="Psr\Log" name="LoggerAwareInterface">
    <method name="setLogger" start="17" end="17" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Sets a logger instance on the object."/>
        <param type="object" variable="$logger">
          <type full="Psr\Log\LoggerInterface" namespace="Psr\Log" name="LoggerInterface"/>
        </param>
        <return type="object">
          <type full="Psr\Log\void" namespace="Psr\Log" name="void"/>
        </return>
      </docblock>
      <parameter name="logger" byreference="false" type="object">
        <type full="Psr\Log\LoggerInterface" namespace="Psr\Log" name="LoggerInterface"/>
      </parameter>
    </method>
  </interface>
  <interface full="Symfony\Contracts\Service\ResetInterface" namespace="Symfony\Contracts\Service" name="ResetInterface">
    <method name="reset" start="29" end="29" abstract="false" final="false" static="false" visibility="public"/>
  </interface>
  <trait full="Symfony\Component\HttpClient\HttpClientTrait" namespace="Symfony\Component\HttpClient" name="HttpClientTrait">
    <method name="withOptions" start="31" end="37" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="{@inheritdoc}"/>
      </docblock>
      <return type="object" nullable="false">
        <type full="Symfony\Component\HttpClient\HttpClientTrait" namespace="Symfony\Component\HttpClient" name="HttpClientTrait"/>
      </return>
      <parameter name="options" byreference="false" type="array"/>
    </method>
  </trait>
  <trait full="Psr\Log\LoggerAwareTrait" namespace="Psr\Log" name="LoggerAwareTrait">
    <member name="logger" visibility="protected" static="false" line="15">
      <docblock>
        <description compact="The logger instance."/>
        <var type="object">
          <type full="Psr\Log\LoggerInterface|null" namespace="Psr\Log" name="LoggerInterface|null"/>
        </var>
      </docblock>
    </member>
    <method name="setLogger" start="22" end="25" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Sets a logger."/>
        <param type="object" variable="$logger">
          <type full="Psr\Log\LoggerInterface" namespace="Psr\Log" name="LoggerInterface"/>
        </param>
      </docblock>
      <parameter name="logger" byreference="false" type="object">
        <type full="Psr\Log\LoggerInterface" namespace="Psr\Log" name="LoggerInterface"/>
      </parameter>
    </method>
  </trait>
</class>
