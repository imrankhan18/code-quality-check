<?xml version="1.0" encoding="UTF-8"?>
<interface xmlns="http://xml.phpdox.net/src" full="Symfony\Contracts\Cache\ItemInterface" namespace="Symfony\Contracts\Cache" name="ItemInterface" abstract="false" final="false" start="23" end="65">
  <file path="//var/www/html/vendor/symfony/cache-contracts" file="ItemInterface.php" realpath="/var/www/html/vendor/symfony/cache-contracts/ItemInterface.php" size="1772" time="2022-01-02T09:53:40+00:00" unixtime="1641117220" sha1="411fe0139e867fc92c6710745504fcaf4d1fa71e" relative="ar/www/html/vendor/symfony/cache-contracts/ItemInterface.php"/>
  <docblock>
    <description compact="Augments PSR-6's CacheItemInterface with support for tags and metadata."/>
    <author value="Nicolas Grekas &lt;p@tchwork.com&gt;"/>
  </docblock>
  <extends full="Psr\Cache\CacheItemInterface" namespace="Psr\Cache" name="CacheItemInterface"/>
  <constant type="{unknown}" name="METADATA_EXPIRY" value="'expiry'">
    <docblock>
      <description compact="References the Unix timestamp stating when the item will expire."/>
    </docblock>
  </constant>
  <constant type="{unknown}" name="METADATA_CTIME" value="'ctime'">
    <docblock>
      <description compact="References the time the item took to be created, in milliseconds."/>
    </docblock>
  </constant>
  <constant type="{unknown}" name="METADATA_TAGS" value="'tags'">
    <docblock>
      <description compact="References the list of tags that were assigned to the item, as string[]."/>
    </docblock>
  </constant>
  <constant type="{unknown}" name="RESERVED_CHARACTERS" value="'{}()/\@:'">
    <docblock>
      <description compact="Reserved characters that cannot be used in a key or tag."/>
    </docblock>
  </constant>
  <method name="tag" start="57" end="57" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds a tag to a cache item.">Tags are strings that follow the same validation rules as keys.</description>
      <param description="A tag or array of tags" type="array" variable="$tags" of="object">
        <type full="Symfony\Contracts\Cache\string|string" namespace="Symfony\Contracts\Cache" name="string|string"/>
      </param>
      <return type="object">
        <type full="Symfony\Contracts\Cache\$this" namespace="Symfony\Contracts\Cache" name="$this"/>
      </return>
      <throws description="When $tag is not valid" type="object">
        <type full="Psr\Cache\InvalidArgumentException" namespace="Psr\Cache" name="InvalidArgumentException"/>
      </throws>
      <throws description="When the item comes from a pool that is not tag-aware" type="object">
        <type full="Psr\Cache\CacheException" namespace="Psr\Cache" name="CacheException"/>
      </throws>
    </docblock>
    <return type="object" nullable="false">
      <type full="Symfony\Contracts\Cache\ItemInterface" namespace="Symfony\Contracts\Cache" name="ItemInterface"/>
    </return>
    <parameter name="tags" byreference="false" type="{unknown}"/>
  </method>
  <method name="getMetadata" start="64" end="64" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a list of metadata info that were saved alongside with the cached value.">See ItemInterface::METADATA_* consts for keys potentially found in the returned array.</description>
    </docblock>
    <return type="array" nullable="false"/>
  </method>
  <implementors>
    <class full="Symfony\Component\Cache\CacheItem" namespace="Symfony\Component\Cache" name="CacheItem"/>
  </implementors>
  <parent full="Psr\Cache\CacheItemInterface" namespace="Psr\Cache" name="CacheItemInterface">
    <method name="getKey" start="35" end="35" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the key for the current cache item.">The key is loaded by the Implementing Library, but should be available to
the higher level callers when needed.</description>
        <return type="string">The key string for this cache item.</return>
      </docblock>
    </method>
    <method name="get" start="49" end="49" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Retrieves the value of the item from the cache associated with this object's key.">The value returned must be identical to the value originally stored by set().

If isHit() returns false, this method MUST return null. Note that null
is a legitimate cached value, so the isHit() method SHOULD be used to
differentiate between "null value was found" and "no value was found."</description>
        <return type="mixed">The value corresponding to this cache item's key, or null if not found.</return>
      </docblock>
    </method>
    <method name="isHit" start="60" end="60" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Confirms if the cache item lookup resulted in a cache hit.">Note: This method MUST NOT have a race condition between calling isHit()
and calling get().</description>
        <return type="object">True if the request resulted in a cache hit. False otherwise.<type full="Psr\Cache\bool" namespace="Psr\Cache" name="bool"/></return>
      </docblock>
    </method>
    <method name="set" start="75" end="75" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Sets the value represented by this cache item.">The $value argument may be any item that can be serialized by PHP,
although the method of serialization is left up to the Implementing
Library.</description>
        <param type="mixed" variable="$value">The serializable value to be stored.</param>
        <return resolution="static" type="object">The invoked object.<type full="Symfony\Contracts\Cache\ItemInterface" namespace="Symfony\Contracts\Cache" name="ItemInterface"/></return>
      </docblock>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="expiresAt" start="89" end="89" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Sets the expiration time for this cache item."/>
        <param type="object" variable="$expiration">The point in time after which the item MUST be considered expired.
  If null is passed explicitly, a default value MAY be used. If none is set,
  the value should be stored permanently or for as long as the
  implementation allows.<type full="\DateTimeInterface|null" namespace="" name="DateTimeInterface|null"/></param>
        <return resolution="static" type="object">The called object.<type full="Symfony\Contracts\Cache\ItemInterface" namespace="Symfony\Contracts\Cache" name="ItemInterface"/></return>
      </docblock>
      <parameter name="expiration" byreference="false" type="{unknown}"/>
    </method>
    <method name="expiresAfter" start="104" end="104" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Sets the expiration time for this cache item."/>
        <param type="object" variable="$time">The period of time from the present after which the item MUST be considered
  expired. An integer parameter is understood to be the time in seconds until
  expiration. If null is passed explicitly, a default value MAY be used.
  If none is set, the value should be stored permanently or for as long as the
  implementation allows.<type full="Psr\Cache\int|\DateInterval|null" namespace="Psr\Cache\int|" name="DateInterval|null"/></param>
        <return resolution="static" type="object">The called object.<type full="Symfony\Contracts\Cache\ItemInterface" namespace="Symfony\Contracts\Cache" name="ItemInterface"/></return>
      </docblock>
      <parameter name="time" byreference="false" type="{unknown}"/>
    </method>
  </parent>
</interface>
