<?xml version="1.0" encoding="UTF-8"?>
<interface xmlns="http://xml.phpdox.net/src" full="Psr\Http\Message\UploadedFileInterface" namespace="Psr\Http\Message" name="UploadedFileInterface" abstract="false" final="false" start="13" end="123">
  <file path="//var/www/html/vendor/psr/http-message/src" file="UploadedFileInterface.php" realpath="/var/www/html/vendor/psr/http-message/src/UploadedFileInterface.php" size="4689" time="2016-08-06T14:39:51+00:00" unixtime="1470494391" sha1="16d515f00721f693057b64b3a0c4123167a7acff" relative="ar/www/html/vendor/psr/http-message/src/UploadedFileInterface.php"/>
  <docblock>
    <description compact="Value object representing a file uploaded through an HTTP request.">Instances of this interface are considered immutable; all methods that
might change state MUST be implemented such that they retain the internal
state of the current instance and return an instance that contains the
changed state.</description>
  </docblock>
  <method name="getStream" start="31" end="31" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Retrieve a stream representing the uploaded file.">This method MUST return a StreamInterface instance, representing the
uploaded file. The purpose of this method is to allow utilizing native PHP
stream functionality to manipulate the file upload, such as
stream_copy_to_stream() (though the result will need to be decorated in a
native PHP stream wrapper to work with such functions).

If the moveTo() method has been called previously, this method MUST raise
an exception.</description>
      <return description="Stream representation of the uploaded file." type="object">
        <type full="Psr\Http\Message\StreamInterface" namespace="Psr\Http\Message" name="StreamInterface"/>
      </return>
      <throws description="in cases when no stream is available or can be" type="object">created.<type full="\RuntimeException" namespace="" name="RuntimeException"/></throws>
    </docblock>
  </method>
  <method name="moveTo" start="65" end="65" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Move the uploaded file to a new location.">Use this method as an alternative to move_uploaded_file(). This method is
guaranteed to work in both SAPI and non-SAPI environments.
Implementations must determine which environment they are in, and use the
appropriate method (move_uploaded_file(), rename(), or a stream
operation) to perform the operation.

$targetPath may be an absolute path, or a relative path. If it is a
relative path, resolution should be the same as used by PHP's rename()
function.

The original file or stream MUST be removed on completion.

If this method is called more than once, any subsequent calls MUST raise
an exception.

When used in an SAPI environment where $_FILES is populated, when writing
files via moveTo(), is_uploaded_file() and move_uploaded_file() SHOULD be
used to ensure permissions and upload status are verified correctly.

If you wish to move to a stream, use getStream(), as SAPI operations
cannot guarantee writing to stream destinations.</description>
      <see value="http://php.net/is_uploaded_file"/>
      <see value="http://php.net/move_uploaded_file"/>
      <param description="Path to which to move the uploaded file." type="string" variable="$targetPath"/>
      <throws description="if the $targetPath specified is invalid." type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="on any error during the move operation, or on" type="object">the second or subsequent call to the method.<type full="\RuntimeException" namespace="" name="RuntimeException"/></throws>
    </docblock>
    <parameter name="targetPath" byreference="false" type="{unknown}"/>
  </method>
  <method name="getSize" start="76" end="76" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Retrieve the file size.">Implementations SHOULD return the value stored in the "size" key of
the file in the $_FILES array if available, as PHP calculates this based
on the actual size transmitted.</description>
      <return description="The file size in bytes or null if unknown." type="object">
        <type full="Psr\Http\Message\int|null" namespace="Psr\Http\Message" name="int|null"/>
      </return>
    </docblock>
  </method>
  <method name="getError" start="92" end="92" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Retrieve the error associated with the uploaded file.">The return value MUST be one of PHP's UPLOAD_ERR_XXX constants.

If the file was uploaded successfully, this method MUST return
UPLOAD_ERR_OK.

Implementations SHOULD return the value stored in the "error" key of
the file in the $_FILES array.</description>
      <see value="http://php.net/manual/en/features.file-upload.errors.php"/>
      <return description="One of PHP's UPLOAD_ERR_XXX constants." type="int"/>
    </docblock>
  </method>
  <method name="getClientFilename" start="107" end="107" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Retrieve the filename sent by the client.">Do not trust the value returned by this method. A client could send
a malicious filename with the intention to corrupt or hack your
application.

Implementations SHOULD return the value stored in the "name" key of
the file in the $_FILES array.</description>
      <return description="The filename sent by the client or null if none" type="object">was provided.<type full="Psr\Http\Message\string|null" namespace="Psr\Http\Message" name="string|null"/></return>
    </docblock>
  </method>
  <method name="getClientMediaType" start="122" end="122" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Retrieve the media type sent by the client.">Do not trust the value returned by this method. A client could send
a malicious media type with the intention to corrupt or hack your
application.

Implementations SHOULD return the value stored in the "type" key of
the file in the $_FILES array.</description>
      <return description="The media type sent by the client or null if none" type="object">was provided.<type full="Psr\Http\Message\string|null" namespace="Psr\Http\Message" name="string|null"/></return>
    </docblock>
  </method>
  <implementors>
    <class full="GuzzleHttp\Psr7\UploadedFile" namespace="GuzzleHttp\Psr7" name="UploadedFile"/>
  </implementors>
</interface>
