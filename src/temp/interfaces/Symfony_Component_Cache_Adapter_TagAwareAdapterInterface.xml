<?xml version="1.0" encoding="UTF-8"?>
<interface xmlns="http://xml.phpdox.net/src" full="Symfony\Component\Cache\Adapter\TagAwareAdapterInterface" namespace="Symfony\Component\Cache\Adapter" name="TagAwareAdapterInterface" abstract="false" final="false" start="21" end="33">
  <file path="//var/www/html/vendor/symfony/cache/Adapter" file="TagAwareAdapterInterface.php" realpath="/var/www/html/vendor/symfony/cache/Adapter/TagAwareAdapterInterface.php" size="769" time="2022-04-26T13:19:20+00:00" unixtime="1650979160" sha1="491a70eea1972f96810e285e443b3eb4a63c34a9" relative="ar/www/html/vendor/symfony/cache/Adapter/TagAwareAdapterInterface.php"/>
  <docblock>
    <description compact="Interface for invalidating cached items using tags."/>
    <author value="Nicolas Grekas &lt;p@tchwork.com&gt;"/>
  </docblock>
  <extends full="Symfony\Component\Cache\Adapter\AdapterInterface" namespace="Symfony\Component\Cache\Adapter" name="AdapterInterface"/>
  <method name="invalidateTags" start="32" end="32" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Invalidates cached items using tags."/>
      <param description="An array of tags to invalidate" type="array" variable="$tags" of="object">
        <type full="Symfony\Component\Cache\Adapter\string" namespace="Symfony\Component\Cache\Adapter" name="string"/>
      </param>
      <return type="object">
        <type full="Symfony\Component\Cache\Adapter\bool" namespace="Symfony\Component\Cache\Adapter" name="bool"/>
      </return>
      <throws description="When $tags is not valid" type="object">
        <type full="Psr\Cache\InvalidArgumentException" namespace="Psr\Cache" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="tags" byreference="false" type="array"/>
  </method>
  <parent full="Symfony\Component\Cache\Adapter\AdapterInterface" namespace="Symfony\Component\Cache\Adapter" name="AdapterInterface">
    <extends full="Psr\Cache\CacheItemPoolInterface" namespace="Psr\Cache" name="CacheItemPoolInterface"/>
    <method name="getItem" start="32" end="32" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="{@inheritdoc}"/>
        <return type="object">
          <type full="Symfony\Component\Cache\CacheItem" namespace="Symfony\Component\Cache" name="CacheItem"/>
        </return>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
    </method>
    <method name="getItems" start="39" end="39" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="{@inheritdoc}"/>
        <return description="CacheItem&gt;" type="object">
          <type full="\Traversable&lt;string" namespace="" name="Traversable&lt;string"/>
        </return>
      </docblock>
      <parameter name="keys" byreference="false" type="array" default=""/>
    </method>
    <method name="clear" start="46" end="46" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="{@inheritdoc}"/>
        <return type="object">
          <type full="Symfony\Component\Cache\Adapter\bool" namespace="Symfony\Component\Cache\Adapter" name="bool"/>
        </return>
      </docblock>
      <parameter name="prefix" byreference="false" type="string" default="''"/>
    </method>
  </parent>
  <parent full="Psr\Cache\CacheItemPoolInterface" namespace="Psr\Cache" name="CacheItemPoolInterface">
    <method name="getItem" start="32" end="32" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns a Cache Item representing the specified key.">This method must always return a CacheItemInterface object, even in case of
a cache miss. It MUST NOT return null.</description>
        <param type="string" variable="$key">The key for which to return the corresponding Cache Item.</param>
        <throws type="object">If the $key string is not a legal value a \Psr\Cache\InvalidArgumentException
  MUST be thrown.<type full="Psr\Cache\InvalidArgumentException" namespace="Psr\Cache" name="InvalidArgumentException"/></throws>
        <return type="object">The corresponding Cache Item.<type full="Psr\Cache\CacheItemInterface" namespace="Psr\Cache" name="CacheItemInterface"/></return>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
    </method>
    <method name="getItems" start="50" end="50" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns a traversable set of cache items."/>
        <param type="array" variable="$keys" of="object">An indexed array of keys of items to retrieve.<type full="Psr\Cache\string" namespace="Psr\Cache" name="string"/></param>
        <throws type="object">If any of the keys in $keys are not a legal value a \Psr\Cache\InvalidArgumentException
  MUST be thrown.<type full="Psr\Cache\InvalidArgumentException" namespace="Psr\Cache" name="InvalidArgumentException"/></throws>
        <return type="object">A traversable collection of Cache Items keyed by the cache keys of
  each item. A Cache item will be returned for each key, even if that
  key is not found. However, if no keys are specified then an empty
  traversable MUST be returned instead.<type full="Psr\Cache\array|\Traversable" namespace="Psr\Cache\array|" name="Traversable"/></return>
      </docblock>
      <parameter name="keys" byreference="false" type="array" default=""/>
    </method>
    <method name="hasItem" start="69" end="69" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Confirms if the cache contains specified cache item.">Note: This method MAY avoid retrieving the cached value for performance reasons.
This could result in a race condition with CacheItemInterface::get(). To avoid
such situation use CacheItemInterface::isHit() instead.</description>
        <param type="string" variable="$key">The key for which to check existence.</param>
        <throws type="object">If the $key string is not a legal value a \Psr\Cache\InvalidArgumentException
  MUST be thrown.<type full="Psr\Cache\InvalidArgumentException" namespace="Psr\Cache" name="InvalidArgumentException"/></throws>
        <return type="object">True if item exists in the cache, false otherwise.<type full="Psr\Cache\bool" namespace="Psr\Cache" name="bool"/></return>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
    </method>
    <method name="clear" start="77" end="77" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Deletes all items in the pool."/>
        <return type="object">True if the pool was successfully cleared. False if there was an error.<type full="Psr\Cache\bool" namespace="Psr\Cache" name="bool"/></return>
      </docblock>
    </method>
    <method name="deleteItem" start="92" end="92" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Removes the item from the pool."/>
        <param type="string" variable="$key">The key to delete.</param>
        <throws type="object">If the $key string is not a legal value a \Psr\Cache\InvalidArgumentException
  MUST be thrown.<type full="Psr\Cache\InvalidArgumentException" namespace="Psr\Cache" name="InvalidArgumentException"/></throws>
        <return type="object">True if the item was successfully removed. False if there was an error.<type full="Psr\Cache\bool" namespace="Psr\Cache" name="bool"/></return>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
    </method>
    <method name="deleteItems" start="107" end="107" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Removes multiple items from the pool."/>
        <param type="array" variable="$keys" of="object">An array of keys that should be removed from the pool.<type full="Psr\Cache\string" namespace="Psr\Cache" name="string"/></param>
        <throws type="object">If any of the keys in $keys are not a legal value a \Psr\Cache\InvalidArgumentException
  MUST be thrown.<type full="Psr\Cache\InvalidArgumentException" namespace="Psr\Cache" name="InvalidArgumentException"/></throws>
        <return type="object">True if the items were successfully removed. False if there was an error.<type full="Psr\Cache\bool" namespace="Psr\Cache" name="bool"/></return>
      </docblock>
      <parameter name="keys" byreference="false" type="array"/>
    </method>
    <method name="save" start="118" end="118" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Persists a cache item immediately."/>
        <param type="object" variable="$item">The cache item to save.<type full="Psr\Cache\CacheItemInterface" namespace="Psr\Cache" name="CacheItemInterface"/></param>
        <return type="object">True if the item was successfully persisted. False if there was an error.<type full="Psr\Cache\bool" namespace="Psr\Cache" name="bool"/></return>
      </docblock>
      <parameter name="item" byreference="false" type="object">
        <type full="Psr\Cache\CacheItemInterface" namespace="Psr\Cache" name="CacheItemInterface"/>
      </parameter>
    </method>
    <method name="saveDeferred" start="129" end="129" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Sets a cache item to be persisted later."/>
        <param type="object" variable="$item">The cache item to save.<type full="Psr\Cache\CacheItemInterface" namespace="Psr\Cache" name="CacheItemInterface"/></param>
        <return type="object">False if the item could not be queued or if a commit was attempted and failed. True otherwise.<type full="Psr\Cache\bool" namespace="Psr\Cache" name="bool"/></return>
      </docblock>
      <parameter name="item" byreference="false" type="object">
        <type full="Psr\Cache\CacheItemInterface" namespace="Psr\Cache" name="CacheItemInterface"/>
      </parameter>
    </method>
    <method name="commit" start="137" end="137" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Persists any deferred cache items."/>
        <return type="object">True if all not-yet-saved items were successfully saved or there were none. False otherwise.<type full="Psr\Cache\bool" namespace="Psr\Cache" name="bool"/></return>
      </docblock>
    </method>
  </parent>
  <implementors>
    <class full="Symfony\Component\Cache\Adapter\TraceableTagAwareAdapter" namespace="Symfony\Component\Cache\Adapter" name="TraceableTagAwareAdapter"/>
    <class full="Symfony\Component\Cache\Adapter\TagAwareAdapter" namespace="Symfony\Component\Cache\Adapter" name="TagAwareAdapter"/>
  </implementors>
</interface>
