<?xml version="1.0" encoding="UTF-8"?>
<interface xmlns="http://xml.phpdox.net/src" full="Composer\EventDispatcher\EventSubscriberInterface" namespace="Composer\EventDispatcher" name="EventSubscriberInterface" abstract="false" final="false" start="27" end="48">
  <file path="//var/www/html/vendor/composer/composer/src/Composer/EventDispatcher" file="EventSubscriberInterface.php" realpath="/var/www/html/vendor/composer/composer/src/Composer/EventDispatcher/EventSubscriberInterface.php" size="1653" time="2022-04-13T14:43:00+00:00" unixtime="1649860980" sha1="7f4a6ec660663030ead98fa0f6a545554ee63b7d" relative="ar/www/html/vendor/composer/composer/src/Composer/EventDispatcher/EventSubscriberInterface.php"/>
  <docblock>
    <description compact="An EventSubscriber knows which events it is interested in.">If an EventSubscriber is added to an EventDispatcher, the manager invokes
{@link getSubscribedEvents} and registers the subscriber as a listener for all
returned events.</description>
    <author value="Guilherme Blanco &lt;guilhermeblanco@hotmail.com&gt;"/>
    <author value="Jonathan Wage &lt;jonwage@gmail.com&gt;"/>
    <author value="Roman Borschel &lt;roman@code-factory.org&gt;"/>
    <author value="Bernhard Schussek &lt;bschussek@gmail.com&gt;"/>
  </docblock>
  <method name="getSubscribedEvents" start="47" end="47" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns an array of event names this subscriber wants to listen to.">The array keys are event names and the value can be:

* The method name to call (priority defaults to 0)
* An array composed of the method name to call and the priority
* An array of arrays composed of the method names to call and respective
  priorities, or 0 if unset

For instance:

* array('eventName' =&gt; 'methodName')
* array('eventName' =&gt; array('methodName', $priority))
* array('eventName' =&gt; array(array('methodName1', $priority), array('methodName2'))</description>
      <return description="string|array{0: string, 1?: int}|array&lt;array{0: string, 1?: int}&gt;&gt; The event names to listen to" type="object">
        <type full="Composer\EventDispatcher\array&lt;string" namespace="Composer\EventDispatcher" name="array&lt;string"/>
      </return>
    </docblock>
  </method>
  <implementors>
    <class full="Dealerdirect\Composer\Plugin\Installers\PHPCodeSniffer\Plugin" namespace="Dealerdirect\Composer\Plugin\Installers\PHPCodeSniffer" name="Plugin"/>
  </implementors>
</interface>
