<?xml version="1.0" encoding="UTF-8"?>
<interface xmlns="http://xml.phpdox.net/src" full="Symfony\Component\EventDispatcher\EventSubscriberInterface" namespace="Symfony\Component\EventDispatcher" name="EventSubscriberInterface" abstract="false" final="false" start="25" end="49">
  <file path="//var/www/html/vendor/symfony/event-dispatcher" file="EventSubscriberInterface.php" realpath="/var/www/html/vendor/symfony/event-dispatcher/EventSubscriberInterface.php" size="1764" time="2022-01-02T09:53:40+00:00" unixtime="1641117220" sha1="61ac79da0f9a4c370d4053f1ac2c7885981c77b9" relative="ar/www/html/vendor/symfony/event-dispatcher/EventSubscriberInterface.php"/>
  <docblock>
    <description compact="An EventSubscriber knows itself what events it is interested in.">If an EventSubscriber is added to an EventDispatcherInterface, the manager invokes
{@link getSubscribedEvents} and registers the subscriber as a listener for all
returned events.</description>
    <author value="Guilherme Blanco &lt;guilhermeblanco@hotmail.com&gt;"/>
    <author value="Jonathan Wage &lt;jonwage@gmail.com&gt;"/>
    <author value="Roman Borschel &lt;roman@code-factory.org&gt;"/>
    <author value="Bernhard Schussek &lt;bschussek@gmail.com&gt;"/>
  </docblock>
  <method name="getSubscribedEvents" start="48" end="48" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns an array of event names this subscriber wants to listen to.">The array keys are event names and the value can be:

 * The method name to call (priority defaults to 0)
 * An array composed of the method name to call and the priority
 * An array of arrays composed of the method names to call and respective
   priorities, or 0 if unset

For instance:

 * ['eventName' =&gt; 'methodName']
 * ['eventName' =&gt; ['methodName', $priority]]
 * ['eventName' =&gt; [['methodName1', $priority], ['methodName2']]]

The code must not depend on runtime state as it will only be called at compile time.
All logic depending on runtime state must be put into the individual methods handling the events.</description>
      <return description="string|array{0: string, 1: int}|list&lt;array{0: string, 1?: int}&gt;&gt;" type="object">
        <type full="Symfony\Component\EventDispatcher\array&lt;string" namespace="Symfony\Component\EventDispatcher" name="array&lt;string"/>
      </return>
    </docblock>
  </method>
  <implementors>
    <class full="Symfony\Component\Console\EventListener\ErrorListener" namespace="Symfony\Component\Console\EventListener" name="ErrorListener"/>
    <class full="Symfony\Component\EventDispatcher\DependencyInjection\ExtractingEventDispatcher" namespace="Symfony\Component\EventDispatcher\DependencyInjection" name="ExtractingEventDispatcher"/>
  </implementors>
</interface>
