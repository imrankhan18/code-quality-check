<?xml version="1.0" encoding="UTF-8"?>
<interface xmlns="http://xml.phpdox.net/src" full="Psr\Http\Message\StreamInterface" namespace="Psr\Http\Message" name="StreamInterface" abstract="false" final="false" start="12" end="158">
  <file path="//var/www/html/vendor/psr/http-message/src" file="StreamInterface.php" realpath="/var/www/html/vendor/psr/http-message/src/StreamInterface.php" size="4746" time="2016-08-06T14:39:51+00:00" unixtime="1470494391" sha1="05d247777c02c5508ef812f24679761fd6cd527f" relative="ar/www/html/vendor/psr/http-message/src/StreamInterface.php"/>
  <docblock>
    <description compact="Describes a data stream.">Typically, an instance will wrap a PHP stream; this interface provides
a wrapper around the most common operations, including serialization of
the entire stream to a string.</description>
  </docblock>
  <method name="__toString" start="28" end="28" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Reads all data from the stream into a string, from the beginning to end.">This method MUST attempt to seek to the beginning of the stream before
reading data and read the stream until the end is reached.

Warning: This could attempt to load a large amount of data into memory.

This method MUST NOT raise an exception in order to conform with PHP's
string casting operations.</description>
      <see value="http://php.net/manual/en/language.oop5.magic.php#object.tostring"/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="close" start="35" end="35" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Closes the stream and any underlying resources."/>
      <return type="object">
        <type full="Psr\Http\Message\void" namespace="Psr\Http\Message" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="detach" start="44" end="44" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Separates any underlying resources from the stream.">After the stream has been detached, the stream is in an unusable state.</description>
      <return description="Underlying PHP stream, if any" type="object">
        <type full="Psr\Http\Message\resource|null" namespace="Psr\Http\Message" name="resource|null"/>
      </return>
    </docblock>
  </method>
  <method name="getSize" start="51" end="51" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the size of the stream if known."/>
      <return description="Returns the size in bytes if known, or null if unknown." type="object">
        <type full="Psr\Http\Message\int|null" namespace="Psr\Http\Message" name="int|null"/>
      </return>
    </docblock>
  </method>
  <method name="tell" start="59" end="59" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the current position of the file read/write pointer"/>
      <return description="Position of the file pointer" type="int"/>
      <throws description="on error." type="object">
        <type full="\RuntimeException" namespace="" name="RuntimeException"/>
      </throws>
    </docblock>
  </method>
  <method name="eof" start="66" end="66" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if the stream is at the end of the stream."/>
      <return type="object">
        <type full="Psr\Http\Message\bool" namespace="Psr\Http\Message" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="isSeekable" start="73" end="73" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns whether or not the stream is seekable."/>
      <return type="object">
        <type full="Psr\Http\Message\bool" namespace="Psr\Http\Message" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="seek" start="87" end="87" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Seek to a position in the stream."/>
      <link value="http://www.php.net/manual/en/function.fseek.php"/>
      <param description="Stream offset" type="int" variable="$offset"/>
      <param description="Specifies how the cursor position will be calculated" type="int" variable="$whence">based on the seek offset. Valid values are identical to the built-in
    PHP $whence values for `fseek()`.  SEEK_SET: Set position equal to
    offset bytes SEEK_CUR: Set position to current location plus offset
    SEEK_END: Set position to end-of-stream plus offset.</param>
      <throws description="on failure." type="object">
        <type full="\RuntimeException" namespace="" name="RuntimeException"/>
      </throws>
    </docblock>
    <parameter name="offset" byreference="false" type="{unknown}"/>
    <parameter name="whence" byreference="false" type="{unknown}" default="" constant="SEEK_SET"/>
  </method>
  <method name="rewind" start="99" end="99" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Seek to the beginning of the stream.">If the stream is not seekable, this method will raise an exception;
otherwise, it will perform a seek(0).</description>
      <see value="seek()"/>
      <link value="http://www.php.net/manual/en/function.fseek.php"/>
      <throws description="on failure." type="object">
        <type full="\RuntimeException" namespace="" name="RuntimeException"/>
      </throws>
    </docblock>
  </method>
  <method name="isWritable" start="106" end="106" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns whether or not the stream is writable."/>
      <return type="object">
        <type full="Psr\Http\Message\bool" namespace="Psr\Http\Message" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="write" start="115" end="115" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Write data to the stream."/>
      <param description="The string that is to be written." type="string" variable="$string"/>
      <return description="Returns the number of bytes written to the stream." type="int"/>
      <throws description="on failure." type="object">
        <type full="\RuntimeException" namespace="" name="RuntimeException"/>
      </throws>
    </docblock>
    <parameter name="string" byreference="false" type="{unknown}"/>
  </method>
  <method name="isReadable" start="122" end="122" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns whether or not the stream is readable."/>
      <return type="object">
        <type full="Psr\Http\Message\bool" namespace="Psr\Http\Message" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="read" start="134" end="134" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Read data from the stream."/>
      <param description="Read up to $length bytes from the object and return" type="int" variable="$length">them. Fewer than $length bytes may be returned if underlying stream
    call returns fewer bytes.</param>
      <return description="Returns the data read from the stream, or an empty string" type="string">if no bytes are available.</return>
      <throws description="if an error occurs." type="object">
        <type full="\RuntimeException" namespace="" name="RuntimeException"/>
      </throws>
    </docblock>
    <parameter name="length" byreference="false" type="{unknown}"/>
  </method>
  <method name="getContents" start="143" end="143" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the remaining contents in a string"/>
      <return type="string"/>
      <throws description="if unable to read or an error occurs while" type="object">reading.<type full="\RuntimeException" namespace="" name="RuntimeException"/></throws>
    </docblock>
  </method>
  <method name="getMetadata" start="157" end="157" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get stream metadata as an associative array or retrieve a specific key.">The keys returned are identical to the keys returned from PHP's
stream_get_meta_data() function.</description>
      <link value="http://php.net/manual/en/function.stream-get-meta-data.php"/>
      <param description="Specific metadata to retrieve." type="string" variable="$key"/>
      <return description="Returns an associative array if no key is" type="object">provided. Returns a specific key value if a key is provided and the
    value is found, or null if the key is not found.<type full="Psr\Http\Message\array|mixed|null" namespace="Psr\Http\Message" name="array|mixed|null"/></return>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <implementors>
    <class full="GuzzleHttp\Psr7\Stream" namespace="GuzzleHttp\Psr7" name="Stream"/>
    <class full="GuzzleHttp\Psr7\AppendStream" namespace="GuzzleHttp\Psr7" name="AppendStream"/>
    <class full="GuzzleHttp\Psr7\FnStream" namespace="GuzzleHttp\Psr7" name="FnStream"/>
    <class full="GuzzleHttp\Psr7\NoSeekStream" namespace="GuzzleHttp\Psr7" name="NoSeekStream"/>
    <class full="GuzzleHttp\Psr7\LazyOpenStream" namespace="GuzzleHttp\Psr7" name="LazyOpenStream"/>
    <class full="GuzzleHttp\Psr7\LimitStream" namespace="GuzzleHttp\Psr7" name="LimitStream"/>
    <class full="GuzzleHttp\Psr7\MultipartStream" namespace="GuzzleHttp\Psr7" name="MultipartStream"/>
    <class full="GuzzleHttp\Psr7\DroppingStream" namespace="GuzzleHttp\Psr7" name="DroppingStream"/>
    <class full="GuzzleHttp\Psr7\PumpStream" namespace="GuzzleHttp\Psr7" name="PumpStream"/>
    <class full="GuzzleHttp\Psr7\InflateStream" namespace="GuzzleHttp\Psr7" name="InflateStream"/>
    <class full="GuzzleHttp\Psr7\BufferStream" namespace="GuzzleHttp\Psr7" name="BufferStream"/>
    <class full="GuzzleHttp\Psr7\CachingStream" namespace="GuzzleHttp\Psr7" name="CachingStream"/>
  </implementors>
</interface>
