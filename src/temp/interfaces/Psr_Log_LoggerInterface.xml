<?xml version="1.0" encoding="UTF-8"?>
<interface xmlns="http://xml.phpdox.net/src" full="Psr\Log\LoggerInterface" namespace="Psr\Log" name="LoggerInterface" abstract="false" final="false" start="20" end="125">
  <file path="//var/www/html/vendor/psr/log/Psr/Log" file="LoggerInterface.php" realpath="/var/www/html/vendor/psr/log/Psr/Log/LoggerInterface.php" size="3114" time="2021-05-03T11:20:27+00:00" unixtime="1620040827" sha1="1dc16052b42b3a2bb926c8f565c8f7795e574275" relative="ar/www/html/vendor/psr/log/Psr/Log/LoggerInterface.php"/>
  <docblock>
    <description compact="Describes a logger instance.">The message MUST be a string or object implementing __toString().

The message MAY contain placeholders in the form: {foo} where foo
will be replaced by the context data in key "foo".

The context array can contain arbitrary data. The only assumption that
can be made by implementors is that if an Exception instance is given
to produce a stack trace, it MUST be in a key named "exception".

See https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md
for the full interface specification.</description>
  </docblock>
  <method name="emergency" start="30" end="30" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="System is unusable."/>
      <param type="string" variable="$message"/>
      <param type="array" variable="$context" of="object">
        <type full="Psr\Log\mixed" namespace="Psr\Log" name="mixed"/>
      </param>
      <return type="object">
        <type full="Psr\Log\void" namespace="Psr\Log" name="void"/>
      </return>
    </docblock>
    <parameter name="message" byreference="false" type="{unknown}"/>
    <parameter name="context" byreference="false" type="array" default=""/>
  </method>
  <method name="alert" start="43" end="43" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Action must be taken immediately.">Example: Entire website down, database unavailable, etc. This should
trigger the SMS alerts and wake you up.</description>
      <param type="string" variable="$message"/>
      <param type="array" variable="$context" of="object">
        <type full="Psr\Log\mixed" namespace="Psr\Log" name="mixed"/>
      </param>
      <return type="object">
        <type full="Psr\Log\void" namespace="Psr\Log" name="void"/>
      </return>
    </docblock>
    <parameter name="message" byreference="false" type="{unknown}"/>
    <parameter name="context" byreference="false" type="array" default=""/>
  </method>
  <method name="critical" start="55" end="55" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Critical conditions.">Example: Application component unavailable, unexpected exception.</description>
      <param type="string" variable="$message"/>
      <param type="array" variable="$context" of="object">
        <type full="Psr\Log\mixed" namespace="Psr\Log" name="mixed"/>
      </param>
      <return type="object">
        <type full="Psr\Log\void" namespace="Psr\Log" name="void"/>
      </return>
    </docblock>
    <parameter name="message" byreference="false" type="{unknown}"/>
    <parameter name="context" byreference="false" type="array" default=""/>
  </method>
  <method name="error" start="66" end="66" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Runtime errors that do not require immediate action but should typically be logged and monitored."/>
      <param type="string" variable="$message"/>
      <param type="array" variable="$context" of="object">
        <type full="Psr\Log\mixed" namespace="Psr\Log" name="mixed"/>
      </param>
      <return type="object">
        <type full="Psr\Log\void" namespace="Psr\Log" name="void"/>
      </return>
    </docblock>
    <parameter name="message" byreference="false" type="{unknown}"/>
    <parameter name="context" byreference="false" type="array" default=""/>
  </method>
  <method name="warning" start="79" end="79" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Exceptional occurrences that are not errors.">Example: Use of deprecated APIs, poor use of an API, undesirable things
that are not necessarily wrong.</description>
      <param type="string" variable="$message"/>
      <param type="array" variable="$context" of="object">
        <type full="Psr\Log\mixed" namespace="Psr\Log" name="mixed"/>
      </param>
      <return type="object">
        <type full="Psr\Log\void" namespace="Psr\Log" name="void"/>
      </return>
    </docblock>
    <parameter name="message" byreference="false" type="{unknown}"/>
    <parameter name="context" byreference="false" type="array" default=""/>
  </method>
  <method name="notice" start="89" end="89" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Normal but significant events."/>
      <param type="string" variable="$message"/>
      <param type="array" variable="$context" of="object">
        <type full="Psr\Log\mixed" namespace="Psr\Log" name="mixed"/>
      </param>
      <return type="object">
        <type full="Psr\Log\void" namespace="Psr\Log" name="void"/>
      </return>
    </docblock>
    <parameter name="message" byreference="false" type="{unknown}"/>
    <parameter name="context" byreference="false" type="array" default=""/>
  </method>
  <method name="info" start="101" end="101" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Interesting events.">Example: User logs in, SQL logs.</description>
      <param type="string" variable="$message"/>
      <param type="array" variable="$context" of="object">
        <type full="Psr\Log\mixed" namespace="Psr\Log" name="mixed"/>
      </param>
      <return type="object">
        <type full="Psr\Log\void" namespace="Psr\Log" name="void"/>
      </return>
    </docblock>
    <parameter name="message" byreference="false" type="{unknown}"/>
    <parameter name="context" byreference="false" type="array" default=""/>
  </method>
  <method name="debug" start="111" end="111" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Detailed debug information."/>
      <param type="string" variable="$message"/>
      <param type="array" variable="$context" of="object">
        <type full="Psr\Log\mixed" namespace="Psr\Log" name="mixed"/>
      </param>
      <return type="object">
        <type full="Psr\Log\void" namespace="Psr\Log" name="void"/>
      </return>
    </docblock>
    <parameter name="message" byreference="false" type="{unknown}"/>
    <parameter name="context" byreference="false" type="array" default=""/>
  </method>
  <method name="log" start="124" end="124" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Logs with an arbitrary level."/>
      <param type="mixed" variable="$level"/>
      <param type="string" variable="$message"/>
      <param type="array" variable="$context" of="object">
        <type full="Psr\Log\mixed" namespace="Psr\Log" name="mixed"/>
      </param>
      <return type="object">
        <type full="Psr\Log\void" namespace="Psr\Log" name="void"/>
      </return>
      <throws type="object">
        <type full="\Psr\Log\InvalidArgumentException" namespace="\Psr\Log" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="level" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}"/>
    <parameter name="context" byreference="false" type="array" default=""/>
  </method>
  <implementors>
    <class full="Psr\Log\NullLogger" namespace="Psr\Log" name="NullLogger"/>
    <class full="Psr\Log\Test\TestLogger" namespace="Psr\Log\Test" name="TestLogger"/>
    <class full="Psr\Log\AbstractLogger" namespace="Psr\Log" name="AbstractLogger"/>
    <class full="Fabfuel\Prophiler\Adapter\Psr\Log\Logger" namespace="Fabfuel\Prophiler\Adapter\Psr\Log" name="Logger"/>
    <class full="Symfony\Component\Console\Logger\ConsoleLogger" namespace="Symfony\Component\Console\Logger" name="ConsoleLogger"/>
  </implementors>
  <extenders>
    <extender full="Composer\IO\IOInterface" namespace="Composer\IO" name="IOInterface"/>
  </extenders>
</interface>
