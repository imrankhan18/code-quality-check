<?xml version="1.0" encoding="UTF-8"?>
<interface xmlns="http://xml.phpdox.net/src" full="Psr\Http\Message\RequestInterface" namespace="Psr\Http\Message" name="RequestInterface" abstract="false" final="false" start="24" end="129">
  <file path="//var/www/html/vendor/psr/http-message/src" file="RequestInterface.php" realpath="/var/www/html/vendor/psr/http-message/src/RequestInterface.php" size="4814" time="2016-08-06T14:39:51+00:00" unixtime="1470494391" sha1="bd020d9e1b339da190eac3c973ec06b11e995da6" relative="ar/www/html/vendor/psr/http-message/src/RequestInterface.php"/>
  <docblock>
    <description compact="Representation of an outgoing, client-side request.">Per the HTTP specification, this interface includes properties for
each of the following:

- Protocol version
- HTTP method
- URI
- Headers
- Message body

During construction, implementations MUST attempt to set the Host header from
a provided URI if no Host header is provided.

Requests are considered immutable; all methods that might change state MUST
be implemented such that they retain the internal state of the current
message and return an instance that contains the changed state.</description>
  </docblock>
  <extends full="Psr\Http\Message\MessageInterface" namespace="Psr\Http\Message" name="MessageInterface"/>
  <method name="getRequestTarget" start="42" end="42" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Retrieves the message's request target.">Retrieves the message's request-target either as it will appear (for
clients), as it appeared at request (for servers), or as it was
specified for the instance (see withRequestTarget()).

In most cases, this will be the origin-form of the composed URI,
unless a value was provided to the concrete implementation (see
withRequestTarget() below).

If no URI is available, and no request-target has been specifically
provided, this method MUST return the string "/".</description>
      <return type="string"/>
    </docblock>
  </method>
  <method name="withRequestTarget" start="61" end="61" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an instance with the specific request-target.">If the request needs a non-origin-form request-target — e.g., for
specifying an absolute-form, authority-form, or asterisk-form —
this method may be used to create an instance with the specified
request-target, verbatim.

This method MUST be implemented in such a way as to retain the
immutability of the message, and MUST return an instance that has the
changed request target.</description>
      <link value="http://tools.ietf.org/html/rfc7230#section-5.3 (for the various request-target forms allowed in request messages)"/>
      <param type="mixed" variable="$requestTarget"/>
      <return resolution="static" type="object">
        <type full="Psr\Http\Message\RequestInterface" namespace="Psr\Http\Message" name="RequestInterface"/>
      </return>
    </docblock>
    <parameter name="requestTarget" byreference="false" type="{unknown}"/>
  </method>
  <method name="getMethod" start="68" end="68" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Retrieves the HTTP method of the request."/>
      <return description="Returns the request method." type="string"/>
    </docblock>
  </method>
  <method name="withMethod" start="85" end="85" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an instance with the provided HTTP method.">While HTTP method names are typically all uppercase characters, HTTP
method names are case-sensitive and thus implementations SHOULD NOT
modify the given string.

This method MUST be implemented in such a way as to retain the
immutability of the message, and MUST return an instance that has the
changed request method.</description>
      <param description="Case-sensitive method." type="string" variable="$method"/>
      <return resolution="static" type="object">
        <type full="Psr\Http\Message\RequestInterface" namespace="Psr\Http\Message" name="RequestInterface"/>
      </return>
      <throws description="for invalid HTTP methods." type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="method" byreference="false" type="{unknown}"/>
  </method>
  <method name="getUri" start="96" end="96" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Retrieves the URI instance.">This method MUST return a UriInterface instance.</description>
      <link value="http://tools.ietf.org/html/rfc3986#section-4.3"/>
      <return description="Returns a UriInterface instance" type="object">representing the URI of the request.<type full="Psr\Http\Message\UriInterface" namespace="Psr\Http\Message" name="UriInterface"/></return>
    </docblock>
  </method>
  <method name="withUri" start="128" end="128" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns an instance with the provided URI.">This method MUST update the Host header of the returned request by
default if the URI contains a host component. If the URI does not
contain a host component, any pre-existing Host header MUST be carried
over to the returned request.

You can opt-in to preserving the original state of the Host header by
setting `$preserveHost` to `true`. When `$preserveHost` is set to
`true`, this method interacts with the Host header in the following ways:

- If the Host header is missing or empty, and the new URI contains
  a host component, this method MUST update the Host header in the returned
  request.
- If the Host header is missing or empty, and the new URI does not contain a
  host component, this method MUST NOT update the Host header in the returned
  request.
- If a Host header is present and non-empty, this method MUST NOT update
  the Host header in the returned request.

This method MUST be implemented in such a way as to retain the
immutability of the message, and MUST return an instance that has the
new UriInterface instance.</description>
      <link value="http://tools.ietf.org/html/rfc3986#section-4.3"/>
      <param description="New request URI to use." type="object" variable="$uri">
        <type full="Psr\Http\Message\UriInterface" namespace="Psr\Http\Message" name="UriInterface"/>
      </param>
      <param description="Preserve the original state of the Host header." type="object" variable="$preserveHost">
        <type full="Psr\Http\Message\bool" namespace="Psr\Http\Message" name="bool"/>
      </param>
      <return resolution="static" type="object">
        <type full="Psr\Http\Message\RequestInterface" namespace="Psr\Http\Message" name="RequestInterface"/>
      </return>
    </docblock>
    <parameter name="uri" byreference="false" type="object">
      <type full="Psr\Http\Message\UriInterface" namespace="Psr\Http\Message" name="UriInterface"/>
    </parameter>
    <parameter name="preserveHost" byreference="false" type="boolean" default="false"/>
  </method>
  <extenders>
    <extender full="Psr\Http\Message\ServerRequestInterface" namespace="Psr\Http\Message" name="ServerRequestInterface"/>
  </extenders>
  <parent full="Psr\Http\Message\MessageInterface" namespace="Psr\Http\Message" name="MessageInterface">
    <method name="getProtocolVersion" start="26" end="26" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Retrieves the HTTP protocol version as a string.">The string MUST contain only the HTTP version number (e.g., "1.1", "1.0").</description>
        <return description="HTTP protocol version." type="string"/>
      </docblock>
    </method>
    <method name="withProtocolVersion" start="41" end="41" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an instance with the specified HTTP protocol version.">The version string MUST contain only the HTTP version number (e.g.,
"1.1", "1.0").

This method MUST be implemented in such a way as to retain the
immutability of the message, and MUST return an instance that has the
new protocol version.</description>
        <param description="HTTP protocol version" type="string" variable="$version"/>
        <return resolution="static" type="object">
          <type full="Psr\Http\Message\RequestInterface" namespace="Psr\Http\Message" name="RequestInterface"/>
        </return>
      </docblock>
      <parameter name="version" byreference="false" type="{unknown}"/>
    </method>
    <method name="getHeaders" start="68" end="68" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Retrieves all message header values.">The keys represent the header name as it will be sent over the wire, and
each value is an array of strings associated with the header.

    // Represent the headers as a string
    foreach ($message-&gt;getHeaders() as $name =&gt; $values) {
        echo $name . ": " . implode(", ", $values);
    }

    // Emit headers iteratively:
    foreach ($message-&gt;getHeaders() as $name =&gt; $values) {
        foreach ($values as $value) {
            header(sprintf('%s: %s', $name, $value), false);
        }
    }

While header names are not case-sensitive, getHeaders() will preserve the
exact case in which headers were originally specified.</description>
        <return description="Returns an associative array of the message's headers. Each" type="array" of="object">key MUST be a header name, and each value MUST be an array of strings
    for that header.<type full="Psr\Http\Message\string[]" namespace="Psr\Http\Message" name="string[]"/></return>
      </docblock>
    </method>
    <method name="hasHeader" start="78" end="78" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Checks if a header exists by the given case-insensitive name."/>
        <param description="Case-insensitive header field name." type="string" variable="$name"/>
        <return description="Returns true if any header names match the given header" type="object">name using a case-insensitive string comparison. Returns false if
    no matching header name is found in the message.<type full="Psr\Http\Message\bool" namespace="Psr\Http\Message" name="bool"/></return>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
    <method name="getHeader" start="94" end="94" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Retrieves a message header value by the given case-insensitive name.">This method returns an array of all the header values of the given
case-insensitive header name.

If the header does not appear in the message, this method MUST return an
empty array.</description>
        <param description="Case-insensitive header field name." type="string" variable="$name"/>
        <return description="An array of string values as provided for the given" type="array" of="object">header. If the header does not appear in the message, this method MUST
   return an empty array.<type full="Psr\Http\Message\string" namespace="Psr\Http\Message" name="string"/></return>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
    <method name="getHeaderLine" start="115" end="115" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Retrieves a comma-separated string of the values for a single header.">This method returns all of the header values of the given
case-insensitive header name as a string concatenated together using
a comma.

NOTE: Not all header values may be appropriately represented using
comma concatenation. For such headers, use getHeader() instead
and supply your own delimiter when concatenating.

If the header does not appear in the message, this method MUST return
an empty string.</description>
        <param description="Case-insensitive header field name." type="string" variable="$name"/>
        <return description="A string of values as provided for the given header" type="string">concatenated together using a comma. If the header does not appear in
   the message, this method MUST return an empty string.</return>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
    <method name="withHeader" start="132" end="132" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an instance with the provided value replacing the specified header.">While header names are case-insensitive, the casing of the header will
be preserved by this function, and returned from getHeaders().

This method MUST be implemented in such a way as to retain the
immutability of the message, and MUST return an instance that has the
new and/or updated header and value.</description>
        <param description="Case-insensitive header field name." type="string" variable="$name"/>
        <param description="Header value(s)." type="array" variable="$value" of="object">
          <type full="Psr\Http\Message\string|string" namespace="Psr\Http\Message" name="string|string"/>
        </param>
        <return resolution="static" type="object">
          <type full="Psr\Http\Message\RequestInterface" namespace="Psr\Http\Message" name="RequestInterface"/>
        </return>
        <throws description="for invalid header names or values." type="object">
          <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
        </throws>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="withAddedHeader" start="150" end="150" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an instance with the specified header appended with the given value.">Existing values for the specified header will be maintained. The new
value(s) will be appended to the existing list. If the header did not
exist previously, it will be added.

This method MUST be implemented in such a way as to retain the
immutability of the message, and MUST return an instance that has the
new header and/or value.</description>
        <param description="Case-insensitive header field name to add." type="string" variable="$name"/>
        <param description="Header value(s)." type="array" variable="$value" of="object">
          <type full="Psr\Http\Message\string|string" namespace="Psr\Http\Message" name="string|string"/>
        </param>
        <return resolution="static" type="object">
          <type full="Psr\Http\Message\RequestInterface" namespace="Psr\Http\Message" name="RequestInterface"/>
        </return>
        <throws description="for invalid header names or values." type="object">
          <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
        </throws>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="withoutHeader" start="164" end="164" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an instance without the specified header.">Header resolution MUST be done without case-sensitivity.

This method MUST be implemented in such a way as to retain the
immutability of the message, and MUST return an instance that removes
the named header.</description>
        <param description="Case-insensitive header field name to remove." type="string" variable="$name"/>
        <return resolution="static" type="object">
          <type full="Psr\Http\Message\RequestInterface" namespace="Psr\Http\Message" name="RequestInterface"/>
        </return>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
    <method name="getBody" start="171" end="171" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Gets the body of the message."/>
        <return description="Returns the body as a stream." type="object">
          <type full="Psr\Http\Message\StreamInterface" namespace="Psr\Http\Message" name="StreamInterface"/>
        </return>
      </docblock>
    </method>
    <method name="withBody" start="186" end="186" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an instance with the specified message body.">The body MUST be a StreamInterface object.

This method MUST be implemented in such a way as to retain the
immutability of the message, and MUST return a new instance that has the
new body stream.</description>
        <param description="Body." type="object" variable="$body">
          <type full="Psr\Http\Message\StreamInterface" namespace="Psr\Http\Message" name="StreamInterface"/>
        </param>
        <return resolution="static" type="object">
          <type full="Psr\Http\Message\RequestInterface" namespace="Psr\Http\Message" name="RequestInterface"/>
        </return>
        <throws description="When the body is not valid." type="object">
          <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
        </throws>
      </docblock>
      <parameter name="body" byreference="false" type="object">
        <type full="Psr\Http\Message\StreamInterface" namespace="Psr\Http\Message" name="StreamInterface"/>
      </parameter>
    </method>
  </parent>
  <implementors>
    <class full="GuzzleHttp\Psr7\Request" namespace="GuzzleHttp\Psr7" name="Request"/>
    <class full="GuzzleHttp\Psr7\ServerRequest" namespace="GuzzleHttp\Psr7" name="ServerRequest"/>
  </implementors>
</interface>
