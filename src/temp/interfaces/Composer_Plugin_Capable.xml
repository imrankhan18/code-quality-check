<?xml version="1.0" encoding="UTF-8"?>
<interface xmlns="http://xml.phpdox.net/src" full="Composer\Plugin\Capable" namespace="Composer\Plugin" name="Capable" abstract="false" final="false" start="22" end="43">
  <file path="//var/www/html/vendor/composer/composer/src/Composer/Plugin" file="Capable.php" realpath="/var/www/html/vendor/composer/composer/src/Composer/Plugin/Capable.php" size="1204" time="2022-04-13T14:43:00+00:00" unixtime="1649860980" sha1="550b5a5a70f9e6b986380b3c296004a5b0bec2a9" relative="ar/www/html/vendor/composer/composer/src/Composer/Plugin/Capable.php"/>
  <docblock>
    <description compact="Plugins which need to expose various implementations of the Composer Plugin Capabilities must have their declared Plugin class implementing this interface."/>
    <api/>
  </docblock>
  <method name="getCapabilities" start="42" end="42" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Method by which a Plugin announces its API implementations, through an array with a special structure.">The key must be a string, representing a fully qualified class/interface name
which Composer Plugin API exposes.
The value must be a string as well, representing the fully qualified class name
of the implementing class.</description>
      <tutorial value="return array( 'Composer\Plugin\Capability\CommandProvider' =&gt; 'My\CommandProvider', 'Composer\Plugin\Capability\Validator'       =&gt; 'My\Validator', );"/>
      <return type="array" of="object">
        <type full="Composer\Plugin\string" namespace="Composer\Plugin" name="string"/>
      </return>
    </docblock>
  </method>
</interface>
