<?xml version="1.0" encoding="UTF-8"?>
<interface xmlns="http://xml.phpdox.net/src" full="Psr\Http\Message\ResponseInterface" namespace="Psr\Http\Message" name="ResponseInterface" abstract="false" final="false" start="20" end="68">
  <file path="//var/www/html/vendor/psr/http-message/src" file="ResponseInterface.php" realpath="/var/www/html/vendor/psr/http-message/src/ResponseInterface.php" size="2591" time="2016-08-06T14:39:51+00:00" unixtime="1470494391" sha1="00593c5ed88c411142374b8477ec403c14d91e73" relative="ar/www/html/vendor/psr/http-message/src/ResponseInterface.php"/>
  <docblock>
    <description compact="Representation of an outgoing, server-side response.">Per the HTTP specification, this interface includes properties for
each of the following:

- Protocol version
- Status code and reason phrase
- Headers
- Message body

Responses are considered immutable; all methods that might change state MUST
be implemented such that they retain the internal state of the current
message and return an instance that contains the changed state.</description>
  </docblock>
  <extends full="Psr\Http\Message\MessageInterface" namespace="Psr\Http\Message" name="MessageInterface"/>
  <method name="getStatusCode" start="30" end="30" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the response status code.">The status code is a 3-digit integer result code of the server's attempt
to understand and satisfy the request.</description>
      <return description="Status code." type="int"/>
    </docblock>
  </method>
  <method name="withStatus" start="52" end="52" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an instance with the specified status code and, optionally, reason phrase.">If no reason phrase is specified, implementations MAY choose to default
to the RFC 7231 or IANA recommended reason phrase for the response's
status code.

This method MUST be implemented in such a way as to retain the
immutability of the message, and MUST return an instance that has the
updated status and reason phrase.</description>
      <link value="http://tools.ietf.org/html/rfc7231#section-6"/>
      <link value="http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml"/>
      <param description="The 3-digit integer result code to set." type="int" variable="$code"/>
      <param description="The reason phrase to use with the" type="string" variable="$reasonPhrase">provided status code; if none is provided, implementations MAY
    use the defaults as suggested in the HTTP specification.</param>
      <return resolution="static" type="object">
        <type full="Psr\Http\Message\ResponseInterface" namespace="Psr\Http\Message" name="ResponseInterface"/>
      </return>
      <throws description="For invalid status code arguments." type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="code" byreference="false" type="{unknown}"/>
    <parameter name="reasonPhrase" byreference="false" type="string" default="''"/>
  </method>
  <method name="getReasonPhrase" start="67" end="67" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the response reason phrase associated with the status code.">Because a reason phrase is not a required element in a response
status line, the reason phrase value MAY be null. Implementations MAY
choose to return the default RFC 7231 recommended reason phrase (or those
listed in the IANA HTTP Status Code Registry) for the response's
status code.</description>
      <link value="http://tools.ietf.org/html/rfc7231#section-6"/>
      <link value="http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml"/>
      <return description="Reason phrase; must return an empty string if none present." type="string"/>
    </docblock>
  </method>
  <parent full="Psr\Http\Message\MessageInterface" namespace="Psr\Http\Message" name="MessageInterface">
    <method name="getProtocolVersion" start="26" end="26" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Retrieves the HTTP protocol version as a string.">The string MUST contain only the HTTP version number (e.g., "1.1", "1.0").</description>
        <return description="HTTP protocol version." type="string"/>
      </docblock>
    </method>
    <method name="withProtocolVersion" start="41" end="41" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an instance with the specified HTTP protocol version.">The version string MUST contain only the HTTP version number (e.g.,
"1.1", "1.0").

This method MUST be implemented in such a way as to retain the
immutability of the message, and MUST return an instance that has the
new protocol version.</description>
        <param description="HTTP protocol version" type="string" variable="$version"/>
        <return resolution="static" type="object">
          <type full="Psr\Http\Message\ResponseInterface" namespace="Psr\Http\Message" name="ResponseInterface"/>
        </return>
      </docblock>
      <parameter name="version" byreference="false" type="{unknown}"/>
    </method>
    <method name="getHeaders" start="68" end="68" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Retrieves all message header values.">The keys represent the header name as it will be sent over the wire, and
each value is an array of strings associated with the header.

    // Represent the headers as a string
    foreach ($message-&gt;getHeaders() as $name =&gt; $values) {
        echo $name . ": " . implode(", ", $values);
    }

    // Emit headers iteratively:
    foreach ($message-&gt;getHeaders() as $name =&gt; $values) {
        foreach ($values as $value) {
            header(sprintf('%s: %s', $name, $value), false);
        }
    }

While header names are not case-sensitive, getHeaders() will preserve the
exact case in which headers were originally specified.</description>
        <return description="Returns an associative array of the message's headers. Each" type="array" of="object">key MUST be a header name, and each value MUST be an array of strings
    for that header.<type full="Psr\Http\Message\string[]" namespace="Psr\Http\Message" name="string[]"/></return>
      </docblock>
    </method>
    <method name="hasHeader" start="78" end="78" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Checks if a header exists by the given case-insensitive name."/>
        <param description="Case-insensitive header field name." type="string" variable="$name"/>
        <return description="Returns true if any header names match the given header" type="object">name using a case-insensitive string comparison. Returns false if
    no matching header name is found in the message.<type full="Psr\Http\Message\bool" namespace="Psr\Http\Message" name="bool"/></return>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
    <method name="getHeader" start="94" end="94" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Retrieves a message header value by the given case-insensitive name.">This method returns an array of all the header values of the given
case-insensitive header name.

If the header does not appear in the message, this method MUST return an
empty array.</description>
        <param description="Case-insensitive header field name." type="string" variable="$name"/>
        <return description="An array of string values as provided for the given" type="array" of="object">header. If the header does not appear in the message, this method MUST
   return an empty array.<type full="Psr\Http\Message\string" namespace="Psr\Http\Message" name="string"/></return>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
    <method name="getHeaderLine" start="115" end="115" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Retrieves a comma-separated string of the values for a single header.">This method returns all of the header values of the given
case-insensitive header name as a string concatenated together using
a comma.

NOTE: Not all header values may be appropriately represented using
comma concatenation. For such headers, use getHeader() instead
and supply your own delimiter when concatenating.

If the header does not appear in the message, this method MUST return
an empty string.</description>
        <param description="Case-insensitive header field name." type="string" variable="$name"/>
        <return description="A string of values as provided for the given header" type="string">concatenated together using a comma. If the header does not appear in
   the message, this method MUST return an empty string.</return>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
    <method name="withHeader" start="132" end="132" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an instance with the provided value replacing the specified header.">While header names are case-insensitive, the casing of the header will
be preserved by this function, and returned from getHeaders().

This method MUST be implemented in such a way as to retain the
immutability of the message, and MUST return an instance that has the
new and/or updated header and value.</description>
        <param description="Case-insensitive header field name." type="string" variable="$name"/>
        <param description="Header value(s)." type="array" variable="$value" of="object">
          <type full="Psr\Http\Message\string|string" namespace="Psr\Http\Message" name="string|string"/>
        </param>
        <return resolution="static" type="object">
          <type full="Psr\Http\Message\ResponseInterface" namespace="Psr\Http\Message" name="ResponseInterface"/>
        </return>
        <throws description="for invalid header names or values." type="object">
          <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
        </throws>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="withAddedHeader" start="150" end="150" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an instance with the specified header appended with the given value.">Existing values for the specified header will be maintained. The new
value(s) will be appended to the existing list. If the header did not
exist previously, it will be added.

This method MUST be implemented in such a way as to retain the
immutability of the message, and MUST return an instance that has the
new header and/or value.</description>
        <param description="Case-insensitive header field name to add." type="string" variable="$name"/>
        <param description="Header value(s)." type="array" variable="$value" of="object">
          <type full="Psr\Http\Message\string|string" namespace="Psr\Http\Message" name="string|string"/>
        </param>
        <return resolution="static" type="object">
          <type full="Psr\Http\Message\ResponseInterface" namespace="Psr\Http\Message" name="ResponseInterface"/>
        </return>
        <throws description="for invalid header names or values." type="object">
          <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
        </throws>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="withoutHeader" start="164" end="164" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an instance without the specified header.">Header resolution MUST be done without case-sensitivity.

This method MUST be implemented in such a way as to retain the
immutability of the message, and MUST return an instance that removes
the named header.</description>
        <param description="Case-insensitive header field name to remove." type="string" variable="$name"/>
        <return resolution="static" type="object">
          <type full="Psr\Http\Message\ResponseInterface" namespace="Psr\Http\Message" name="ResponseInterface"/>
        </return>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
    <method name="getBody" start="171" end="171" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Gets the body of the message."/>
        <return description="Returns the body as a stream." type="object">
          <type full="Psr\Http\Message\StreamInterface" namespace="Psr\Http\Message" name="StreamInterface"/>
        </return>
      </docblock>
    </method>
    <method name="withBody" start="186" end="186" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an instance with the specified message body.">The body MUST be a StreamInterface object.

This method MUST be implemented in such a way as to retain the
immutability of the message, and MUST return a new instance that has the
new body stream.</description>
        <param description="Body." type="object" variable="$body">
          <type full="Psr\Http\Message\StreamInterface" namespace="Psr\Http\Message" name="StreamInterface"/>
        </param>
        <return resolution="static" type="object">
          <type full="Psr\Http\Message\ResponseInterface" namespace="Psr\Http\Message" name="ResponseInterface"/>
        </return>
        <throws description="When the body is not valid." type="object">
          <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
        </throws>
      </docblock>
      <parameter name="body" byreference="false" type="object">
        <type full="Psr\Http\Message\StreamInterface" namespace="Psr\Http\Message" name="StreamInterface"/>
      </parameter>
    </method>
  </parent>
  <implementors>
    <class full="GuzzleHttp\Psr7\Response" namespace="GuzzleHttp\Psr7" name="Response"/>
  </implementors>
</interface>
