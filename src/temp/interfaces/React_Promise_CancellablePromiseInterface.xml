<?xml version="1.0" encoding="UTF-8"?>
<interface xmlns="http://xml.phpdox.net/src" full="React\Promise\CancellablePromiseInterface" namespace="React\Promise" name="CancellablePromiseInterface" abstract="false" final="false" start="5" end="17">
  <file path="//var/www/html/vendor/react/promise/src" file="CancellablePromiseInterface.php" realpath="/var/www/html/vendor/react/promise/src/CancellablePromiseInterface.php" size="438" time="2022-02-11T10:27:51+00:00" unixtime="1644575271" sha1="b69717e69fb0248cf3e88aa9da017526bac7d155" relative="ar/www/html/vendor/react/promise/src/CancellablePromiseInterface.php"/>
  <extends full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
  <method name="cancel" start="16" end="16" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="The `cancel()` method notifies the creator of the promise that there is no further interest in the results of the operation.">Once a promise is settled (either fulfilled or rejected), calling `cancel()` on
a promise has no effect.</description>
      <return type="object">
        <type full="React\Promise\void" namespace="React\Promise" name="void"/>
      </return>
    </docblock>
  </method>
  <implementors>
    <class full="React\Promise\Promise" namespace="React\Promise" name="Promise"/>
    <class full="React\Promise\FulfilledPromise" namespace="React\Promise" name="FulfilledPromise"/>
    <class full="React\Promise\RejectedPromise" namespace="React\Promise" name="RejectedPromise"/>
    <class full="React\Promise\LazyPromise" namespace="React\Promise" name="LazyPromise"/>
  </implementors>
  <parent full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface">
    <method name="then" start="40" end="40" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Transforms a promise's value by applying a function to the promise's fulfillment or rejection value. Returns a new promise for the transformed result.">The `then()` method registers new fulfilled and rejection handlers with a promise
(all parameters are optional):

 * `$onFulfilled` will be invoked once the promise is fulfilled and passed
    the result as the first argument.
 * `$onRejected` will be invoked once the promise is rejected and passed the
    reason as the first argument.
 * `$onProgress` (deprecated) will be invoked whenever the producer of the promise
    triggers progress notifications and passed a single argument (whatever it
    wants) to indicate progress.

It returns a new promise that will fulfill with the return value of either
`$onFulfilled` or `$onRejected`, whichever is called, or will reject with
the thrown exception if either throws.

A promise makes the following guarantees about handlers registered in
the same call to `then()`:

 1. Only one of `$onFulfilled` or `$onRejected` will be called,
     never both.
 2. `$onFulfilled` and `$onRejected` will never be called more
     than once.
 3. `$onProgress` (deprecated) may be called multiple times.</description>
        <param type="object" variable="$onFulfilled">
          <type full="React\Promise\callable|null" namespace="React\Promise" name="callable|null"/>
        </param>
        <param type="object" variable="$onRejected">
          <type full="React\Promise\callable|null" namespace="React\Promise" name="callable|null"/>
        </param>
        <param description="This argument is deprecated and should not be used anymore." type="object" variable="$onProgress">
          <type full="React\Promise\callable|null" namespace="React\Promise" name="callable|null"/>
        </param>
        <return type="object">
          <type full="React\Promise\PromiseInterface" namespace="React\Promise" name="PromiseInterface"/>
        </return>
      </docblock>
      <parameter name="onFulfilled" byreference="false" type="callable" default="NULL"/>
      <parameter name="onRejected" byreference="false" type="callable" default="NULL"/>
      <parameter name="onProgress" byreference="false" type="callable" default="NULL"/>
    </method>
  </parent>
</interface>
