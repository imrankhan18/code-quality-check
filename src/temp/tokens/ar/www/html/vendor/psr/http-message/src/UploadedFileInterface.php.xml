<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="//var/www/html/vendor/psr/http-message/src" file="UploadedFileInterface.php" realpath="/var/www/html/vendor/psr/http-message/src/UploadedFileInterface.php" size="4689" time="2016-08-06T14:39:51+00:00" unixtime="1470494391" sha1="16d515f00721f693057b64b3a0c4123167a7acff" relative="ar/www/html/vendor/psr/http-message/src/UploadedFileInterface.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2"/>
  <line no="3">
    <token name="T_NAMESPACE">namespace</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Psr</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Http</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Message</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="4"/>
  <line no="5">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="6">
    <token name="T_DOC_COMMENT"> * Value object representing a file uploaded through an HTTP request.</token>
  </line>
  <line no="7">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="8">
    <token name="T_DOC_COMMENT"> * Instances of this interface are considered immutable; all methods that</token>
  </line>
  <line no="9">
    <token name="T_DOC_COMMENT"> * might change state MUST be implemented such that they retain the internal</token>
  </line>
  <line no="10">
    <token name="T_DOC_COMMENT"> * state of the current instance and return an instance that contains the</token>
  </line>
  <line no="11">
    <token name="T_DOC_COMMENT"> * changed state.</token>
  </line>
  <line no="12">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="13">
    <token name="T_INTERFACE">interface</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">UploadedFileInterface</token>
  </line>
  <line no="14">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="15">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="16">
    <token name="T_DOC_COMMENT">     * Retrieve a stream representing the uploaded file.</token>
  </line>
  <line no="17">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="18">
    <token name="T_DOC_COMMENT">     * This method MUST return a StreamInterface instance, representing the</token>
  </line>
  <line no="19">
    <token name="T_DOC_COMMENT">     * uploaded file. The purpose of this method is to allow utilizing native PHP</token>
  </line>
  <line no="20">
    <token name="T_DOC_COMMENT">     * stream functionality to manipulate the file upload, such as</token>
  </line>
  <line no="21">
    <token name="T_DOC_COMMENT">     * stream_copy_to_stream() (though the result will need to be decorated in a</token>
  </line>
  <line no="22">
    <token name="T_DOC_COMMENT">     * native PHP stream wrapper to work with such functions).</token>
  </line>
  <line no="23">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="24">
    <token name="T_DOC_COMMENT">     * If the moveTo() method has been called previously, this method MUST raise</token>
  </line>
  <line no="25">
    <token name="T_DOC_COMMENT">     * an exception.</token>
  </line>
  <line no="26">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="27">
    <token name="T_DOC_COMMENT">     * @return StreamInterface Stream representation of the uploaded file.</token>
  </line>
  <line no="28">
    <token name="T_DOC_COMMENT">     * @throws \RuntimeException in cases when no stream is available or can be</token>
  </line>
  <line no="29">
    <token name="T_DOC_COMMENT">     *     created.</token>
  </line>
  <line no="30">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="31">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getStream</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="32"/>
  <line no="33">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="34">
    <token name="T_DOC_COMMENT">     * Move the uploaded file to a new location.</token>
  </line>
  <line no="35">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="36">
    <token name="T_DOC_COMMENT">     * Use this method as an alternative to move_uploaded_file(). This method is</token>
  </line>
  <line no="37">
    <token name="T_DOC_COMMENT">     * guaranteed to work in both SAPI and non-SAPI environments.</token>
  </line>
  <line no="38">
    <token name="T_DOC_COMMENT">     * Implementations must determine which environment they are in, and use the</token>
  </line>
  <line no="39">
    <token name="T_DOC_COMMENT">     * appropriate method (move_uploaded_file(), rename(), or a stream</token>
  </line>
  <line no="40">
    <token name="T_DOC_COMMENT">     * operation) to perform the operation.</token>
  </line>
  <line no="41">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="42">
    <token name="T_DOC_COMMENT">     * $targetPath may be an absolute path, or a relative path. If it is a</token>
  </line>
  <line no="43">
    <token name="T_DOC_COMMENT">     * relative path, resolution should be the same as used by PHP's rename()</token>
  </line>
  <line no="44">
    <token name="T_DOC_COMMENT">     * function.</token>
  </line>
  <line no="45">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="46">
    <token name="T_DOC_COMMENT">     * The original file or stream MUST be removed on completion.</token>
  </line>
  <line no="47">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="48">
    <token name="T_DOC_COMMENT">     * If this method is called more than once, any subsequent calls MUST raise</token>
  </line>
  <line no="49">
    <token name="T_DOC_COMMENT">     * an exception.</token>
  </line>
  <line no="50">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="51">
    <token name="T_DOC_COMMENT">     * When used in an SAPI environment where $_FILES is populated, when writing</token>
  </line>
  <line no="52">
    <token name="T_DOC_COMMENT">     * files via moveTo(), is_uploaded_file() and move_uploaded_file() SHOULD be</token>
  </line>
  <line no="53">
    <token name="T_DOC_COMMENT">     * used to ensure permissions and upload status are verified correctly.</token>
  </line>
  <line no="54">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="55">
    <token name="T_DOC_COMMENT">     * If you wish to move to a stream, use getStream(), as SAPI operations</token>
  </line>
  <line no="56">
    <token name="T_DOC_COMMENT">     * cannot guarantee writing to stream destinations.</token>
  </line>
  <line no="57">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="58">
    <token name="T_DOC_COMMENT">     * @see http://php.net/is_uploaded_file</token>
  </line>
  <line no="59">
    <token name="T_DOC_COMMENT">     * @see http://php.net/move_uploaded_file</token>
  </line>
  <line no="60">
    <token name="T_DOC_COMMENT">     * @param string $targetPath Path to which to move the uploaded file.</token>
  </line>
  <line no="61">
    <token name="T_DOC_COMMENT">     * @throws \InvalidArgumentException if the $targetPath specified is invalid.</token>
  </line>
  <line no="62">
    <token name="T_DOC_COMMENT">     * @throws \RuntimeException on any error during the move operation, or on</token>
  </line>
  <line no="63">
    <token name="T_DOC_COMMENT">     *     the second or subsequent call to the method.</token>
  </line>
  <line no="64">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="65">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">moveTo</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$targetPath</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="66">
    <token name="T_WHITESPACE">    </token>
  </line>
  <line no="67">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="68">
    <token name="T_DOC_COMMENT">     * Retrieve the file size.</token>
  </line>
  <line no="69">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="70">
    <token name="T_DOC_COMMENT">     * Implementations SHOULD return the value stored in the "size" key of</token>
  </line>
  <line no="71">
    <token name="T_DOC_COMMENT">     * the file in the $_FILES array if available, as PHP calculates this based</token>
  </line>
  <line no="72">
    <token name="T_DOC_COMMENT">     * on the actual size transmitted.</token>
  </line>
  <line no="73">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="74">
    <token name="T_DOC_COMMENT">     * @return int|null The file size in bytes or null if unknown.</token>
  </line>
  <line no="75">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="76">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getSize</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="77">
    <token name="T_WHITESPACE">    </token>
  </line>
  <line no="78">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="79">
    <token name="T_DOC_COMMENT">     * Retrieve the error associated with the uploaded file.</token>
  </line>
  <line no="80">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="81">
    <token name="T_DOC_COMMENT">     * The return value MUST be one of PHP's UPLOAD_ERR_XXX constants.</token>
  </line>
  <line no="82">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="83">
    <token name="T_DOC_COMMENT">     * If the file was uploaded successfully, this method MUST return</token>
  </line>
  <line no="84">
    <token name="T_DOC_COMMENT">     * UPLOAD_ERR_OK.</token>
  </line>
  <line no="85">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="86">
    <token name="T_DOC_COMMENT">     * Implementations SHOULD return the value stored in the "error" key of</token>
  </line>
  <line no="87">
    <token name="T_DOC_COMMENT">     * the file in the $_FILES array.</token>
  </line>
  <line no="88">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="89">
    <token name="T_DOC_COMMENT">     * @see http://php.net/manual/en/features.file-upload.errors.php</token>
  </line>
  <line no="90">
    <token name="T_DOC_COMMENT">     * @return int One of PHP's UPLOAD_ERR_XXX constants.</token>
  </line>
  <line no="91">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="92">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getError</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="93">
    <token name="T_WHITESPACE">    </token>
  </line>
  <line no="94">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="95">
    <token name="T_DOC_COMMENT">     * Retrieve the filename sent by the client.</token>
  </line>
  <line no="96">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="97">
    <token name="T_DOC_COMMENT">     * Do not trust the value returned by this method. A client could send</token>
  </line>
  <line no="98">
    <token name="T_DOC_COMMENT">     * a malicious filename with the intention to corrupt or hack your</token>
  </line>
  <line no="99">
    <token name="T_DOC_COMMENT">     * application.</token>
  </line>
  <line no="100">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="101">
    <token name="T_DOC_COMMENT">     * Implementations SHOULD return the value stored in the "name" key of</token>
  </line>
  <line no="102">
    <token name="T_DOC_COMMENT">     * the file in the $_FILES array.</token>
  </line>
  <line no="103">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="104">
    <token name="T_DOC_COMMENT">     * @return string|null The filename sent by the client or null if none</token>
  </line>
  <line no="105">
    <token name="T_DOC_COMMENT">     *     was provided.</token>
  </line>
  <line no="106">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="107">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getClientFilename</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="108">
    <token name="T_WHITESPACE">    </token>
  </line>
  <line no="109">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="110">
    <token name="T_DOC_COMMENT">     * Retrieve the media type sent by the client.</token>
  </line>
  <line no="111">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="112">
    <token name="T_DOC_COMMENT">     * Do not trust the value returned by this method. A client could send</token>
  </line>
  <line no="113">
    <token name="T_DOC_COMMENT">     * a malicious media type with the intention to corrupt or hack your</token>
  </line>
  <line no="114">
    <token name="T_DOC_COMMENT">     * application.</token>
  </line>
  <line no="115">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="116">
    <token name="T_DOC_COMMENT">     * Implementations SHOULD return the value stored in the "type" key of</token>
  </line>
  <line no="117">
    <token name="T_DOC_COMMENT">     * the file in the $_FILES array.</token>
  </line>
  <line no="118">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="119">
    <token name="T_DOC_COMMENT">     * @return string|null The media type sent by the client or null if none</token>
  </line>
  <line no="120">
    <token name="T_DOC_COMMENT">     *     was provided.</token>
  </line>
  <line no="121">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="122">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getClientMediaType</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="123">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="124"/>
</source>
