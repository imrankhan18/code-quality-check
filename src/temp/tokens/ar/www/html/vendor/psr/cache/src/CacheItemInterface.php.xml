<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="//var/www/html/vendor/psr/cache/src" file="CacheItemInterface.php" realpath="/var/www/html/vendor/psr/cache/src/CacheItemInterface.php" size="3772" time="2016-08-06T20:24:11+00:00" unixtime="1470515051" sha1="658ff5f8f8eb715264eb16d96c6824c7e3025b29" relative="ar/www/html/vendor/psr/cache/src/CacheItemInterface.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2"/>
  <line no="3">
    <token name="T_NAMESPACE">namespace</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Psr</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Cache</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="4"/>
  <line no="5">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="6">
    <token name="T_DOC_COMMENT"> * CacheItemInterface defines an interface for interacting with objects inside a cache.</token>
  </line>
  <line no="7">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="8">
    <token name="T_DOC_COMMENT"> * Each Item object MUST be associated with a specific key, which can be set</token>
  </line>
  <line no="9">
    <token name="T_DOC_COMMENT"> * according to the implementing system and is typically passed by the</token>
  </line>
  <line no="10">
    <token name="T_DOC_COMMENT"> * Cache\CacheItemPoolInterface object.</token>
  </line>
  <line no="11">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="12">
    <token name="T_DOC_COMMENT"> * The Cache\CacheItemInterface object encapsulates the storage and retrieval of</token>
  </line>
  <line no="13">
    <token name="T_DOC_COMMENT"> * cache items. Each Cache\CacheItemInterface is generated by a</token>
  </line>
  <line no="14">
    <token name="T_DOC_COMMENT"> * Cache\CacheItemPoolInterface object, which is responsible for any required</token>
  </line>
  <line no="15">
    <token name="T_DOC_COMMENT"> * setup as well as associating the object with a unique Key.</token>
  </line>
  <line no="16">
    <token name="T_DOC_COMMENT"> * Cache\CacheItemInterface objects MUST be able to store and retrieve any type</token>
  </line>
  <line no="17">
    <token name="T_DOC_COMMENT"> * of PHP value defined in the Data section of the specification.</token>
  </line>
  <line no="18">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="19">
    <token name="T_DOC_COMMENT"> * Calling Libraries MUST NOT instantiate Item objects themselves. They may only</token>
  </line>
  <line no="20">
    <token name="T_DOC_COMMENT"> * be requested from a Pool object via the getItem() method.  Calling Libraries</token>
  </line>
  <line no="21">
    <token name="T_DOC_COMMENT"> * SHOULD NOT assume that an Item created by one Implementing Library is</token>
  </line>
  <line no="22">
    <token name="T_DOC_COMMENT"> * compatible with a Pool from another Implementing Library.</token>
  </line>
  <line no="23">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="24">
    <token name="T_INTERFACE">interface</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">CacheItemInterface</token>
  </line>
  <line no="25">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="26">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="27">
    <token name="T_DOC_COMMENT">     * Returns the key for the current cache item.</token>
  </line>
  <line no="28">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="29">
    <token name="T_DOC_COMMENT">     * The key is loaded by the Implementing Library, but should be available to</token>
  </line>
  <line no="30">
    <token name="T_DOC_COMMENT">     * the higher level callers when needed.</token>
  </line>
  <line no="31">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="32">
    <token name="T_DOC_COMMENT">     * @return string</token>
  </line>
  <line no="33">
    <token name="T_DOC_COMMENT">     *   The key string for this cache item.</token>
  </line>
  <line no="34">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="35">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getKey</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="36"/>
  <line no="37">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="38">
    <token name="T_DOC_COMMENT">     * Retrieves the value of the item from the cache associated with this object's key.</token>
  </line>
  <line no="39">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="40">
    <token name="T_DOC_COMMENT">     * The value returned must be identical to the value originally stored by set().</token>
  </line>
  <line no="41">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="42">
    <token name="T_DOC_COMMENT">     * If isHit() returns false, this method MUST return null. Note that null</token>
  </line>
  <line no="43">
    <token name="T_DOC_COMMENT">     * is a legitimate cached value, so the isHit() method SHOULD be used to</token>
  </line>
  <line no="44">
    <token name="T_DOC_COMMENT">     * differentiate between "null value was found" and "no value was found."</token>
  </line>
  <line no="45">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="46">
    <token name="T_DOC_COMMENT">     * @return mixed</token>
  </line>
  <line no="47">
    <token name="T_DOC_COMMENT">     *   The value corresponding to this cache item's key, or null if not found.</token>
  </line>
  <line no="48">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="49">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">get</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="50"/>
  <line no="51">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="52">
    <token name="T_DOC_COMMENT">     * Confirms if the cache item lookup resulted in a cache hit.</token>
  </line>
  <line no="53">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="54">
    <token name="T_DOC_COMMENT">     * Note: This method MUST NOT have a race condition between calling isHit()</token>
  </line>
  <line no="55">
    <token name="T_DOC_COMMENT">     * and calling get().</token>
  </line>
  <line no="56">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="57">
    <token name="T_DOC_COMMENT">     * @return bool</token>
  </line>
  <line no="58">
    <token name="T_DOC_COMMENT">     *   True if the request resulted in a cache hit. False otherwise.</token>
  </line>
  <line no="59">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="60">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">isHit</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="61"/>
  <line no="62">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="63">
    <token name="T_DOC_COMMENT">     * Sets the value represented by this cache item.</token>
  </line>
  <line no="64">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="65">
    <token name="T_DOC_COMMENT">     * The $value argument may be any item that can be serialized by PHP,</token>
  </line>
  <line no="66">
    <token name="T_DOC_COMMENT">     * although the method of serialization is left up to the Implementing</token>
  </line>
  <line no="67">
    <token name="T_DOC_COMMENT">     * Library.</token>
  </line>
  <line no="68">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="69">
    <token name="T_DOC_COMMENT">     * @param mixed $value</token>
  </line>
  <line no="70">
    <token name="T_DOC_COMMENT">     *   The serializable value to be stored.</token>
  </line>
  <line no="71">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="72">
    <token name="T_DOC_COMMENT">     * @return static</token>
  </line>
  <line no="73">
    <token name="T_DOC_COMMENT">     *   The invoked object.</token>
  </line>
  <line no="74">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="75">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">set</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="76"/>
  <line no="77">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="78">
    <token name="T_DOC_COMMENT">     * Sets the expiration time for this cache item.</token>
  </line>
  <line no="79">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="80">
    <token name="T_DOC_COMMENT">     * @param \DateTimeInterface|null $expiration</token>
  </line>
  <line no="81">
    <token name="T_DOC_COMMENT">     *   The point in time after which the item MUST be considered expired.</token>
  </line>
  <line no="82">
    <token name="T_DOC_COMMENT">     *   If null is passed explicitly, a default value MAY be used. If none is set,</token>
  </line>
  <line no="83">
    <token name="T_DOC_COMMENT">     *   the value should be stored permanently or for as long as the</token>
  </line>
  <line no="84">
    <token name="T_DOC_COMMENT">     *   implementation allows.</token>
  </line>
  <line no="85">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="86">
    <token name="T_DOC_COMMENT">     * @return static</token>
  </line>
  <line no="87">
    <token name="T_DOC_COMMENT">     *   The called object.</token>
  </line>
  <line no="88">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="89">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">expiresAt</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$expiration</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="90"/>
  <line no="91">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="92">
    <token name="T_DOC_COMMENT">     * Sets the expiration time for this cache item.</token>
  </line>
  <line no="93">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="94">
    <token name="T_DOC_COMMENT">     * @param int|\DateInterval|null $time</token>
  </line>
  <line no="95">
    <token name="T_DOC_COMMENT">     *   The period of time from the present after which the item MUST be considered</token>
  </line>
  <line no="96">
    <token name="T_DOC_COMMENT">     *   expired. An integer parameter is understood to be the time in seconds until</token>
  </line>
  <line no="97">
    <token name="T_DOC_COMMENT">     *   expiration. If null is passed explicitly, a default value MAY be used.</token>
  </line>
  <line no="98">
    <token name="T_DOC_COMMENT">     *   If none is set, the value should be stored permanently or for as long as the</token>
  </line>
  <line no="99">
    <token name="T_DOC_COMMENT">     *   implementation allows.</token>
  </line>
  <line no="100">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="101">
    <token name="T_DOC_COMMENT">     * @return static</token>
  </line>
  <line no="102">
    <token name="T_DOC_COMMENT">     *   The called object.</token>
  </line>
  <line no="103">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="104">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">expiresAfter</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$time</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="105">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="106"/>
</source>
