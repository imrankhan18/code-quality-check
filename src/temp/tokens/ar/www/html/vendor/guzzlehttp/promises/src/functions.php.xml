<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="//var/www/html/vendor/guzzlehttp/promises/src" file="functions.php" realpath="/var/www/html/vendor/guzzlehttp/promises/src/functions.php" size="10128" time="2021-10-22T20:56:57+00:00" unixtime="1634936217" sha1="3458d05be46fa5dbf6dcf3fda06ebcb637b05cc3" relative="ar/www/html/vendor/guzzlehttp/promises/src/functions.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2"/>
  <line no="3">
    <token name="T_NAMESPACE">namespace</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">GuzzleHttp</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Promise</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="4"/>
  <line no="5">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="6">
    <token name="T_DOC_COMMENT"> * Get the global task queue used for promise resolution.</token>
  </line>
  <line no="7">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="8">
    <token name="T_DOC_COMMENT"> * This task queue MUST be run in an event loop in order for promises to be</token>
  </line>
  <line no="9">
    <token name="T_DOC_COMMENT"> * settled asynchronously. It will be automatically run when synchronously</token>
  </line>
  <line no="10">
    <token name="T_DOC_COMMENT"> * waiting on a promise.</token>
  </line>
  <line no="11">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="12">
    <token name="T_DOC_COMMENT"> * &lt;code&gt;</token>
  </line>
  <line no="13">
    <token name="T_DOC_COMMENT"> * while ($eventLoop-&gt;isRunning()) {</token>
  </line>
  <line no="14">
    <token name="T_DOC_COMMENT"> *     GuzzleHttp\Promise\queue()-&gt;run();</token>
  </line>
  <line no="15">
    <token name="T_DOC_COMMENT"> * }</token>
  </line>
  <line no="16">
    <token name="T_DOC_COMMENT"> * &lt;/code&gt;</token>
  </line>
  <line no="17">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="18">
    <token name="T_DOC_COMMENT"> * @param TaskQueueInterface $assign Optionally specify a new queue instance.</token>
  </line>
  <line no="19">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="20">
    <token name="T_DOC_COMMENT"> * @return TaskQueueInterface</token>
  </line>
  <line no="21">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="22">
    <token name="T_DOC_COMMENT"> * @deprecated queue will be removed in guzzlehttp/promises:2.0. Use Utils::queue instead.</token>
  </line>
  <line no="23">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="24">
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">queue</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">TaskQueueInterface</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$assign</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="25">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="26">
    <token name="T_WHITESPACE">    </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Utils</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">queue</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$assign</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="27">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="28"/>
  <line no="29">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="30">
    <token name="T_DOC_COMMENT"> * Adds a function to run in the task queue when it is next `run()` and returns</token>
  </line>
  <line no="31">
    <token name="T_DOC_COMMENT"> * a promise that is fulfilled or rejected with the result.</token>
  </line>
  <line no="32">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="33">
    <token name="T_DOC_COMMENT"> * @param callable $task Task function to run.</token>
  </line>
  <line no="34">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="35">
    <token name="T_DOC_COMMENT"> * @return PromiseInterface</token>
  </line>
  <line no="36">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="37">
    <token name="T_DOC_COMMENT"> * @deprecated task will be removed in guzzlehttp/promises:2.0. Use Utils::task instead.</token>
  </line>
  <line no="38">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="39">
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">task</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CALLABLE">callable</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$task</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="40">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="41">
    <token name="T_WHITESPACE">    </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Utils</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">task</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$task</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="42">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="43"/>
  <line no="44">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="45">
    <token name="T_DOC_COMMENT"> * Creates a promise for a value if the value is not a promise.</token>
  </line>
  <line no="46">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="47">
    <token name="T_DOC_COMMENT"> * @param mixed $value Promise or value.</token>
  </line>
  <line no="48">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="49">
    <token name="T_DOC_COMMENT"> * @return PromiseInterface</token>
  </line>
  <line no="50">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="51">
    <token name="T_DOC_COMMENT"> * @deprecated promise_for will be removed in guzzlehttp/promises:2.0. Use Create::promiseFor instead.</token>
  </line>
  <line no="52">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="53">
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">promise_for</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="54">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="55">
    <token name="T_WHITESPACE">    </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Create</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">promiseFor</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="56">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="57"/>
  <line no="58">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="59">
    <token name="T_DOC_COMMENT"> * Creates a rejected promise for a reason if the reason is not a promise. If</token>
  </line>
  <line no="60">
    <token name="T_DOC_COMMENT"> * the provided reason is a promise, then it is returned as-is.</token>
  </line>
  <line no="61">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="62">
    <token name="T_DOC_COMMENT"> * @param mixed $reason Promise or reason.</token>
  </line>
  <line no="63">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="64">
    <token name="T_DOC_COMMENT"> * @return PromiseInterface</token>
  </line>
  <line no="65">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="66">
    <token name="T_DOC_COMMENT"> * @deprecated rejection_for will be removed in guzzlehttp/promises:2.0. Use Create::rejectionFor instead.</token>
  </line>
  <line no="67">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="68">
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">rejection_for</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$reason</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="69">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="70">
    <token name="T_WHITESPACE">    </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Create</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">rejectionFor</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$reason</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="71">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="72"/>
  <line no="73">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="74">
    <token name="T_DOC_COMMENT"> * Create an exception for a rejected promise value.</token>
  </line>
  <line no="75">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="76">
    <token name="T_DOC_COMMENT"> * @param mixed $reason</token>
  </line>
  <line no="77">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="78">
    <token name="T_DOC_COMMENT"> * @return \Exception|\Throwable</token>
  </line>
  <line no="79">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="80">
    <token name="T_DOC_COMMENT"> * @deprecated exception_for will be removed in guzzlehttp/promises:2.0. Use Create::exceptionFor instead.</token>
  </line>
  <line no="81">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="82">
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">exception_for</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$reason</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="83">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="84">
    <token name="T_WHITESPACE">    </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Create</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">exceptionFor</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$reason</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="85">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="86"/>
  <line no="87">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="88">
    <token name="T_DOC_COMMENT"> * Returns an iterator for the given value.</token>
  </line>
  <line no="89">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="90">
    <token name="T_DOC_COMMENT"> * @param mixed $value</token>
  </line>
  <line no="91">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="92">
    <token name="T_DOC_COMMENT"> * @return \Iterator</token>
  </line>
  <line no="93">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="94">
    <token name="T_DOC_COMMENT"> * @deprecated iter_for will be removed in guzzlehttp/promises:2.0. Use Create::iterFor instead.</token>
  </line>
  <line no="95">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="96">
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">iter_for</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="97">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="98">
    <token name="T_WHITESPACE">    </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Create</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">iterFor</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="99">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="100"/>
  <line no="101">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="102">
    <token name="T_DOC_COMMENT"> * Synchronously waits on a promise to resolve and returns an inspection state</token>
  </line>
  <line no="103">
    <token name="T_DOC_COMMENT"> * array.</token>
  </line>
  <line no="104">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="105">
    <token name="T_DOC_COMMENT"> * Returns a state associative array containing a "state" key mapping to a</token>
  </line>
  <line no="106">
    <token name="T_DOC_COMMENT"> * valid promise state. If the state of the promise is "fulfilled", the array</token>
  </line>
  <line no="107">
    <token name="T_DOC_COMMENT"> * will contain a "value" key mapping to the fulfilled value of the promise. If</token>
  </line>
  <line no="108">
    <token name="T_DOC_COMMENT"> * the promise is rejected, the array will contain a "reason" key mapping to</token>
  </line>
  <line no="109">
    <token name="T_DOC_COMMENT"> * the rejection reason of the promise.</token>
  </line>
  <line no="110">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="111">
    <token name="T_DOC_COMMENT"> * @param PromiseInterface $promise Promise or value.</token>
  </line>
  <line no="112">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="113">
    <token name="T_DOC_COMMENT"> * @return array</token>
  </line>
  <line no="114">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="115">
    <token name="T_DOC_COMMENT"> * @deprecated inspect will be removed in guzzlehttp/promises:2.0. Use Utils::inspect instead.</token>
  </line>
  <line no="116">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="117">
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">inspect</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">PromiseInterface</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$promise</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="118">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="119">
    <token name="T_WHITESPACE">    </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Utils</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">inspect</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$promise</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="120">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="121"/>
  <line no="122">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="123">
    <token name="T_DOC_COMMENT"> * Waits on all of the provided promises, but does not unwrap rejected promises</token>
  </line>
  <line no="124">
    <token name="T_DOC_COMMENT"> * as thrown exception.</token>
  </line>
  <line no="125">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="126">
    <token name="T_DOC_COMMENT"> * Returns an array of inspection state arrays.</token>
  </line>
  <line no="127">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="128">
    <token name="T_DOC_COMMENT"> * @see inspect for the inspection state array format.</token>
  </line>
  <line no="129">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="130">
    <token name="T_DOC_COMMENT"> * @param PromiseInterface[] $promises Traversable of promises to wait upon.</token>
  </line>
  <line no="131">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="132">
    <token name="T_DOC_COMMENT"> * @return array</token>
  </line>
  <line no="133">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="134">
    <token name="T_DOC_COMMENT"> * @deprecated inspect will be removed in guzzlehttp/promises:2.0. Use Utils::inspectAll instead.</token>
  </line>
  <line no="135">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="136">
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">inspect_all</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$promises</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="137">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="138">
    <token name="T_WHITESPACE">    </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Utils</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">inspectAll</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$promises</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="139">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="140"/>
  <line no="141">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="142">
    <token name="T_DOC_COMMENT"> * Waits on all of the provided promises and returns the fulfilled values.</token>
  </line>
  <line no="143">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="144">
    <token name="T_DOC_COMMENT"> * Returns an array that contains the value of each promise (in the same order</token>
  </line>
  <line no="145">
    <token name="T_DOC_COMMENT"> * the promises were provided). An exception is thrown if any of the promises</token>
  </line>
  <line no="146">
    <token name="T_DOC_COMMENT"> * are rejected.</token>
  </line>
  <line no="147">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="148">
    <token name="T_DOC_COMMENT"> * @param iterable&lt;PromiseInterface&gt; $promises Iterable of PromiseInterface objects to wait on.</token>
  </line>
  <line no="149">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="150">
    <token name="T_DOC_COMMENT"> * @return array</token>
  </line>
  <line no="151">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="152">
    <token name="T_DOC_COMMENT"> * @throws \Exception on error</token>
  </line>
  <line no="153">
    <token name="T_DOC_COMMENT"> * @throws \Throwable on error in PHP &gt;=7</token>
  </line>
  <line no="154">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="155">
    <token name="T_DOC_COMMENT"> * @deprecated unwrap will be removed in guzzlehttp/promises:2.0. Use Utils::unwrap instead.</token>
  </line>
  <line no="156">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="157">
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">unwrap</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$promises</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="158">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="159">
    <token name="T_WHITESPACE">    </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Utils</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">unwrap</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$promises</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="160">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="161"/>
  <line no="162">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="163">
    <token name="T_DOC_COMMENT"> * Given an array of promises, return a promise that is fulfilled when all the</token>
  </line>
  <line no="164">
    <token name="T_DOC_COMMENT"> * items in the array are fulfilled.</token>
  </line>
  <line no="165">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="166">
    <token name="T_DOC_COMMENT"> * The promise's fulfillment value is an array with fulfillment values at</token>
  </line>
  <line no="167">
    <token name="T_DOC_COMMENT"> * respective positions to the original array. If any promise in the array</token>
  </line>
  <line no="168">
    <token name="T_DOC_COMMENT"> * rejects, the returned promise is rejected with the rejection reason.</token>
  </line>
  <line no="169">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="170">
    <token name="T_DOC_COMMENT"> * @param mixed $promises  Promises or values.</token>
  </line>
  <line no="171">
    <token name="T_DOC_COMMENT"> * @param bool  $recursive If true, resolves new promises that might have been added to the stack during its own resolution.</token>
  </line>
  <line no="172">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="173">
    <token name="T_DOC_COMMENT"> * @return PromiseInterface</token>
  </line>
  <line no="174">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="175">
    <token name="T_DOC_COMMENT"> * @deprecated all will be removed in guzzlehttp/promises:2.0. Use Utils::all instead.</token>
  </line>
  <line no="176">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="177">
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">all</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$promises</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$recursive</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="178">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="179">
    <token name="T_WHITESPACE">    </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Utils</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">all</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$promises</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$recursive</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="180">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="181"/>
  <line no="182">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="183">
    <token name="T_DOC_COMMENT"> * Initiate a competitive race between multiple promises or values (values will</token>
  </line>
  <line no="184">
    <token name="T_DOC_COMMENT"> * become immediately fulfilled promises).</token>
  </line>
  <line no="185">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="186">
    <token name="T_DOC_COMMENT"> * When count amount of promises have been fulfilled, the returned promise is</token>
  </line>
  <line no="187">
    <token name="T_DOC_COMMENT"> * fulfilled with an array that contains the fulfillment values of the winners</token>
  </line>
  <line no="188">
    <token name="T_DOC_COMMENT"> * in order of resolution.</token>
  </line>
  <line no="189">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="190">
    <token name="T_DOC_COMMENT"> * This promise is rejected with a {@see AggregateException} if the number of</token>
  </line>
  <line no="191">
    <token name="T_DOC_COMMENT"> * fulfilled promises is less than the desired $count.</token>
  </line>
  <line no="192">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="193">
    <token name="T_DOC_COMMENT"> * @param int   $count    Total number of promises.</token>
  </line>
  <line no="194">
    <token name="T_DOC_COMMENT"> * @param mixed $promises Promises or values.</token>
  </line>
  <line no="195">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="196">
    <token name="T_DOC_COMMENT"> * @return PromiseInterface</token>
  </line>
  <line no="197">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="198">
    <token name="T_DOC_COMMENT"> * @deprecated some will be removed in guzzlehttp/promises:2.0. Use Utils::some instead.</token>
  </line>
  <line no="199">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="200">
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">some</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$promises</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="201">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="202">
    <token name="T_WHITESPACE">    </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Utils</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">some</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$count</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$promises</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="203">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="204"/>
  <line no="205">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="206">
    <token name="T_DOC_COMMENT"> * Like some(), with 1 as count. However, if the promise fulfills, the</token>
  </line>
  <line no="207">
    <token name="T_DOC_COMMENT"> * fulfillment value is not an array of 1 but the value directly.</token>
  </line>
  <line no="208">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="209">
    <token name="T_DOC_COMMENT"> * @param mixed $promises Promises or values.</token>
  </line>
  <line no="210">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="211">
    <token name="T_DOC_COMMENT"> * @return PromiseInterface</token>
  </line>
  <line no="212">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="213">
    <token name="T_DOC_COMMENT"> * @deprecated any will be removed in guzzlehttp/promises:2.0. Use Utils::any instead.</token>
  </line>
  <line no="214">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="215">
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">any</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$promises</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="216">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="217">
    <token name="T_WHITESPACE">    </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Utils</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">any</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$promises</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="218">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="219"/>
  <line no="220">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="221">
    <token name="T_DOC_COMMENT"> * Returns a promise that is fulfilled when all of the provided promises have</token>
  </line>
  <line no="222">
    <token name="T_DOC_COMMENT"> * been fulfilled or rejected.</token>
  </line>
  <line no="223">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="224">
    <token name="T_DOC_COMMENT"> * The returned promise is fulfilled with an array of inspection state arrays.</token>
  </line>
  <line no="225">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="226">
    <token name="T_DOC_COMMENT"> * @see inspect for the inspection state array format.</token>
  </line>
  <line no="227">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="228">
    <token name="T_DOC_COMMENT"> * @param mixed $promises Promises or values.</token>
  </line>
  <line no="229">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="230">
    <token name="T_DOC_COMMENT"> * @return PromiseInterface</token>
  </line>
  <line no="231">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="232">
    <token name="T_DOC_COMMENT"> * @deprecated settle will be removed in guzzlehttp/promises:2.0. Use Utils::settle instead.</token>
  </line>
  <line no="233">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="234">
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">settle</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$promises</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="235">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="236">
    <token name="T_WHITESPACE">    </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Utils</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">settle</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$promises</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="237">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="238"/>
  <line no="239">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="240">
    <token name="T_DOC_COMMENT"> * Given an iterator that yields promises or values, returns a promise that is</token>
  </line>
  <line no="241">
    <token name="T_DOC_COMMENT"> * fulfilled with a null value when the iterator has been consumed or the</token>
  </line>
  <line no="242">
    <token name="T_DOC_COMMENT"> * aggregate promise has been fulfilled or rejected.</token>
  </line>
  <line no="243">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="244">
    <token name="T_DOC_COMMENT"> * $onFulfilled is a function that accepts the fulfilled value, iterator index,</token>
  </line>
  <line no="245">
    <token name="T_DOC_COMMENT"> * and the aggregate promise. The callback can invoke any necessary side</token>
  </line>
  <line no="246">
    <token name="T_DOC_COMMENT"> * effects and choose to resolve or reject the aggregate if needed.</token>
  </line>
  <line no="247">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="248">
    <token name="T_DOC_COMMENT"> * $onRejected is a function that accepts the rejection reason, iterator index,</token>
  </line>
  <line no="249">
    <token name="T_DOC_COMMENT"> * and the aggregate promise. The callback can invoke any necessary side</token>
  </line>
  <line no="250">
    <token name="T_DOC_COMMENT"> * effects and choose to resolve or reject the aggregate if needed.</token>
  </line>
  <line no="251">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="252">
    <token name="T_DOC_COMMENT"> * @param mixed    $iterable    Iterator or array to iterate over.</token>
  </line>
  <line no="253">
    <token name="T_DOC_COMMENT"> * @param callable $onFulfilled</token>
  </line>
  <line no="254">
    <token name="T_DOC_COMMENT"> * @param callable $onRejected</token>
  </line>
  <line no="255">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="256">
    <token name="T_DOC_COMMENT"> * @return PromiseInterface</token>
  </line>
  <line no="257">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="258">
    <token name="T_DOC_COMMENT"> * @deprecated each will be removed in guzzlehttp/promises:2.0. Use Each::of instead.</token>
  </line>
  <line no="259">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="260">
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">each</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="261">
    <token name="T_WHITESPACE">    </token>
    <token name="T_VARIABLE">$iterable</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="262">
    <token name="T_WHITESPACE">    </token>
    <token name="T_CALLABLE">callable</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$onFulfilled</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="263">
    <token name="T_WHITESPACE">    </token>
    <token name="T_CALLABLE">callable</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$onRejected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
  </line>
  <line no="264">
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="265">
    <token name="T_WHITESPACE">    </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Each</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">of</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$iterable</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$onFulfilled</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$onRejected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="266">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="267"/>
  <line no="268">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="269">
    <token name="T_DOC_COMMENT"> * Like each, but only allows a certain number of outstanding promises at any</token>
  </line>
  <line no="270">
    <token name="T_DOC_COMMENT"> * given time.</token>
  </line>
  <line no="271">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="272">
    <token name="T_DOC_COMMENT"> * $concurrency may be an integer or a function that accepts the number of</token>
  </line>
  <line no="273">
    <token name="T_DOC_COMMENT"> * pending promises and returns a numeric concurrency limit value to allow for</token>
  </line>
  <line no="274">
    <token name="T_DOC_COMMENT"> * dynamic a concurrency size.</token>
  </line>
  <line no="275">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="276">
    <token name="T_DOC_COMMENT"> * @param mixed        $iterable</token>
  </line>
  <line no="277">
    <token name="T_DOC_COMMENT"> * @param int|callable $concurrency</token>
  </line>
  <line no="278">
    <token name="T_DOC_COMMENT"> * @param callable     $onFulfilled</token>
  </line>
  <line no="279">
    <token name="T_DOC_COMMENT"> * @param callable     $onRejected</token>
  </line>
  <line no="280">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="281">
    <token name="T_DOC_COMMENT"> * @return PromiseInterface</token>
  </line>
  <line no="282">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="283">
    <token name="T_DOC_COMMENT"> * @deprecated each_limit will be removed in guzzlehttp/promises:2.0. Use Each::ofLimit instead.</token>
  </line>
  <line no="284">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="285">
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">each_limit</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="286">
    <token name="T_WHITESPACE">    </token>
    <token name="T_VARIABLE">$iterable</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="287">
    <token name="T_WHITESPACE">    </token>
    <token name="T_VARIABLE">$concurrency</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="288">
    <token name="T_WHITESPACE">    </token>
    <token name="T_CALLABLE">callable</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$onFulfilled</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="289">
    <token name="T_WHITESPACE">    </token>
    <token name="T_CALLABLE">callable</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$onRejected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
  </line>
  <line no="290">
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="291">
    <token name="T_WHITESPACE">    </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Each</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">ofLimit</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$iterable</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$concurrency</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$onFulfilled</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$onRejected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="292">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="293"/>
  <line no="294">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="295">
    <token name="T_DOC_COMMENT"> * Like each_limit, but ensures that no promise in the given $iterable argument</token>
  </line>
  <line no="296">
    <token name="T_DOC_COMMENT"> * is rejected. If any promise is rejected, then the aggregate promise is</token>
  </line>
  <line no="297">
    <token name="T_DOC_COMMENT"> * rejected with the encountered rejection.</token>
  </line>
  <line no="298">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="299">
    <token name="T_DOC_COMMENT"> * @param mixed        $iterable</token>
  </line>
  <line no="300">
    <token name="T_DOC_COMMENT"> * @param int|callable $concurrency</token>
  </line>
  <line no="301">
    <token name="T_DOC_COMMENT"> * @param callable     $onFulfilled</token>
  </line>
  <line no="302">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="303">
    <token name="T_DOC_COMMENT"> * @return PromiseInterface</token>
  </line>
  <line no="304">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="305">
    <token name="T_DOC_COMMENT"> * @deprecated each_limit_all will be removed in guzzlehttp/promises:2.0. Use Each::ofLimitAll instead.</token>
  </line>
  <line no="306">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="307">
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">each_limit_all</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="308">
    <token name="T_WHITESPACE">    </token>
    <token name="T_VARIABLE">$iterable</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="309">
    <token name="T_WHITESPACE">    </token>
    <token name="T_VARIABLE">$concurrency</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="310">
    <token name="T_WHITESPACE">    </token>
    <token name="T_CALLABLE">callable</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$onFulfilled</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
  </line>
  <line no="311">
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="312">
    <token name="T_WHITESPACE">    </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Each</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">ofLimitAll</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$iterable</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$concurrency</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$onFulfilled</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="313">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="314"/>
  <line no="315">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="316">
    <token name="T_DOC_COMMENT"> * Returns true if a promise is fulfilled.</token>
  </line>
  <line no="317">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="318">
    <token name="T_DOC_COMMENT"> * @return bool</token>
  </line>
  <line no="319">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="320">
    <token name="T_DOC_COMMENT"> * @deprecated is_fulfilled will be removed in guzzlehttp/promises:2.0. Use Is::fulfilled instead.</token>
  </line>
  <line no="321">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="322">
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">is_fulfilled</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">PromiseInterface</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$promise</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="323">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="324">
    <token name="T_WHITESPACE">    </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Is</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">fulfilled</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$promise</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="325">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="326"/>
  <line no="327">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="328">
    <token name="T_DOC_COMMENT"> * Returns true if a promise is rejected.</token>
  </line>
  <line no="329">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="330">
    <token name="T_DOC_COMMENT"> * @return bool</token>
  </line>
  <line no="331">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="332">
    <token name="T_DOC_COMMENT"> * @deprecated is_rejected will be removed in guzzlehttp/promises:2.0. Use Is::rejected instead.</token>
  </line>
  <line no="333">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="334">
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">is_rejected</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">PromiseInterface</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$promise</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="335">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="336">
    <token name="T_WHITESPACE">    </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Is</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">rejected</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$promise</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="337">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="338"/>
  <line no="339">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="340">
    <token name="T_DOC_COMMENT"> * Returns true if a promise is fulfilled or rejected.</token>
  </line>
  <line no="341">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="342">
    <token name="T_DOC_COMMENT"> * @return bool</token>
  </line>
  <line no="343">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="344">
    <token name="T_DOC_COMMENT"> * @deprecated is_settled will be removed in guzzlehttp/promises:2.0. Use Is::settled instead.</token>
  </line>
  <line no="345">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="346">
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">is_settled</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">PromiseInterface</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$promise</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="347">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="348">
    <token name="T_WHITESPACE">    </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Is</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">settled</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$promise</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="349">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="350"/>
  <line no="351">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="352">
    <token name="T_DOC_COMMENT"> * Create a new coroutine.</token>
  </line>
  <line no="353">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="354">
    <token name="T_DOC_COMMENT"> * @see Coroutine</token>
  </line>
  <line no="355">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="356">
    <token name="T_DOC_COMMENT"> * @return PromiseInterface</token>
  </line>
  <line no="357">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="358">
    <token name="T_DOC_COMMENT"> * @deprecated coroutine will be removed in guzzlehttp/promises:2.0. Use Coroutine::of instead.</token>
  </line>
  <line no="359">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="360">
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">coroutine</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CALLABLE">callable</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$generatorFn</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="361">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="362">
    <token name="T_WHITESPACE">    </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Coroutine</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">of</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$generatorFn</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="363">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="364"/>
</source>
