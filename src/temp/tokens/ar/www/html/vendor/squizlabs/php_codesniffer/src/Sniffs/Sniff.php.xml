<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="//var/www/html/vendor/squizlabs/php_codesniffer/src/Sniffs" file="Sniff.php" realpath="/var/www/html/vendor/squizlabs/php_codesniffer/src/Sniffs/Sniff.php" size="2797" time="2021-12-12T21:44:58+00:00" unixtime="1639345498" sha1="494e2f86513520d882080af0ae9bbf1f34317e03" relative="ar/www/html/vendor/squizlabs/php_codesniffer/src/Sniffs/Sniff.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="3">
    <token name="T_DOC_COMMENT"> * Represents a PHP_CodeSniffer sniff for sniffing coding standards.</token>
  </line>
  <line no="4">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="5">
    <token name="T_DOC_COMMENT"> * A sniff registers what token types it wishes to listen for, then, when</token>
  </line>
  <line no="6">
    <token name="T_DOC_COMMENT"> * PHP_CodeSniffer encounters that token, the sniff is invoked and passed</token>
  </line>
  <line no="7">
    <token name="T_DOC_COMMENT"> * information about where the token was found in the stack, and the</token>
  </line>
  <line no="8">
    <token name="T_DOC_COMMENT"> * PHP_CodeSniffer file in which the token was found.</token>
  </line>
  <line no="9">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="10">
    <token name="T_DOC_COMMENT"> * @author    Greg Sherwood &lt;gsherwood@squiz.net&gt;</token>
  </line>
  <line no="11">
    <token name="T_DOC_COMMENT"> * @copyright 2006-2015 Squiz Pty Ltd (ABN 77 084 670 600)</token>
  </line>
  <line no="12">
    <token name="T_DOC_COMMENT"> * @license   https://github.com/squizlabs/PHP_CodeSniffer/blob/master/licence.txt BSD Licence</token>
  </line>
  <line no="13">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="14"/>
  <line no="15">
    <token name="T_NAMESPACE">namespace</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHP_CodeSniffer</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Sniffs</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="16"/>
  <line no="17">
    <token name="T_USE">use</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PHP_CodeSniffer</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Files</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">File</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="18"/>
  <line no="19">
    <token name="T_INTERFACE">interface</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Sniff</token>
  </line>
  <line no="20">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="21"/>
  <line no="22"/>
  <line no="23">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="24">
    <token name="T_DOC_COMMENT">     * Registers the tokens that this sniff wants to listen for.</token>
  </line>
  <line no="25">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="26">
    <token name="T_DOC_COMMENT">     * An example return value for a sniff that wants to listen for whitespace</token>
  </line>
  <line no="27">
    <token name="T_DOC_COMMENT">     * and any comments would be:</token>
  </line>
  <line no="28">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="29">
    <token name="T_DOC_COMMENT">     * &lt;code&gt;</token>
  </line>
  <line no="30">
    <token name="T_DOC_COMMENT">     *    return array(</token>
  </line>
  <line no="31">
    <token name="T_DOC_COMMENT">     *            T_WHITESPACE,</token>
  </line>
  <line no="32">
    <token name="T_DOC_COMMENT">     *            T_DOC_COMMENT,</token>
  </line>
  <line no="33">
    <token name="T_DOC_COMMENT">     *            T_COMMENT,</token>
  </line>
  <line no="34">
    <token name="T_DOC_COMMENT">     *           );</token>
  </line>
  <line no="35">
    <token name="T_DOC_COMMENT">     * &lt;/code&gt;</token>
  </line>
  <line no="36">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="37">
    <token name="T_DOC_COMMENT">     * @return mixed[]</token>
  </line>
  <line no="38">
    <token name="T_DOC_COMMENT">     * @see    Tokens.php</token>
  </line>
  <line no="39">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="40">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">register</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="41"/>
  <line no="42"/>
  <line no="43">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="44">
    <token name="T_DOC_COMMENT">     * Called when one of the token types that this sniff is listening for</token>
  </line>
  <line no="45">
    <token name="T_DOC_COMMENT">     * is found.</token>
  </line>
  <line no="46">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="47">
    <token name="T_DOC_COMMENT">     * The stackPtr variable indicates where in the stack the token was found.</token>
  </line>
  <line no="48">
    <token name="T_DOC_COMMENT">     * A sniff can acquire information this token, along with all the other</token>
  </line>
  <line no="49">
    <token name="T_DOC_COMMENT">     * tokens within the stack by first acquiring the token stack:</token>
  </line>
  <line no="50">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="51">
    <token name="T_DOC_COMMENT">     * &lt;code&gt;</token>
  </line>
  <line no="52">
    <token name="T_DOC_COMMENT">     *    $tokens = $phpcsFile-&gt;getTokens();</token>
  </line>
  <line no="53">
    <token name="T_DOC_COMMENT">     *    echo 'Encountered a '.$tokens[$stackPtr]['type'].' token';</token>
  </line>
  <line no="54">
    <token name="T_DOC_COMMENT">     *    echo 'token information: ';</token>
  </line>
  <line no="55">
    <token name="T_DOC_COMMENT">     *    print_r($tokens[$stackPtr]);</token>
  </line>
  <line no="56">
    <token name="T_DOC_COMMENT">     * &lt;/code&gt;</token>
  </line>
  <line no="57">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="58">
    <token name="T_DOC_COMMENT">     * If the sniff discovers an anomaly in the code, they can raise an error</token>
  </line>
  <line no="59">
    <token name="T_DOC_COMMENT">     * by calling addError() on the \PHP_CodeSniffer\Files\File object, specifying an error</token>
  </line>
  <line no="60">
    <token name="T_DOC_COMMENT">     * message and the position of the offending token:</token>
  </line>
  <line no="61">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="62">
    <token name="T_DOC_COMMENT">     * &lt;code&gt;</token>
  </line>
  <line no="63">
    <token name="T_DOC_COMMENT">     *    $phpcsFile-&gt;addError('Encountered an error', $stackPtr);</token>
  </line>
  <line no="64">
    <token name="T_DOC_COMMENT">     * &lt;/code&gt;</token>
  </line>
  <line no="65">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="66">
    <token name="T_DOC_COMMENT">     * @param \PHP_CodeSniffer\Files\File $phpcsFile The PHP_CodeSniffer file where the</token>
  </line>
  <line no="67">
    <token name="T_DOC_COMMENT">     *                                               token was found.</token>
  </line>
  <line no="68">
    <token name="T_DOC_COMMENT">     * @param int                         $stackPtr  The position in the PHP_CodeSniffer</token>
  </line>
  <line no="69">
    <token name="T_DOC_COMMENT">     *                                               file's token stack where the token</token>
  </line>
  <line no="70">
    <token name="T_DOC_COMMENT">     *                                               was found.</token>
  </line>
  <line no="71">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="72">
    <token name="T_DOC_COMMENT">     * @return void|int Optionally returns a stack pointer. The sniff will not be</token>
  </line>
  <line no="73">
    <token name="T_DOC_COMMENT">     *                  called again on the current file until the returned stack</token>
  </line>
  <line no="74">
    <token name="T_DOC_COMMENT">     *                  pointer is reached. Return (count($tokens) + 1) to skip</token>
  </line>
  <line no="75">
    <token name="T_DOC_COMMENT">     *                  the rest of the file.</token>
  </line>
  <line no="76">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="77">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">process</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">File</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$phpcsFile</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$stackPtr</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="78"/>
  <line no="79"/>
  <line no="80">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_COMMENT">//end interface</token>
  </line>
  <line no="81"/>
</source>
