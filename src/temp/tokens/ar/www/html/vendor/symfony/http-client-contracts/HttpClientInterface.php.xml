<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="//var/www/html/vendor/symfony/http-client-contracts" file="HttpClientInterface.php" realpath="/var/www/html/vendor/symfony/http-client-contracts/HttpClientInterface.php" size="5869" time="2022-03-13T20:07:29+00:00" unixtime="1647202049" sha1="1c7795bd514c76989ebb3525306044fcf60952dd" relative="ar/www/html/vendor/symfony/http-client-contracts/HttpClientInterface.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2"/>
  <line no="3">
    <token name="T_COMMENT">/*</token>
  </line>
  <line no="4">
    <token name="T_COMMENT"> * This file is part of the Symfony package.</token>
  </line>
  <line no="5">
    <token name="T_COMMENT"> *</token>
  </line>
  <line no="6">
    <token name="T_COMMENT"> * (c) Fabien Potencier &lt;fabien@symfony.com&gt;</token>
  </line>
  <line no="7">
    <token name="T_COMMENT"> *</token>
  </line>
  <line no="8">
    <token name="T_COMMENT"> * For the full copyright and license information, please view the LICENSE</token>
  </line>
  <line no="9">
    <token name="T_COMMENT"> * file that was distributed with this source code.</token>
  </line>
  <line no="10">
    <token name="T_COMMENT"> */</token>
  </line>
  <line no="11"/>
  <line no="12">
    <token name="T_NAMESPACE">namespace</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Symfony</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Contracts</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">HttpClient</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="13"/>
  <line no="14">
    <token name="T_USE">use</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Symfony</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Contracts</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">HttpClient</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Exception</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">TransportExceptionInterface</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="15">
    <token name="T_USE">use</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Symfony</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Contracts</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">HttpClient</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Test</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">HttpClientTestCase</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="16"/>
  <line no="17">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="18">
    <token name="T_DOC_COMMENT"> * Provides flexible methods for requesting HTTP resources synchronously or asynchronously.</token>
  </line>
  <line no="19">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="20">
    <token name="T_DOC_COMMENT"> * @see HttpClientTestCase for a reference test suite</token>
  </line>
  <line no="21">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="22">
    <token name="T_DOC_COMMENT"> * @method static withOptions(array $options) Returns a new instance of the client with new default options</token>
  </line>
  <line no="23">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="24">
    <token name="T_DOC_COMMENT"> * @author Nicolas Grekas &lt;p@tchwork.com&gt;</token>
  </line>
  <line no="25">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="26">
    <token name="T_INTERFACE">interface</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">HttpClientInterface</token>
  </line>
  <line no="27">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="28">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONST">const</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">OPTIONS_DEFAULTS</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
  </line>
  <line no="29">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'auth_basic'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE">   </token>
    <token name="T_COMMENT">// array|string - an array containing the username as first value, and optionally the</token>
  </line>
  <line no="30">
    <token name="T_WHITESPACE">                                </token>
    <token name="T_COMMENT">//   password as the second one; or string like username:password - enabling HTTP Basic</token>
  </line>
  <line no="31">
    <token name="T_WHITESPACE">                                </token>
    <token name="T_COMMENT">//   authentication (RFC 7617)</token>
  </line>
  <line no="32">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'auth_bearer'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE">  </token>
    <token name="T_COMMENT">// string - a token enabling HTTP Bearer authorization (RFC 6750)</token>
  </line>
  <line no="33">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'query'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE">          </token>
    <token name="T_COMMENT">// string[] - associative array of query string values to merge with the request's URL</token>
  </line>
  <line no="34">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'headers'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE">        </token>
    <token name="T_COMMENT">// iterable|string[]|string[][] - headers names provided as keys or as part of values</token>
  </line>
  <line no="35">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'body'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE">           </token>
    <token name="T_COMMENT">// array|string|resource|\Traversable|\Closure - the callback SHOULD yield a string</token>
  </line>
  <line no="36">
    <token name="T_WHITESPACE">                                </token>
    <token name="T_COMMENT">//   smaller than the amount requested as argument; the empty string signals EOF; if</token>
  </line>
  <line no="37">
    <token name="T_WHITESPACE">                                </token>
    <token name="T_COMMENT">//   an array is passed, it is meant as a form payload of field names and values</token>
  </line>
  <line no="38">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'json'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE">         </token>
    <token name="T_COMMENT">// mixed - if set, implementations MUST set the "body" option to the JSON-encoded</token>
  </line>
  <line no="39">
    <token name="T_WHITESPACE">                                </token>
    <token name="T_COMMENT">//   value and set the "content-type" header to a JSON-compatible value if it is not</token>
  </line>
  <line no="40">
    <token name="T_WHITESPACE">                                </token>
    <token name="T_COMMENT">//   explicitly defined in the headers option - typically "application/json"</token>
  </line>
  <line no="41">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'user_data'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">// mixed - any extra data to attach to the request (scalar, callable, object...) that</token>
  </line>
  <line no="42">
    <token name="T_WHITESPACE">                                </token>
    <token name="T_COMMENT">//   MUST be available via $response-&gt;getInfo('user_data') - not used internally</token>
  </line>
  <line no="43">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'max_redirects'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">20</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE">  </token>
    <token name="T_COMMENT">// int - the maximum number of redirects to follow; a value lower than or equal to 0</token>
  </line>
  <line no="44">
    <token name="T_WHITESPACE">                                </token>
    <token name="T_COMMENT">//   means redirects should not be followed; "Authorization" and "Cookie" headers MUST</token>
  </line>
  <line no="45">
    <token name="T_WHITESPACE">                                </token>
    <token name="T_COMMENT">//   NOT follow except for the initial host name</token>
  </line>
  <line no="46">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'http_version'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_COMMENT">// string - defaults to the best supported version, typically 1.1 or 2.0</token>
  </line>
  <line no="47">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'base_uri'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE">     </token>
    <token name="T_COMMENT">// string - the URI to resolve relative URLs, following rules in RFC 3986, section 2</token>
  </line>
  <line no="48">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'buffer'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE">       </token>
    <token name="T_COMMENT">// bool|resource|\Closure - whether the content of the response should be buffered or not,</token>
  </line>
  <line no="49">
    <token name="T_WHITESPACE">                                </token>
    <token name="T_COMMENT">//   or a stream resource where the response body should be written,</token>
  </line>
  <line no="50">
    <token name="T_WHITESPACE">                                </token>
    <token name="T_COMMENT">//   or a closure telling if/where the response should be buffered based on its headers</token>
  </line>
  <line no="51">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'on_progress'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE">  </token>
    <token name="T_COMMENT">// callable(int $dlNow, int $dlSize, array $info) - throwing any exceptions MUST abort</token>
  </line>
  <line no="52">
    <token name="T_WHITESPACE">                                </token>
    <token name="T_COMMENT">//   the request; it MUST be called on DNS resolution, on arrival of headers and on</token>
  </line>
  <line no="53">
    <token name="T_WHITESPACE">                                </token>
    <token name="T_COMMENT">//   completion; it SHOULD be called on upload/download of data and at least 1/s</token>
  </line>
  <line no="54">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'resolve'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE">        </token>
    <token name="T_COMMENT">// string[] - a map of host to IP address that SHOULD replace DNS resolution</token>
  </line>
  <line no="55">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'proxy'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE">        </token>
    <token name="T_COMMENT">// string - by default, the proxy-related env vars handled by curl SHOULD be honored</token>
  </line>
  <line no="56">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'no_proxy'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE">     </token>
    <token name="T_COMMENT">// string - a comma separated list of hosts that do not require a proxy to be reached</token>
  </line>
  <line no="57">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'timeout'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE">      </token>
    <token name="T_COMMENT">// float - the idle timeout - defaults to ini_get('default_socket_timeout')</token>
  </line>
  <line no="58">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'max_duration'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">// float - the maximum execution time for the request+response as a whole;</token>
  </line>
  <line no="59">
    <token name="T_WHITESPACE">                                </token>
    <token name="T_COMMENT">//   a value lower than or equal to 0 means it is unlimited</token>
  </line>
  <line no="60">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'bindto'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'0'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE">        </token>
    <token name="T_COMMENT">// string - the interface or the local socket to bind to</token>
  </line>
  <line no="61">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'verify_peer'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE">  </token>
    <token name="T_COMMENT">// see https://php.net/context.ssl for the following options</token>
  </line>
  <line no="62">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'verify_host'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="63">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'cafile'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="64">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'capath'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="65">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'local_cert'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="66">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'local_pk'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="67">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'passphrase'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="68">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'ciphers'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="69">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'peer_fingerprint'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="70">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'capture_peer_cert_chain'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="71">
    <token name="T_WHITESPACE">        </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'extra'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE">          </token>
    <token name="T_COMMENT">// array - additional options that can be ignored if unsupported, unlike regular options</token>
  </line>
  <line no="72">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="73"/>
  <line no="74">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="75">
    <token name="T_DOC_COMMENT">     * Requests an HTTP resource.</token>
  </line>
  <line no="76">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="77">
    <token name="T_DOC_COMMENT">     * Responses MUST be lazy, but their status code MUST be</token>
  </line>
  <line no="78">
    <token name="T_DOC_COMMENT">     * checked even if none of their public methods are called.</token>
  </line>
  <line no="79">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="80">
    <token name="T_DOC_COMMENT">     * Implementations are not required to support all options described above; they can also</token>
  </line>
  <line no="81">
    <token name="T_DOC_COMMENT">     * support more custom options; but in any case, they MUST throw a TransportExceptionInterface</token>
  </line>
  <line no="82">
    <token name="T_DOC_COMMENT">     * when an unsupported option is passed.</token>
  </line>
  <line no="83">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="84">
    <token name="T_DOC_COMMENT">     * @throws TransportExceptionInterface When an unsupported option is passed</token>
  </line>
  <line no="85">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="86">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">request</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">string</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$method</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">string</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$url</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$options</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COLON">:</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">ResponseInterface</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="87"/>
  <line no="88">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="89">
    <token name="T_DOC_COMMENT">     * Yields responses chunk by chunk as they complete.</token>
  </line>
  <line no="90">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="91">
    <token name="T_DOC_COMMENT">     * @param ResponseInterface|iterable&lt;array-key, ResponseInterface&gt; $responses One or more responses created by the current HTTP client</token>
  </line>
  <line no="92">
    <token name="T_DOC_COMMENT">     * @param float|null                                               $timeout   The idle timeout before yielding timeout chunks</token>
  </line>
  <line no="93">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="94">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">stream</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$responses</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">float</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$timeout</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COLON">:</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">ResponseStreamInterface</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="95">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="96"/>
</source>
