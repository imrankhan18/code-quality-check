<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="//var/www/html/vendor/symfony/service-contracts" file="ServiceSubscriberInterface.php" realpath="/var/www/html/vendor/symfony/service-contracts/ServiceSubscriberInterface.php" size="2246" time="2019-05-28T07:50:59+00:00" unixtime="1559029859" sha1="7b8664e35e135b0c55a6027560df625dc98cd7d0" relative="ar/www/html/vendor/symfony/service-contracts/ServiceSubscriberInterface.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2"/>
  <line no="3">
    <token name="T_COMMENT">/*</token>
  </line>
  <line no="4">
    <token name="T_COMMENT"> * This file is part of the Symfony package.</token>
  </line>
  <line no="5">
    <token name="T_COMMENT"> *</token>
  </line>
  <line no="6">
    <token name="T_COMMENT"> * (c) Fabien Potencier &lt;fabien@symfony.com&gt;</token>
  </line>
  <line no="7">
    <token name="T_COMMENT"> *</token>
  </line>
  <line no="8">
    <token name="T_COMMENT"> * For the full copyright and license information, please view the LICENSE</token>
  </line>
  <line no="9">
    <token name="T_COMMENT"> * file that was distributed with this source code.</token>
  </line>
  <line no="10">
    <token name="T_COMMENT"> */</token>
  </line>
  <line no="11"/>
  <line no="12">
    <token name="T_NAMESPACE">namespace</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Symfony</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Contracts</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Service</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="13"/>
  <line no="14">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="15">
    <token name="T_DOC_COMMENT"> * A ServiceSubscriber exposes its dependencies via the static {@link getSubscribedServices} method.</token>
  </line>
  <line no="16">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="17">
    <token name="T_DOC_COMMENT"> * The getSubscribedServices method returns an array of service types required by such instances,</token>
  </line>
  <line no="18">
    <token name="T_DOC_COMMENT"> * optionally keyed by the service names used internally. Service types that start with an interrogation</token>
  </line>
  <line no="19">
    <token name="T_DOC_COMMENT"> * mark "?" are optional, while the other ones are mandatory service dependencies.</token>
  </line>
  <line no="20">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="21">
    <token name="T_DOC_COMMENT"> * The injected service locators SHOULD NOT allow access to any other services not specified by the method.</token>
  </line>
  <line no="22">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="23">
    <token name="T_DOC_COMMENT"> * It is expected that ServiceSubscriber instances consume PSR-11-based service locators internally.</token>
  </line>
  <line no="24">
    <token name="T_DOC_COMMENT"> * This interface does not dictate any injection method for these service locators, although constructor</token>
  </line>
  <line no="25">
    <token name="T_DOC_COMMENT"> * injection is recommended.</token>
  </line>
  <line no="26">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="27">
    <token name="T_DOC_COMMENT"> * @author Nicolas Grekas &lt;p@tchwork.com&gt;</token>
  </line>
  <line no="28">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="29">
    <token name="T_INTERFACE">interface</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">ServiceSubscriberInterface</token>
  </line>
  <line no="30">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="31">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="32">
    <token name="T_DOC_COMMENT">     * Returns an array of service types required by such instances, optionally keyed by the service names used internally.</token>
  </line>
  <line no="33">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="34">
    <token name="T_DOC_COMMENT">     * For mandatory dependencies:</token>
  </line>
  <line no="35">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="36">
    <token name="T_DOC_COMMENT">     *  * ['logger' =&gt; 'Psr\Log\LoggerInterface'] means the objects use the "logger" name</token>
  </line>
  <line no="37">
    <token name="T_DOC_COMMENT">     *    internally to fetch a service which must implement Psr\Log\LoggerInterface.</token>
  </line>
  <line no="38">
    <token name="T_DOC_COMMENT">     *  * ['loggers' =&gt; 'Psr\Log\LoggerInterface[]'] means the objects use the "loggers" name</token>
  </line>
  <line no="39">
    <token name="T_DOC_COMMENT">     *    internally to fetch an iterable of Psr\Log\LoggerInterface instances.</token>
  </line>
  <line no="40">
    <token name="T_DOC_COMMENT">     *  * ['Psr\Log\LoggerInterface'] is a shortcut for</token>
  </line>
  <line no="41">
    <token name="T_DOC_COMMENT">     *  * ['Psr\Log\LoggerInterface' =&gt; 'Psr\Log\LoggerInterface']</token>
  </line>
  <line no="42">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="43">
    <token name="T_DOC_COMMENT">     * otherwise:</token>
  </line>
  <line no="44">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="45">
    <token name="T_DOC_COMMENT">     *  * ['logger' =&gt; '?Psr\Log\LoggerInterface'] denotes an optional dependency</token>
  </line>
  <line no="46">
    <token name="T_DOC_COMMENT">     *  * ['loggers' =&gt; '?Psr\Log\LoggerInterface[]'] denotes an optional iterable dependency</token>
  </line>
  <line no="47">
    <token name="T_DOC_COMMENT">     *  * ['?Psr\Log\LoggerInterface'] is a shortcut for</token>
  </line>
  <line no="48">
    <token name="T_DOC_COMMENT">     *  * ['Psr\Log\LoggerInterface' =&gt; '?Psr\Log\LoggerInterface']</token>
  </line>
  <line no="49">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="50">
    <token name="T_DOC_COMMENT">     * @return array The required service types, optionally keyed by service names</token>
  </line>
  <line no="51">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="52">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getSubscribedServices</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="53">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="54"/>
</source>
