<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="//usr/local/lib/php/Structures/Graph" file="Node.php" realpath="/usr/local/lib/php/Structures/Graph/Node.php" size="11040" time="2020-02-26T12:11:53+00:00" unixtime="1582719113" sha1="7a5da5dadeac91c625686b9e992dc79b0631878f" relative="sr/local/lib/php/Structures/Graph/Node.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2">
    <token name="T_COMMENT">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</token>
  </line>
  <line no="3">
    <token name="T_COMMENT">// +-----------------------------------------------------------------------------+</token>
  </line>
  <line no="4">
    <token name="T_COMMENT">// | Copyright (c) 2003 S&#xE9;rgio Gon&#xE7;alves Carvalho                                |</token>
  </line>
  <line no="5">
    <token name="T_COMMENT">// +-----------------------------------------------------------------------------+</token>
  </line>
  <line no="6">
    <token name="T_COMMENT">// | This file is part of Structures_Graph.                                      |</token>
  </line>
  <line no="7">
    <token name="T_COMMENT">// |                                                                             |</token>
  </line>
  <line no="8">
    <token name="T_COMMENT">// | Structures_Graph is free software; you can redistribute it and/or modify    |</token>
  </line>
  <line no="9">
    <token name="T_COMMENT">// | it under the terms of the GNU Lesser General Public License as published by |</token>
  </line>
  <line no="10">
    <token name="T_COMMENT">// | the Free Software Foundation; either version 2.1 of the License, or         |</token>
  </line>
  <line no="11">
    <token name="T_COMMENT">// | (at your option) any later version.                                         |</token>
  </line>
  <line no="12">
    <token name="T_COMMENT">// |                                                                             |</token>
  </line>
  <line no="13">
    <token name="T_COMMENT">// | Structures_Graph is distributed in the hope that it will be useful,         |</token>
  </line>
  <line no="14">
    <token name="T_COMMENT">// | but WITHOUT ANY WARRANTY; without even the implied warranty of              |</token>
  </line>
  <line no="15">
    <token name="T_COMMENT">// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               |</token>
  </line>
  <line no="16">
    <token name="T_COMMENT">// | GNU Lesser General Public License for more details.                         |</token>
  </line>
  <line no="17">
    <token name="T_COMMENT">// |                                                                             |</token>
  </line>
  <line no="18">
    <token name="T_COMMENT">// | You should have received a copy of the GNU Lesser General Public License    |</token>
  </line>
  <line no="19">
    <token name="T_COMMENT">// | along with Structures_Graph; if not, write to the Free Software             |</token>
  </line>
  <line no="20">
    <token name="T_COMMENT">// | Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA                    |</token>
  </line>
  <line no="21">
    <token name="T_COMMENT">// | 02111-1307 USA                                                              |</token>
  </line>
  <line no="22">
    <token name="T_COMMENT">// +-----------------------------------------------------------------------------+</token>
  </line>
  <line no="23">
    <token name="T_COMMENT">// | Author: S&#xE9;rgio Carvalho &lt;sergio.carvalho@portugalmail.com&gt;                  |</token>
  </line>
  <line no="24">
    <token name="T_COMMENT">// +-----------------------------------------------------------------------------+</token>
  </line>
  <line no="25">
    <token name="T_COMMENT">//</token>
  </line>
  <line no="26">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="27">
    <token name="T_DOC_COMMENT"> * This file contains the definition of the Structures_Graph_Node class</token>
  </line>
  <line no="28">
    <token name="T_DOC_COMMENT"> * </token>
  </line>
  <line no="29">
    <token name="T_DOC_COMMENT"> * @see Structures_Graph_Node</token>
  </line>
  <line no="30">
    <token name="T_DOC_COMMENT"> * @package Structures_Graph</token>
  </line>
  <line no="31">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="32"/>
  <line no="33">
    <token name="T_COMMENT">/* dependencies {{{ */</token>
  </line>
  <line no="34">
    <token name="T_DOC_COMMENT">/** */</token>
  </line>
  <line no="35">
    <token name="T_REQUIRE_ONCE">require_once</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'PEAR.php'</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="36">
    <token name="T_DOC_COMMENT">/** */</token>
  </line>
  <line no="37">
    <token name="T_REQUIRE_ONCE">require_once</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'Structures/Graph.php'</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="38">
    <token name="T_COMMENT">/* }}} */</token>
  </line>
  <line no="39"/>
  <line no="40">
    <token name="T_COMMENT">/* class Structures_Graph_Node {{{ */</token>
  </line>
  <line no="41">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="42">
    <token name="T_DOC_COMMENT"> * The Structures_Graph_Node class represents a Node that can be member of a </token>
  </line>
  <line no="43">
    <token name="T_DOC_COMMENT"> * graph node set.</token>
  </line>
  <line no="44">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="45">
    <token name="T_DOC_COMMENT"> * A graph node can contain data. Under this API, the node contains default data, </token>
  </line>
  <line no="46">
    <token name="T_DOC_COMMENT"> * and key index data. It behaves, thus, both as a regular data node, and as a </token>
  </line>
  <line no="47">
    <token name="T_DOC_COMMENT"> * dictionary (or associative array) node.</token>
  </line>
  <line no="48">
    <token name="T_DOC_COMMENT"> * </token>
  </line>
  <line no="49">
    <token name="T_DOC_COMMENT"> * Regular data is accessed via getData and setData. Key indexed data is accessed</token>
  </line>
  <line no="50">
    <token name="T_DOC_COMMENT"> * via getMetadata and setMetadata.</token>
  </line>
  <line no="51">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="52">
    <token name="T_DOC_COMMENT"> * @author		S&#xE9;rgio Carvalho &lt;sergio.carvalho@portugalmail.com&gt; </token>
  </line>
  <line no="53">
    <token name="T_DOC_COMMENT"> * @copyright	(c) 2004 by S&#xE9;rgio Carvalho</token>
  </line>
  <line no="54">
    <token name="T_DOC_COMMENT"> * @package Structures_Graph</token>
  </line>
  <line no="55">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="56">
    <token name="T_COMMENT">/* }}} */</token>
  </line>
  <line no="57">
    <token name="T_CLASS">class</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Structures_Graph_Node</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="58">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* fields {{{ */</token>
  </line>
  <line no="59">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/** </token>
  </line>
  <line no="60">
    <token name="T_DOC_COMMENT">     * @access private </token>
  </line>
  <line no="61">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="62">
    <token name="T_WHITESPACE">    </token>
    <token name="T_VAR">var</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$_data</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="63">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/** @access private */</token>
  </line>
  <line no="64">
    <token name="T_WHITESPACE">    </token>
    <token name="T_VAR">var</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$_metadata</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="65">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/** @access private */</token>
  </line>
  <line no="66">
    <token name="T_WHITESPACE">    </token>
    <token name="T_VAR">var</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$_arcs</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="67">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/** @access private */</token>
  </line>
  <line no="68">
    <token name="T_WHITESPACE">    </token>
    <token name="T_VAR">var</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$_graph</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="69">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* }}} */</token>
  </line>
  <line no="70"/>
  <line no="71">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* Constructor {{{ */</token>
  </line>
  <line no="72">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="73">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="74">
    <token name="T_DOC_COMMENT">    * Constructor</token>
  </line>
  <line no="75">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="76">
    <token name="T_DOC_COMMENT">    * @access	public</token>
  </line>
  <line no="77">
    <token name="T_DOC_COMMENT">    */</token>
  </line>
  <line no="78">
    <token name="T_WHITESPACE">    </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">__construct</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="79">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="80">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* }}} */</token>
  </line>
  <line no="81"/>
  <line no="82">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* getGraph {{{ */</token>
  </line>
  <line no="83">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="84">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="85">
    <token name="T_DOC_COMMENT">    * Node graph getter</token>
  </line>
  <line no="86">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="87">
    <token name="T_DOC_COMMENT">    * @return	Structures_Graph	Graph where node is stored</token>
  </line>
  <line no="88">
    <token name="T_DOC_COMMENT">    * @access	public</token>
  </line>
  <line no="89">
    <token name="T_DOC_COMMENT">    */</token>
  </line>
  <line no="90">
    <token name="T_WHITESPACE">    </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_AMPERSAND">&amp;</token>
    <token name="T_STRING">getGraph</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="91">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_graph</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="92">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="93">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* }}} */</token>
  </line>
  <line no="94"/>
  <line no="95">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* setGraph {{{ */</token>
  </line>
  <line no="96">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="97">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="98">
    <token name="T_DOC_COMMENT">    * Node graph setter. This method should not be called directly. Use Graph::addNode instead.</token>
  </line>
  <line no="99">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="100">
    <token name="T_DOC_COMMENT">    * @param    Structures_Graph   Set the graph for this node. </token>
  </line>
  <line no="101">
    <token name="T_DOC_COMMENT">    * @see      Structures_Graph::addNode()</token>
  </line>
  <line no="102">
    <token name="T_DOC_COMMENT">    * @access	public</token>
  </line>
  <line no="103">
    <token name="T_DOC_COMMENT">    */</token>
  </line>
  <line no="104">
    <token name="T_WHITESPACE">    </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">setGraph</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_AMPERSAND">&amp;</token>
    <token name="T_VARIABLE">$graph</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="105">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_graph</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_PHPDOX_AMPERSAND">&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$graph</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="106">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="107">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* }}} */</token>
  </line>
  <line no="108"/>
  <line no="109">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* getData {{{ */</token>
  </line>
  <line no="110">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="111">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="112">
    <token name="T_DOC_COMMENT">    * Node data getter.</token>
  </line>
  <line no="113">
    <token name="T_DOC_COMMENT">    * </token>
  </line>
  <line no="114">
    <token name="T_DOC_COMMENT">    * Each graph node can contain a reference to one variable. This is the getter for that reference.</token>
  </line>
  <line no="115">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="116">
    <token name="T_DOC_COMMENT">    * @return	mixed	Data stored in node</token>
  </line>
  <line no="117">
    <token name="T_DOC_COMMENT">    * @access	public</token>
  </line>
  <line no="118">
    <token name="T_DOC_COMMENT">    */</token>
  </line>
  <line no="119">
    <token name="T_WHITESPACE">    </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_AMPERSAND">&amp;</token>
    <token name="T_STRING">getData</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="120">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_data</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="121">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="122">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* }}} */</token>
  </line>
  <line no="123"/>
  <line no="124">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* setData {{{ */</token>
  </line>
  <line no="125">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="126">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="127">
    <token name="T_DOC_COMMENT">    * Node data setter</token>
  </line>
  <line no="128">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="129">
    <token name="T_DOC_COMMENT">    * Each graph node can contain a reference to one variable. This is the setter for that reference.</token>
  </line>
  <line no="130">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="131">
    <token name="T_DOC_COMMENT">    * @return	mixed	Data to store in node</token>
  </line>
  <line no="132">
    <token name="T_DOC_COMMENT">    * @access	public</token>
  </line>
  <line no="133">
    <token name="T_DOC_COMMENT">    */</token>
  </line>
  <line no="134">
    <token name="T_WHITESPACE">    </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">setData</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_AMPERSAND">&amp;</token>
    <token name="T_VARIABLE">$data</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="135">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_data</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_PHPDOX_AMPERSAND">&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$data</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="136">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="137">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* }}} */</token>
  </line>
  <line no="138"/>
  <line no="139">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* metadataKeyExists {{{ */</token>
  </line>
  <line no="140">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="141">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="142">
    <token name="T_DOC_COMMENT">    * Test for existence of metadata under a given key.</token>
  </line>
  <line no="143">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="144">
    <token name="T_DOC_COMMENT">    * Each graph node can contain multiple 'metadata' entries, each stored under a different key, as in an </token>
  </line>
  <line no="145">
    <token name="T_DOC_COMMENT">    * associative array or in a dictionary. This method tests whether a given metadata key exists for this node.</token>
  </line>
  <line no="146">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="147">
    <token name="T_DOC_COMMENT">    * @param    string    Key to test</token>
  </line>
  <line no="148">
    <token name="T_DOC_COMMENT">    * @return	boolean	 </token>
  </line>
  <line no="149">
    <token name="T_DOC_COMMENT">    * @access	public</token>
  </line>
  <line no="150">
    <token name="T_DOC_COMMENT">    */</token>
  </line>
  <line no="151">
    <token name="T_WHITESPACE">    </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">metadataKeyExists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="152">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">array_key_exists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_metadata</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="153">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="154">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* }}} */</token>
  </line>
  <line no="155"/>
  <line no="156">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* getMetadata {{{ */</token>
  </line>
  <line no="157">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="158">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="159">
    <token name="T_DOC_COMMENT">    * Node metadata getter</token>
  </line>
  <line no="160">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="161">
    <token name="T_DOC_COMMENT">    * Each graph node can contain multiple 'metadata' entries, each stored under a different key, as in an </token>
  </line>
  <line no="162">
    <token name="T_DOC_COMMENT">    * associative array or in a dictionary. This method gets the data under the given key. If the key does</token>
  </line>
  <line no="163">
    <token name="T_DOC_COMMENT">    * not exist, an error will be thrown, so testing using metadataKeyExists might be needed.</token>
  </line>
  <line no="164">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="165">
    <token name="T_DOC_COMMENT">    * @param    string  Key</token>
  </line>
  <line no="166">
    <token name="T_DOC_COMMENT">    * @param    boolean nullIfNonexistent (defaults to false).</token>
  </line>
  <line no="167">
    <token name="T_DOC_COMMENT">    * @return	mixed	Metadata Data stored in node under given key</token>
  </line>
  <line no="168">
    <token name="T_DOC_COMMENT">    * @see      metadataKeyExists</token>
  </line>
  <line no="169">
    <token name="T_DOC_COMMENT">    * @access	public</token>
  </line>
  <line no="170">
    <token name="T_DOC_COMMENT">    */</token>
  </line>
  <line no="171">
    <token name="T_WHITESPACE">    </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_AMPERSAND">&amp;</token>
    <token name="T_STRING">getMetadata</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$nullIfNonexistent</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="172">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">array_key_exists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_metadata</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="173">
    <token name="T_WHITESPACE">            </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_metadata</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="174">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="175">
    <token name="T_WHITESPACE">            </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$nullIfNonexistent</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="176">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$a</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="177">
    <token name="T_WHITESPACE">                </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$a</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="178">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="179">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$a</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Pear</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">raiseError</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'Structures_Graph_Node::getMetadata: Requested key does not exist'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">STRUCTURES_GRAPH_ERROR_GENERIC</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="180">
    <token name="T_WHITESPACE">                </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$a</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="181">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="182">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="183">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="184">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* }}} */</token>
  </line>
  <line no="185"/>
  <line no="186">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* unsetMetadata {{{ */</token>
  </line>
  <line no="187">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="188">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="189">
    <token name="T_DOC_COMMENT">    * Delete metadata by key</token>
  </line>
  <line no="190">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="191">
    <token name="T_DOC_COMMENT">    * Each graph node can contain multiple 'metadata' entries, each stored under a different key, as in an </token>
  </line>
  <line no="192">
    <token name="T_DOC_COMMENT">    * associative array or in a dictionary. This method removes any data that might be stored under the provided key.</token>
  </line>
  <line no="193">
    <token name="T_DOC_COMMENT">    * If the key does not exist, no error is thrown, so it is safe using this method without testing for key existence.</token>
  </line>
  <line no="194">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="195">
    <token name="T_DOC_COMMENT">    * @param    string  Key</token>
  </line>
  <line no="196">
    <token name="T_DOC_COMMENT">    * @access	public</token>
  </line>
  <line no="197">
    <token name="T_DOC_COMMENT">    */</token>
  </line>
  <line no="198">
    <token name="T_WHITESPACE">    </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">unsetMetadata</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="199">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">array_key_exists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_metadata</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_UNSET">unset</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_metadata</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="200">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="201">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* }}} */</token>
  </line>
  <line no="202"/>
  <line no="203">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* setMetadata {{{ */</token>
  </line>
  <line no="204">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="205">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="206">
    <token name="T_DOC_COMMENT">    * Node metadata setter</token>
  </line>
  <line no="207">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="208">
    <token name="T_DOC_COMMENT">    * Each graph node can contain multiple 'metadata' entries, each stored under a different key, as in an </token>
  </line>
  <line no="209">
    <token name="T_DOC_COMMENT">    * associative array or in a dictionary. This method stores data under the given key. If the key already exists,</token>
  </line>
  <line no="210">
    <token name="T_DOC_COMMENT">    * previously stored data is discarded.</token>
  </line>
  <line no="211">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="212">
    <token name="T_DOC_COMMENT">    * @param    string  Key</token>
  </line>
  <line no="213">
    <token name="T_DOC_COMMENT">    * @param    mixed   Data </token>
  </line>
  <line no="214">
    <token name="T_DOC_COMMENT">    * @access	public</token>
  </line>
  <line no="215">
    <token name="T_DOC_COMMENT">    */</token>
  </line>
  <line no="216">
    <token name="T_WHITESPACE">    </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">setMetadata</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_AMPERSAND">&amp;</token>
    <token name="T_VARIABLE">$data</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="217">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_metadata</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_PHPDOX_AMPERSAND">&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$data</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="218">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="219">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* }}} */</token>
  </line>
  <line no="220"/>
  <line no="221">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* _connectTo {{{ */</token>
  </line>
  <line no="222">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/** @access private */</token>
  </line>
  <line no="223">
    <token name="T_WHITESPACE">    </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">_connectTo</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_AMPERSAND">&amp;</token>
    <token name="T_VARIABLE">$destinationNode</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="224">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_arcs</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_PHPDOX_AMPERSAND">&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$destinationNode</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="225">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="226">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* }}} */</token>
  </line>
  <line no="227"/>
  <line no="228">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* connectTo {{{ */</token>
  </line>
  <line no="229">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="230">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="231">
    <token name="T_DOC_COMMENT">    * Connect this node to another one.</token>
  </line>
  <line no="232">
    <token name="T_DOC_COMMENT">    * </token>
  </line>
  <line no="233">
    <token name="T_DOC_COMMENT">    * If the graph is not directed, the reverse arc, connecting $destinationNode to $this is also created.</token>
  </line>
  <line no="234">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="235">
    <token name="T_DOC_COMMENT">    * @param    Structures_Graph_Node Node to connect to</token>
  </line>
  <line no="236">
    <token name="T_DOC_COMMENT">    * @access	public</token>
  </line>
  <line no="237">
    <token name="T_DOC_COMMENT">    */</token>
  </line>
  <line no="238">
    <token name="T_WHITESPACE">    </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">connectTo</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_AMPERSAND">&amp;</token>
    <token name="T_VARIABLE">$destinationNode</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="239">
    <token name="T_WHITESPACE">        </token>
    <token name="T_COMMENT">// We only connect to nodes</token>
  </line>
  <line no="240">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_a</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$destinationNode</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'Structures_Graph_Node'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Pear</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">raiseError</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'Structures_Graph_Node::connectTo received an object that is not a Structures_Graph_Node'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">STRUCTURES_GRAPH_ERROR_GENERIC</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="241">
    <token name="T_WHITESPACE">        </token>
    <token name="T_COMMENT">// Nodes must already be in graphs to be connected</token>
  </line>
  <line no="242">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_graph</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Pear</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">raiseError</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'Structures_Graph_Node::connectTo Tried to connect a node that is not in a graph'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">STRUCTURES_GRAPH_ERROR_GENERIC</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="243">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$destinationNode</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getGraph</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Pear</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">raiseError</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'Structures_Graph_Node::connectTo Tried to connect to a node that is not in a graph'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">STRUCTURES_GRAPH_ERROR_GENERIC</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="244">
    <token name="T_WHITESPACE">        </token>
    <token name="T_COMMENT">// Connect here</token>
  </line>
  <line no="245">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_connectTo</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$destinationNode</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="246">
    <token name="T_WHITESPACE">        </token>
    <token name="T_COMMENT">// If graph is undirected, connect back</token>
  </line>
  <line no="247">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_graph</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">isDirected</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="248">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$destinationNode</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_connectTo</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="249">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="250">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="251">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* }}} */</token>
  </line>
  <line no="252"/>
  <line no="253">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* getNeighbours {{{ */</token>
  </line>
  <line no="254">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="255">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="256">
    <token name="T_DOC_COMMENT">    * Return nodes connected to this one.</token>
  </line>
  <line no="257">
    <token name="T_DOC_COMMENT">    * </token>
  </line>
  <line no="258">
    <token name="T_DOC_COMMENT">    * @return   array   Array of nodes</token>
  </line>
  <line no="259">
    <token name="T_DOC_COMMENT">    * @access	public</token>
  </line>
  <line no="260">
    <token name="T_DOC_COMMENT">    */</token>
  </line>
  <line no="261">
    <token name="T_WHITESPACE">    </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getNeighbours</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="262">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_arcs</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="263">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="264">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* }}} */</token>
  </line>
  <line no="265"/>
  <line no="266">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* connectsTo {{{ */</token>
  </line>
  <line no="267">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="268">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="269">
    <token name="T_DOC_COMMENT">    * Test wether this node has an arc to the target node</token>
  </line>
  <line no="270">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="271">
    <token name="T_DOC_COMMENT">    * @return	boolean   True if the two nodes are connected</token>
  </line>
  <line no="272">
    <token name="T_DOC_COMMENT">    * @access	public</token>
  </line>
  <line no="273">
    <token name="T_DOC_COMMENT">    */</token>
  </line>
  <line no="274">
    <token name="T_WHITESPACE">    </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">connectsTo</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_AMPERSAND">&amp;</token>
    <token name="T_VARIABLE">$target</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="275">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">version_compare</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">PHP_VERSION</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'5.0.0'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_GREATER_OR_EQUAL">&gt;=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="276">
    <token name="T_WHITESPACE">            </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">in_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$target</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getNeighbours</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="277">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="278"/>
  <line no="279">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$copy</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$target</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="280">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$arcKeys</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">array_keys</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_arcs</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="281">
    <token name="T_WHITESPACE">        </token>
    <token name="T_FOREACH">foreach</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$arcKeys</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_AS">as</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="282">
    <token name="T_WHITESPACE">            </token>
    <token name="T_COMMENT">/* ZE1 chokes on this expression:</token>
  </line>
  <line no="283">
    <token name="T_COMMENT">                if ($target === $arc) return true;</token>
  </line>
  <line no="284">
    <token name="T_COMMENT">              so, we'll use more convoluted stuff</token>
  </line>
  <line no="285">
    <token name="T_COMMENT">            */</token>
  </line>
  <line no="286">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$arc</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_PHPDOX_AMPERSAND">&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_arcs</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="287">
    <token name="T_WHITESPACE">            </token>
    <token name="T_VARIABLE">$target</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="288">
    <token name="T_WHITESPACE">            </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$arc</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_IDENTICAL">===</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="289">
    <token name="T_WHITESPACE">                </token>
    <token name="T_VARIABLE">$target</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="290">
    <token name="T_WHITESPACE">                </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$arc</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_IDENTICAL">===</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="291">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_VARIABLE">$target</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$copy</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="292">
    <token name="T_WHITESPACE">                    </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="293">
    <token name="T_WHITESPACE">                </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="294">
    <token name="T_WHITESPACE">            </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="295">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="296">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$target</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$copy</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="297">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="298">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="299">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* }}} */</token>
  </line>
  <line no="300"/>
  <line no="301">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* inDegree {{{ */</token>
  </line>
  <line no="302">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="303">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="304">
    <token name="T_DOC_COMMENT">    * Calculate the in degree of the node.</token>
  </line>
  <line no="305">
    <token name="T_DOC_COMMENT">    * </token>
  </line>
  <line no="306">
    <token name="T_DOC_COMMENT">    * The indegree for a node is the number of arcs entering the node. For non directed graphs, </token>
  </line>
  <line no="307">
    <token name="T_DOC_COMMENT">    * the indegree is equal to the outdegree.</token>
  </line>
  <line no="308">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="309">
    <token name="T_DOC_COMMENT">    * @return	integer	 In degree of the node</token>
  </line>
  <line no="310">
    <token name="T_DOC_COMMENT">    * @access	public</token>
  </line>
  <line no="311">
    <token name="T_DOC_COMMENT">    */</token>
  </line>
  <line no="312">
    <token name="T_WHITESPACE">    </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">inDegree</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="313">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_graph</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="314">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_graph</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">isDirected</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">outDegree</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="315">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$result</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="316">
    <token name="T_WHITESPACE">        </token>
    <token name="T_VARIABLE">$graphNodes</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_PHPDOX_AMPERSAND">&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_graph</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getNodes</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="317">
    <token name="T_WHITESPACE">        </token>
    <token name="T_FOREACH">foreach</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">array_keys</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$graphNodes</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_AS">as</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="318">
    <token name="T_WHITESPACE">            </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$graphNodes</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">connectsTo</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$result</token>
    <token name="T_INC">++</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="319">
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="320">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$result</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="321">
    <token name="T_WHITESPACE">        </token>
  </line>
  <line no="322">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="323">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* }}} */</token>
  </line>
  <line no="324"/>
  <line no="325">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* outDegree {{{ */</token>
  </line>
  <line no="326">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="327">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="328">
    <token name="T_DOC_COMMENT">    * Calculate the out degree of the node.</token>
  </line>
  <line no="329">
    <token name="T_DOC_COMMENT">    *</token>
  </line>
  <line no="330">
    <token name="T_DOC_COMMENT">    * The outdegree for a node is the number of arcs exiting the node. For non directed graphs,</token>
  </line>
  <line no="331">
    <token name="T_DOC_COMMENT">    * the outdegree is always equal to the indegree.</token>
  </line>
  <line no="332">
    <token name="T_DOC_COMMENT">    * </token>
  </line>
  <line no="333">
    <token name="T_DOC_COMMENT">    * @return	integer	 Out degree of the node</token>
  </line>
  <line no="334">
    <token name="T_DOC_COMMENT">    * @access	public</token>
  </line>
  <line no="335">
    <token name="T_DOC_COMMENT">    */</token>
  </line>
  <line no="336">
    <token name="T_WHITESPACE">    </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">outDegree</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="337">
    <token name="T_WHITESPACE">        </token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_graph</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="338">
    <token name="T_WHITESPACE">        </token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">sizeof</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_arcs</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="339">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="340">
    <token name="T_WHITESPACE">    </token>
    <token name="T_COMMENT">/* }}} */</token>
  </line>
  <line no="341">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="342">
    <token name="T_CLOSE_TAG">?&gt;</token>
  </line>
  <line no="343"/>
</source>
